CodeGenerator {
  asts          = ast*:xs !.             -> { xs                                         }
  ast           = [%:x !.]               -> x
  Namespace     = .:x ast*:ys            -> x:namespace                                         ->
                                            []:ids                                              ->
                                            []:matchers                                         ->
                                            { matchers ys }
  Rule          = .:x ast:y              -> { "rules['" namespace "." x "'] = " y "\n"   }
  Or            = matcher:m astList:x    -> { "stream.operator_or([" x "])"              }:body -> m
  Scope         = matcher:m ast:x        -> { "stream.with_scope(" x ")"                 }:body -> m
  And           = matcher:m astList:x    -> { "stream.operator_and([" x "])"             }:body -> m
  Bind          = matcher:m repr:x ast:y -> { "stream.bind(" x ", " y ".run(stream))"    }:body -> m
  Star          = matcher:m ast:x        -> { "stream.operator_star(" x ")"              }:body -> m
  Not           = matcher:m ast:x        -> { "stream.operator_not(" x ")"               }:body -> m
  MatchCallRule = matcher:m              -> { "stream.match_call_rule('" namespace "')"  }:body -> m
  MatchRule     = matcher:m .:x          -> { "rules['" namespace "." x "'].run(stream)" }:body -> m
  MatchObject   = matcher:m ast:x        -> { "stream.match(lambda item: " x ")"         }:body -> m
  MatchList     = matcher:m ast:x        -> { "stream.match_list(" x ")"                 }:body -> m
  Action        = matcher:m ast:x        -> { "stream.action(lambda self: " x ")"        }:body -> m
  Any           =                        -> { "True"             ", 'any'"               }
  Eq            = repr:x                 -> { "item == " x       ", " repr(x)            }
  Range         = repr:x repr:y          -> { x " <= item <= " y ", \"" x "-" y "\""     }
  Set           = repr:x ast:y ast:z     -> { "self.bind(" x ", " y ", lambda: " z ")"   }
  String        = repr
  List          = astList:x              -> { "self.lookup('concat')([" x "])"           }
  ListItem      = repr:x ast:y           -> { "self.lookup('splice')(" x ", " y ")"      }
  Format        = astList:x              -> { "self.lookup('join')([" x "])"             }
  Call          = ast:x astList:y        -> { x "(" y ")"                                }
  Lookup        = repr:x                 -> { "self.lookup(" x ")"                       }
  astList       = ast*:xs                -> { "\n" indent(join(xs ",\n")) "\n"           }
  matcher       =                        -> { "Matcher_" namespace "_" len(ids)          }:id ->
                                            append(ids id)                                    ->
                                            append(matchers { "class " id ":\n" indent({
                                                "def run(self, stream):\n" indent({
                                                  "return " body "\n"
                                                })
                                              })
                                            })                                                ->
                                            { id "()" }
  repr          = .:x                    -> repr(x)
}
