{
    "links": {
        "00748abcbd15496f9574b7cba56dbf44": {
            "from": "79b1ae3dad3c44a285b57fb88b01e561",
            "timestamp_created": "2021-06-19T07:27:53.381747",
            "to": "58b1b56e5208481a8732c664d989bfe8"
        },
        "022d7ed94b1f42008cb6522f8c0699af": {
            "from": "5113375cfc3f4d62ae828a31baf28344",
            "timestamp_created": "2021-06-20T10:33:19.577757",
            "to": "11b1c0c63fb446ddb348d60f48f8c943"
        },
        "0421fc2e037d4d4aab5f8c17bd906886": {
            "from": "2a3c18b5f0914536be66afe1ea8aee44",
            "timestamp_created": "2021-04-25T05:34:37.281640",
            "to": "f4c44595fce34de389e14cdd4a1c91ab"
        },
        "04395e2c558e493ebaa493e55174a558": {
            "from": "e9202b7c4ada48afb2cc0ae453165209",
            "timestamp_created": "2021-06-19T07:27:53.053448",
            "to": "e8fff187417d4e4d850f5663a8b3fb0a"
        },
        "095c71285ef143d19bd653cf1f4afdf1": {
            "from": "11b1c0c63fb446ddb348d60f48f8c943",
            "timestamp_created": "2021-06-19T07:27:54.253568",
            "to": "663b1555bdd643f6a873ee3d75c0fa1f"
        },
        "09cff1dcaac740d68b8cec8d499a4a88": {
            "from": "2a3c18b5f0914536be66afe1ea8aee44",
            "timestamp_created": "2021-04-25T06:13:24.874054",
            "to": "bff6c2de92c6405cb51883b79c03ba4b"
        },
        "0a78d06f7e0f4fe6844f0d45206e3ea3": {
            "from": "af88ba59057c45338350bc42a0001adb",
            "timestamp_created": "2021-06-20T10:32:29.873041",
            "to": "5113375cfc3f4d62ae828a31baf28344"
        },
        "0b953dfb7d20458f8d1ab8c57754a873": {
            "from": "25ce5b2877d94c10b54dcad84500c9f9",
            "timestamp_created": "2021-06-19T07:27:53.817920",
            "to": "df59f68052454e8b8d648c503d0139ff"
        },
        "0cf1d024fbb847cd8c1605a6d74cdc86": {
            "from": "2a3c18b5f0914536be66afe1ea8aee44",
            "timestamp_created": "2021-06-20T10:26:36.724649",
            "to": "b9ead1e5dbad4a97abb50aad507341ca"
        },
        "0f12f6b1f68f4b729e452285c09369de": {
            "from": "05a9b0cd9f80404793e93b7906713700",
            "timestamp_created": "2021-06-19T07:27:52.795202",
            "to": "9dea2f6390954d3fa2de99e0eb6457ca"
        },
        "0fd31f764c3a463986f72d6bdbb85e73": {
            "from": "5d02a07589c84bb6a913b5d99708c603",
            "timestamp_created": "2021-06-19T07:27:54.200221",
            "to": "3630311283704b878fd1b9ca4d3453f9"
        },
        "1112dfed4c294bb7903ec371c4b735e7": {
            "from": "01bd457b2d52424da9a9f2fd914133c3",
            "timestamp_created": "2021-06-19T07:27:53.559847",
            "to": "915b1755daf440958f7806c9927ccb50"
        },
        "112e172b1371404b8b693ec02c7463f0": {
            "from": "5113375cfc3f4d62ae828a31baf28344",
            "timestamp_created": "2021-06-20T10:33:14.254550",
            "to": "030878e06ca3461fb0110428917bcfc2"
        },
        "116b62599ed94e12a3a9489272e05583": {
            "from": "9dea2f6390954d3fa2de99e0eb6457ca",
            "timestamp_created": "2021-06-19T07:27:52.806786",
            "to": "42bff83e87e6458b90cae3be48449b9e"
        },
        "12ab896a3b83422cb6d9dac6b2579dfa": {
            "from": "0307b3ea3c4a4d3b9216ab7b9e2e0bbd",
            "timestamp_created": "2021-06-19T07:27:52.616756",
            "to": "42fc6bb887984f2780bacd47e8fb3e08"
        },
        "14b31f20ba9a478088ad854299ae7f5c": {
            "from": "5d81e13c3cb9476da21aac3f66c239f7",
            "timestamp_created": "2021-06-19T07:27:52.683722",
            "to": "03b9695f2aeb409ca19e899c73715bcb"
        },
        "1771def46975480d90b4eab650e102f7": {
            "from": "5aa33f5f89b343b690209ac5ae1aaa79",
            "timestamp_created": "2021-04-25T06:19:59.542519",
            "to": "4bc36929a07a46bc9fd7c691f4e93be4"
        },
        "17dc6fc831b041cf913ac22883d59d54": {
            "from": "915b1755daf440958f7806c9927ccb50",
            "timestamp_created": "2021-06-19T07:27:53.579951",
            "to": "1c384abda79d4c0b8f117c6b293e2dc5"
        },
        "1ba8195dc58544529d81843d6813c89c": {
            "from": "7750cba42afa49e2bc1ff1765d005014",
            "timestamp_created": "2021-04-25T05:49:57.105749",
            "to": "30096585cb4e4f0290bce0505032e629"
        },
        "1c5747a77f3246d1b0e2e385efbcba32": {
            "from": "378ad330e3104287820d0abc9669577b",
            "timestamp_created": "2021-06-19T07:27:53.209628",
            "to": "c4426c34655c47b3b69dd416b4cd26fc"
        },
        "1ed458f17bda4b9bb019a471cdfa75a6": {
            "from": "a0fe67b02bfd42c9adca92215cbf88b1",
            "timestamp_created": "2021-06-20T10:21:32.832016",
            "to": "6de5ccbebfc9457e99ac7d0365ca6f53"
        },
        "23f3c0c39ca14b0eabd33e3c55b80408": {
            "from": "ee8e6fa26d14437490223461461e9fb4",
            "timestamp_created": "2021-06-19T07:27:53.420039",
            "to": "e1c773d06f6947108931b33d87f75610"
        },
        "249d6a5328bd4f9a9d53d65f9d8d5224": {
            "from": "2a3c18b5f0914536be66afe1ea8aee44",
            "timestamp_created": "2021-04-25T05:42:56.115072",
            "to": "81c03dd935934f6988dbe6800d2a0013"
        },
        "24a597ed83ca49a1947c89c7cb9b6bde": {
            "from": "de4893d9140f4fc0b623a31c81af267c",
            "timestamp_created": "2021-06-20T12:30:05.662790",
            "to": "6f2696b9761a45d48b44f77888167531"
        },
        "24c3f6bb51334c4cbe348541751ff2cf": {
            "from": "5d81e13c3cb9476da21aac3f66c239f7",
            "timestamp_created": "2021-06-19T07:27:52.662041",
            "to": "e883456fca884d17b24ac86d11fb2846"
        },
        "24db432de7fa4eaaa2e804c5ecbeb257": {
            "from": "030878e06ca3461fb0110428917bcfc2",
            "timestamp_created": "2021-06-19T07:27:53.863788",
            "to": "2ee004f1e26a4e6bafcf5e9fd1e4e874"
        },
        "26bd9f6ba60d4e16b16236373c69cc8c": {
            "from": "19c4146f24a34fd692f02a722b9041d2",
            "timestamp_created": "2021-06-20T09:34:17.227718",
            "to": "13b90445c95940309b6615d56d6c5a61"
        },
        "28afc7c1142240268e448fc89b114348": {
            "from": "ee8e6fa26d14437490223461461e9fb4",
            "timestamp_created": "2021-06-19T07:27:53.286316",
            "to": "2e71ca7444654d178322a9f276f4f2f5"
        },
        "30444fa8571f42efb42e059376a2eed5": {
            "from": "2e71ca7444654d178322a9f276f4f2f5",
            "timestamp_created": "2021-06-19T07:27:53.324515",
            "to": "c180b5ec4c2447009a4ac1a87d7dad40"
        },
        "3290ca7b546447399e144ada52155631": {
            "from": "19c4146f24a34fd692f02a722b9041d2",
            "timestamp_created": "2021-06-21T05:42:54.884163",
            "to": "51ee3d6700744fbab1b1371fdc800190"
        },
        "333f82ad4137405daf3b46ef330cc922": {
            "from": "378ad330e3104287820d0abc9669577b",
            "timestamp_created": "2021-06-19T07:27:53.190773",
            "to": "fd5643308b3b4e00b07082d1aa948ed9"
        },
        "3361deed919849a88c931fe1f6bf0c70": {
            "from": "663b1555bdd643f6a873ee3d75c0fa1f",
            "timestamp_created": "2021-06-19T07:27:54.280031",
            "to": "c82b22fc526b4d92a1600c8a28c0a290"
        },
        "3412b7d5e4764d4f9560c23b45ee4ea7": {
            "from": "0c17b970bc484a6eaca80302bf3dfd66",
            "timestamp_created": "2021-04-25T05:39:37.941404",
            "to": "a3253be03d374e609bb39fdc3d614e8c"
        },
        "3488961189124530881454ccb3ba2dea": {
            "from": "f93fa1b9bae3438d937c03f4b2c98346",
            "timestamp_created": "2021-05-22T09:42:59.960217",
            "to": "96c4c873d47f4aa1ac0f878dc98ed879"
        },
        "360580a8886a4abc8a430c2a923a9c89": {
            "from": "0c17b970bc484a6eaca80302bf3dfd66",
            "timestamp_created": "2021-04-25T05:31:37.659014",
            "to": "f4c44595fce34de389e14cdd4a1c91ab"
        },
        "3668c66c094d48aeac5f4d695ec9e21f": {
            "from": "1ffd967bcd164d1da4966c8f8ca2dd8a",
            "timestamp_created": "2021-04-25T04:49:00.173236",
            "to": "dbae893ae6f04417a7306767f8d722ce"
        },
        "36d118c9181f443db345ffe923691421": {
            "from": "12310f4824d94c3189ab50c782e3d9c3",
            "timestamp_created": "2021-04-25T05:30:25.221491",
            "to": "c55248cf1ef74c2a9df030ffab9ccf90"
        },
        "3a1839a44a7c45cd886e363a6a44b223": {
            "from": "9dea2f6390954d3fa2de99e0eb6457ca",
            "timestamp_created": "2021-06-19T07:27:52.819348",
            "to": "5115170d4f7747c2a4fb0a20eab851aa"
        },
        "3bb706ef735e45099f08dc96cfe3abdf": {
            "from": "c55248cf1ef74c2a9df030ffab9ccf90",
            "timestamp_created": "2021-04-25T05:30:36.073936",
            "to": "358a64bf3d1f4183b723bef10b10a412"
        },
        "3c8a8c47c7494efe8c8a690cddd487ea": {
            "from": "1ffd967bcd164d1da4966c8f8ca2dd8a",
            "timestamp_created": "2021-04-25T04:48:34.933079",
            "to": "8cbf970b04ee428793dc985b0fbf2f01"
        },
        "3d90193820cd4f85828484b9b20a70ce": {
            "from": "0307b3ea3c4a4d3b9216ab7b9e2e0bbd",
            "timestamp_created": "2021-06-19T07:27:52.990716",
            "to": "e9202b7c4ada48afb2cc0ae453165209"
        },
        "3e7b0ae095804f84bb75a3dc1f9ff204": {
            "from": "0307b3ea3c4a4d3b9216ab7b9e2e0bbd",
            "timestamp_created": "2021-06-19T07:27:52.915526",
            "to": "a555b9e3b8a84bdbb662786cf96773ac"
        },
        "3eb4f71ccb0d4452ae564d9984d64a5d": {
            "from": "f67f7af3474d431f9994be06dbb1bd61",
            "timestamp_created": "2021-06-19T07:27:52.623074",
            "to": "bf2aabce618349f69ec6b3c43ce03382"
        },
        "40a1929ce1e0453ca3434fcb816e1cb7": {
            "from": "0307b3ea3c4a4d3b9216ab7b9e2e0bbd",
            "timestamp_created": "2021-06-19T07:27:52.831917",
            "to": "51b4a680f3b741b7ae3d407bcbfaa6a4"
        },
        "41f7a27bc3184daa8411a1514b5c0ae4": {
            "from": "12310f4824d94c3189ab50c782e3d9c3",
            "timestamp_created": "2021-04-25T04:59:16.230312",
            "to": "1751b524ae56481b86401036833171e9"
        },
        "4215f18e09bf423e9f82a6178a214ca2": {
            "from": "a555b9e3b8a84bdbb662786cf96773ac",
            "timestamp_created": "2021-06-19T07:27:52.945137",
            "to": "5dd5dd9cd98245af954272bc602f395f"
        },
        "43894081ac0e4895bad9caace370362a": {
            "from": "11b1c0c63fb446ddb348d60f48f8c943",
            "timestamp_created": "2021-06-19T07:27:54.067670",
            "to": "9373b6fe256a4eee9478e30d701ddc90"
        },
        "46a35000e3d14c85b066b10c7f853804": {
            "from": "51b4a680f3b741b7ae3d407bcbfaa6a4",
            "timestamp_created": "2021-06-19T07:27:52.858993",
            "to": "5055f50fea9241ffaf34adf03f78ae34"
        },
        "4737968738a340ae82691ac1731552d7": {
            "from": "726500679d284eb494c0900f5c305cda",
            "timestamp_created": "2021-04-25T05:51:03.299328",
            "to": "527270aa4bd14cf1b5388d0d63ad53bd"
        },
        "475303c0430e4f09a0f9abc0f5fdf47a": {
            "from": "2a3c18b5f0914536be66afe1ea8aee44",
            "timestamp_created": "2021-04-25T05:38:07.477796",
            "to": "dd14b09c919e48f2b13caed0256c7c18"
        },
        "4bfaaa7eaa5544549e55b31bc0dfe088": {
            "from": "51b4a680f3b741b7ae3d407bcbfaa6a4",
            "timestamp_created": "2021-06-19T07:27:52.887406",
            "to": "ef7d45347aca40338d1449c81de2b2c1"
        },
        "4d6f8ddaf3f7470c98384b1bb7d73fff": {
            "from": "5113375cfc3f4d62ae828a31baf28344",
            "timestamp_created": "2021-06-20T10:32:55.183530",
            "to": "0137eb98a2b946d885411da919412185"
        },
        "4dc665613f59478090b939d7fb2d391d": {
            "from": "649a10bfa42a46a8b72a14a20dbf700d",
            "timestamp_created": "2021-06-20T10:22:25.380447",
            "to": "b9ead1e5dbad4a97abb50aad507341ca"
        },
        "50a0e79a4bc2420d8f9ecd58654e2608": {
            "from": "e9202b7c4ada48afb2cc0ae453165209",
            "timestamp_created": "2021-06-19T07:27:53.101586",
            "to": "bdda899e7d3d4501a5a3bf817aea2cbe"
        },
        "50aa80ab314147da82d6fa5db001b985": {
            "from": "5aa33f5f89b343b690209ac5ae1aaa79",
            "timestamp_created": "2021-04-25T05:36:57.056191",
            "to": "77d4ac1d46e547a8b8b997ebc4296f71"
        },
        "51b2af8f63e242b38e5f2b52e2d6e3dd": {
            "from": "2a3c18b5f0914536be66afe1ea8aee44",
            "timestamp_created": "2021-04-25T05:43:17.100578",
            "to": "1a43d8044ac040139a660e961ae77d02"
        },
        "51ca0273f5074c8dbd76e9123626f9c7": {
            "from": "e86e435137dc469188e80c3579924929",
            "timestamp_created": "2021-04-25T04:55:36.179899",
            "to": "0303806f467a458d932d588b0a0cd86d"
        },
        "5406f0d62b0345898525446932dbabcc": {
            "from": "53a84227ad3d4098b46c22d634dc25de",
            "timestamp_created": "2021-04-25T04:49:41.634194",
            "to": "ab5a993917854632b93282a1eb43b38b"
        },
        "57de971bfbc54d078a36f1f390461bf0": {
            "from": "2a3c18b5f0914536be66afe1ea8aee44",
            "timestamp_created": "2021-06-20T10:30:07.430695",
            "to": "13b90445c95940309b6615d56d6c5a61"
        },
        "59d6f5fb00524245875434cabbf83420": {
            "from": "e9202b7c4ada48afb2cc0ae453165209",
            "timestamp_created": "2021-06-19T07:27:53.118631",
            "to": "e4178f58125741c88e14bc1f690f539e"
        },
        "5a363ad9af6f4bc3b8f9cce7f1def5e0": {
            "from": "79b1ae3dad3c44a285b57fb88b01e561",
            "timestamp_created": "2021-06-19T07:27:53.400802",
            "to": "06ac8f7d9aee44658310cfbd877dd8b9"
        },
        "5a3efcd8ef664d3382d3b017a27edd63": {
            "from": "030878e06ca3461fb0110428917bcfc2",
            "timestamp_created": "2021-06-19T07:27:53.773803",
            "to": "25ce5b2877d94c10b54dcad84500c9f9"
        },
        "5bcee5d7d1434165b756ea5829fc8359": {
            "from": "12310f4824d94c3189ab50c782e3d9c3",
            "timestamp_created": "2021-04-25T05:32:37.651751",
            "to": "ab07169ee24042a5ac67ed97b41db1fd"
        },
        "5c28fba5b2984ddcbe3239fd65bc68c2": {
            "from": "0c17b970bc484a6eaca80302bf3dfd66",
            "timestamp_created": "2021-04-25T05:43:37.910572",
            "to": "1a43d8044ac040139a660e961ae77d02"
        },
        "5d72f642173e462387f11920cfeb0192": {
            "from": "21228dea83a648c0a3c698b8f9e50b30",
            "timestamp_created": "2021-06-19T07:27:54.335273",
            "to": "cadbc90bb17945089ec28f4f4c1b18f3"
        },
        "5dc69214bae24890b647f0879ff4ddd7": {
            "from": "ee8e6fa26d14437490223461461e9fb4",
            "timestamp_created": "2021-06-19T07:27:53.499559",
            "to": "4c0302cbb5774082aa8f7929378dc999"
        },
        "5e264e322eff41df88ae58a327e4570b": {
            "from": "a555b9e3b8a84bdbb662786cf96773ac",
            "timestamp_created": "2021-06-19T07:27:52.930073",
            "to": "81f4feec6d454ca2a2a12ff427db17dc"
        },
        "5e442e5cddc949389f9472bd1ee1e49f": {
            "from": "915b1755daf440958f7806c9927ccb50",
            "timestamp_created": "2021-06-19T07:27:53.621646",
            "to": "8e84748c392b4e72adbe4aa48bd30888"
        },
        "5e5d837da4ad41ae875743c75e710353": {
            "from": "0c17b970bc484a6eaca80302bf3dfd66",
            "timestamp_created": "2021-04-25T05:44:10.263683",
            "to": "73bd50be44c24e0198e725a0ff9c56df"
        },
        "5e5fcf00d2b04a4e975e5ec198d3baf7": {
            "from": "0303806f467a458d932d588b0a0cd86d",
            "timestamp_created": "2021-04-25T04:54:35.660057",
            "to": "e7e53e916a904371a3cba0851ee65a2a"
        },
        "5e9018c6150e474bbb4e492f2d3fe9e0": {
            "from": "0307b3ea3c4a4d3b9216ab7b9e2e0bbd",
            "timestamp_created": "2021-06-19T07:27:52.612998",
            "to": "c5e2d7f312654d389e9e7042895f2192"
        },
        "5fbb0d47bed14198819c874eda72ca02": {
            "from": "1751b524ae56481b86401036833171e9",
            "timestamp_created": "2021-04-25T04:53:04.817493",
            "to": "8cb560a43a5e4fceb2a0e237778c6623"
        },
        "60129736acc449e3ab5f2cad1b76a8bc": {
            "from": "915b1755daf440958f7806c9927ccb50",
            "timestamp_created": "2021-06-19T07:27:53.600865",
            "to": "af2967da19aa441ca600cffe29aae955"
        },
        "604cf1fbca2e4e3caf91377b739243a2": {
            "from": "94df86b13b0a46039880954fcd6f2c43",
            "timestamp_created": "2021-06-19T07:27:52.638245",
            "to": "e12a127c468640ac8711bf9d401cfd80"
        },
        "612e1b9910db4cc6a5e69dfaceb0c22d": {
            "from": "2a3c18b5f0914536be66afe1ea8aee44",
            "timestamp_created": "2021-04-25T05:34:42.153475",
            "to": "5c0bc7f27f96430ca58c9ab51a77992a"
        },
        "626527bb560d4a30b7329f6c0df31e47": {
            "from": "ee8e6fa26d14437490223461461e9fb4",
            "timestamp_created": "2021-06-19T07:27:53.439572",
            "to": "3d9747ab26b64a78a40915de14abec3c"
        },
        "652ee23bd42e4618991745fc073b40cd": {
            "from": "01bd457b2d52424da9a9f2fd914133c3",
            "timestamp_created": "2021-06-19T07:27:53.685183",
            "to": "7d91624b3a4a4e77bd07f15eca46c8bf"
        },
        "6672f2bce49b4a778933137c6b83fb28": {
            "from": "378ad330e3104287820d0abc9669577b",
            "timestamp_created": "2021-06-19T07:27:53.228732",
            "to": "ee8e6fa26d14437490223461461e9fb4"
        },
        "674d318e6a8a48cbac4b2724615a55cd": {
            "from": "2a3c18b5f0914536be66afe1ea8aee44",
            "timestamp_created": "2021-06-20T10:26:39.090606",
            "to": "9d2cf543dd2b4a26b7ecafcaf5ddeeaa"
        },
        "67bb0edd586f4fb1b5044226752a3a7f": {
            "from": "2e71ca7444654d178322a9f276f4f2f5",
            "timestamp_created": "2021-06-19T07:27:53.343592",
            "to": "79b1ae3dad3c44a285b57fb88b01e561"
        },
        "68d3ca2e337c413eba3c6b2a681fd6dd": {
            "from": "9d2cf543dd2b4a26b7ecafcaf5ddeeaa",
            "timestamp_created": "2021-05-23T08:11:31.860329",
            "to": "19cd9c5f66224883b498baf2d20a1d92"
        },
        "68f9086b383e4a0eb65b53675a23de87": {
            "from": "0307b3ea3c4a4d3b9216ab7b9e2e0bbd",
            "timestamp_created": "2021-06-19T07:27:52.752072",
            "to": "5e9dea2ec8a14dea8d0c4cee558101bf"
        },
        "6932f6a86b0d4f59910bf8e8c4739f6a": {
            "from": "e86e435137dc469188e80c3579924929",
            "timestamp_created": "2021-04-25T04:45:20.235672",
            "to": "8756fd317b514afab3bbba8fb325a785"
        },
        "6bd67f490b42416da1926bb99c7e1961": {
            "from": "7d91624b3a4a4e77bd07f15eca46c8bf",
            "timestamp_created": "2021-06-19T07:27:53.706828",
            "to": "f36e601cd1e64e2cb6ae34ae24831c84"
        },
        "6da75677188c4582b9a9ce99edf9cc83": {
            "from": "ee8e6fa26d14437490223461461e9fb4",
            "timestamp_created": "2021-06-19T07:27:53.459337",
            "to": "da9762c4ecec40f39459a1cadb195672"
        },
        "6f50c00a35bd44b58f5253a905ae6e93": {
            "from": "527270aa4bd14cf1b5388d0d63ad53bd",
            "timestamp_created": "2021-04-25T05:51:19.736910",
            "to": "601cade7d7c8406f97745cfcf3811b50"
        },
        "6fa67340e3664073a7b44e55bef0033b": {
            "from": "5113375cfc3f4d62ae828a31baf28344",
            "timestamp_created": "2021-06-20T10:33:09.594890",
            "to": "0307b3ea3c4a4d3b9216ab7b9e2e0bbd"
        },
        "729128adf4504a2fb3f0ea450c44d82a": {
            "from": "bb1078db928c4a689b896659d62e5e4c",
            "timestamp_created": "2021-06-19T07:27:52.700614",
            "to": "3c0c8700f3df48f993020e420ec4b125"
        },
        "73818dc85acc480ebb6e58510d46d666": {
            "from": "94df86b13b0a46039880954fcd6f2c43",
            "timestamp_created": "2021-06-19T07:27:52.642353",
            "to": "0869381f43fa488b9b8aabb1f1777e19"
        },
        "7671dbf6aa6c4b76a84ad0e637ded8fa": {
            "from": "11b1c0c63fb446ddb348d60f48f8c943",
            "timestamp_created": "2021-06-19T07:27:54.147289",
            "to": "5d02a07589c84bb6a913b5d99708c603"
        },
        "77e541a5ec234d018518738f465ed06e": {
            "from": "5aa33f5f89b343b690209ac5ae1aaa79",
            "timestamp_created": "2021-04-25T05:36:33.514798",
            "to": "071f96d7e41a4535a1676e19eb4b1473"
        },
        "79ab0d6c93ec46358947bfcd59bc7eb7": {
            "from": "d520425e067a453ebd7d8c4e35a0d9ca",
            "timestamp_created": "2021-06-19T07:27:52.741880",
            "to": "ceeadc4c09f64510bc4a1b9c646698aa"
        },
        "79ee908ad5e1464294f4f4469e243886": {
            "from": "42fc6bb887984f2780bacd47e8fb3e08",
            "timestamp_created": "2021-06-19T07:27:52.618373",
            "to": "0ee427a47e9e4eeeb4fbbe487f1440c1"
        },
        "7f3f88123bb042e591bf6e0739bd47e8": {
            "from": "0307b3ea3c4a4d3b9216ab7b9e2e0bbd",
            "timestamp_created": "2021-06-19T07:27:52.614231",
            "to": "f079bc508f69432a815b8cea0fb52319"
        },
        "7f82d326e9fc4b50938ad4dba162fb47": {
            "from": "0303806f467a458d932d588b0a0cd86d",
            "timestamp_created": "2021-04-25T06:22:25.500712",
            "to": "8fa7f664ecdf47119a1b319bcfe3e293"
        },
        "7f8b29133b264d4b805aeb3a85ae33b3": {
            "from": "2ee004f1e26a4e6bafcf5e9fd1e4e874",
            "timestamp_created": "2021-06-19T07:27:53.938867",
            "to": "c69d9bc1cb314c60a88e1051aa3bd326"
        },
        "8030c52c9ab14c5eaad67de9f13fa8b2": {
            "from": "527270aa4bd14cf1b5388d0d63ad53bd",
            "timestamp_created": "2021-04-25T05:51:15.999145",
            "to": "6c2567819e8447e28ce339e4cda01a94"
        },
        "80f9c9c1f8d64114a24f3f1e79a08db9": {
            "from": "28bb50737b9843fea003e2659b62a1cb",
            "timestamp_created": "2021-06-19T07:27:52.629169",
            "to": "11126df08c334d5592ccc9d288e1be87"
        },
        "848c44b820574216a03a2306779dafea": {
            "from": "de4893d9140f4fc0b623a31c81af267c",
            "timestamp_created": "2021-06-20T12:27:23.840297",
            "to": "b6d3c5edf7454e8ab469258bdb5dc0c1"
        },
        "85f890d8ce3942309bfb2f55b11f6943": {
            "from": "3c0c8700f3df48f993020e420ec4b125",
            "timestamp_created": "2021-06-19T07:27:52.720293",
            "to": "db953d9fabca4399beab08ef48ae1b3f"
        },
        "87f325eba68348c9986c450f4b91fe55": {
            "from": "5aa33f5f89b343b690209ac5ae1aaa79",
            "timestamp_created": "2021-04-25T05:41:28.765803",
            "to": "5f9f0bdfc3994d45ba06f46242f42dd4"
        },
        "8b4384d5f6e8456fb09f3d5a2341581c": {
            "from": "2e71ca7444654d178322a9f276f4f2f5",
            "timestamp_created": "2021-06-19T07:27:53.305242",
            "to": "05a20094744b470f987e5c67947f8c30"
        },
        "8bc98004f957411c9fb86bf5f4903b3f": {
            "from": "2a3c18b5f0914536be66afe1ea8aee44",
            "timestamp_created": "2021-06-20T10:29:55.742674",
            "to": "a10da329043c4b1ba09358078b3ec849"
        },
        "8c0da397f11045bfa262cac782287450": {
            "from": "11b1c0c63fb446ddb348d60f48f8c943",
            "timestamp_created": "2021-06-19T07:27:53.989810",
            "to": "13d328224b304432a206a3a27a27a443"
        },
        "8c917ade16394876bf72dcde460e4572": {
            "from": "af88ba59057c45338350bc42a0001adb",
            "timestamp_created": "2021-06-20T10:33:32.400862",
            "to": "12310f4824d94c3189ab50c782e3d9c3"
        },
        "8d955e592e144a419d455f09530783c4": {
            "from": "12310f4824d94c3189ab50c782e3d9c3",
            "timestamp_created": "2021-04-25T05:49:45.269196",
            "to": "7750cba42afa49e2bc1ff1765d005014"
        },
        "8dd6629b58d341c6a228afc778717a55": {
            "from": "ecb1efa5b4a44970928ac9a69160769f",
            "timestamp_created": "2021-04-25T05:29:12.407456",
            "to": "26f8d74f50074d56813e1466850c2ffc"
        },
        "92c72f6146c24f2c9faf11bc91aff269": {
            "from": "12310f4824d94c3189ab50c782e3d9c3",
            "timestamp_created": "2021-06-20T10:30:13.752142",
            "to": "19c4146f24a34fd692f02a722b9041d2"
        },
        "95a2ebcd723d413092c53a1c38c1c082": {
            "from": "25ce5b2877d94c10b54dcad84500c9f9",
            "timestamp_created": "2021-06-19T07:27:53.840700",
            "to": "08933303ef594af0a3858672b67f2df9"
        },
        "961f34bb673440cbaa167f5990a72413": {
            "from": "2a3c18b5f0914536be66afe1ea8aee44",
            "timestamp_created": "2021-04-25T05:48:41.263360",
            "to": "30096585cb4e4f0290bce0505032e629"
        },
        "97b9c6db9cf246bba593a8ec861abc1a": {
            "from": "42fc6bb887984f2780bacd47e8fb3e08",
            "timestamp_created": "2021-06-19T07:27:52.731654",
            "to": "d520425e067a453ebd7d8c4e35a0d9ca"
        },
        "97e5173018f14be1ab735eaf0974937d": {
            "from": "51b4a680f3b741b7ae3d407bcbfaa6a4",
            "timestamp_created": "2021-06-19T07:27:52.873033",
            "to": "398ad55085fc451383e54a64291de937"
        },
        "9c0ea64633894b62845b84badd00010d": {
            "from": "e9202b7c4ada48afb2cc0ae453165209",
            "timestamp_created": "2021-06-19T07:27:53.037800",
            "to": "382b92a71e654628ad4c1b51bc4fe471"
        },
        "a02b5496c40045d6b951961cbed0f0b4": {
            "from": "51b4a680f3b741b7ae3d407bcbfaa6a4",
            "timestamp_created": "2021-06-19T07:27:52.845163",
            "to": "a5661264b360480a954ca02a4998c3c3"
        },
        "a1d450a4285b4e1da9283b4c1d3633ba": {
            "from": "0307b3ea3c4a4d3b9216ab7b9e2e0bbd",
            "timestamp_created": "2021-06-19T07:27:52.960123",
            "to": "98765de5e17b468ebd5d7bb7b229cc0c"
        },
        "a226c8129a5d4ded800adf9cb8088378": {
            "from": "9373b6fe256a4eee9478e30d701ddc90",
            "timestamp_created": "2021-06-19T07:27:54.094195",
            "to": "d25059d661ca4f9fa6fc94c24c7969f3"
        },
        "a2f57b8b387c40b6b946826014e52821": {
            "from": "5f9f0bdfc3994d45ba06f46242f42dd4",
            "timestamp_created": "2021-04-25T05:41:47.326081",
            "to": "ed2e79daa3aa48d6ada3fc176dddce56"
        },
        "a38db49c97aa400fb560b4a29e5bce6e": {
            "from": "42fc6bb887984f2780bacd47e8fb3e08",
            "timestamp_created": "2021-06-19T07:27:52.646587",
            "to": "bb1078db928c4a689b896659d62e5e4c"
        },
        "a424153b7f5a4068ab360243d6024403": {
            "from": "19c4146f24a34fd692f02a722b9041d2",
            "timestamp_created": "2021-06-21T05:45:41.349586",
            "to": "e93c1a192b0349c69178e5163045e8a8"
        },
        "a577a174271545e3b8cc33e2a795827f": {
            "from": "ba04a2b92b7f49a99a25a0af26d3b3aa",
            "timestamp_created": "2021-06-20T10:03:03.720592",
            "to": "f93fa1b9bae3438d937c03f4b2c98346"
        },
        "a5ac1191cdf14c3da390628a728080c7": {
            "from": "0307b3ea3c4a4d3b9216ab7b9e2e0bbd",
            "timestamp_created": "2021-06-19T07:27:52.615573",
            "to": "43249a90aee8449d8161c78c17088563"
        },
        "a5af8bad9abc42e9845e334e39d60d24": {
            "from": "030878e06ca3461fb0110428917bcfc2",
            "timestamp_created": "2021-06-19T07:27:53.751769",
            "to": "b571359f968a4e2b8b2cb97f1d35c5f1"
        },
        "a5dc215dddb84e64bb4b02718b047dff": {
            "from": "0303806f467a458d932d588b0a0cd86d",
            "timestamp_created": "2021-04-25T04:54:43.530265",
            "to": "1a499036e07b42f794d14348c634f69d"
        },
        "a6b5cb57496f42669a74ec1e50deddb6": {
            "from": "726500679d284eb494c0900f5c305cda",
            "timestamp_created": "2021-04-25T04:57:57.842626",
            "to": "f72d5c244592499caeb7d9671f33b554"
        },
        "a74235c68c9b47ae8f53ba173f1e3e32": {
            "from": "bff6c2de92c6405cb51883b79c03ba4b",
            "timestamp_created": "2021-04-25T05:47:51.914424",
            "to": "4bcbb415da1849dca277963f4d3354bc"
        },
        "a75a93c71eff47b9be091f39eacbc370": {
            "from": "af88ba59057c45338350bc42a0001adb",
            "timestamp_created": "2021-06-20T10:33:34.732154",
            "to": "2a3c18b5f0914536be66afe1ea8aee44"
        },
        "aae3fa76729c4a4a88f6e8e4dcc09cc3": {
            "from": "19c4146f24a34fd692f02a722b9041d2",
            "timestamp_created": "2021-06-21T19:19:07.658741",
            "to": "42a4037091bf4702988cebcc3b5c624d"
        },
        "ab13986f5dd84b75a47f34dbd7fc5524": {
            "from": "e9202b7c4ada48afb2cc0ae453165209",
            "timestamp_created": "2021-06-19T07:27:53.085360",
            "to": "dd45e68bd5c24d6f93e1c0d6e2f93cd6"
        },
        "abceb8263eba4175949a49520e76652b": {
            "from": "5e9dea2ec8a14dea8d0c4cee558101bf",
            "timestamp_created": "2021-06-19T07:27:52.773621",
            "to": "f67879ddcfe746b1b3f4fd9b4d460dbc"
        },
        "acb9df3b48c1440bbfe46352d7052073": {
            "from": "0c17b970bc484a6eaca80302bf3dfd66",
            "timestamp_created": "2021-04-25T05:30:59.664682",
            "to": "564ab377fbcc454ba8aff7bedde91fe8"
        },
        "ad8f41fbe0dc4a1f89c896fbf3ae7799": {
            "from": "2a3c18b5f0914536be66afe1ea8aee44",
            "timestamp_created": "2021-06-20T10:28:50.307755",
            "to": "c29afb92aa7c4dd3849738e3158ec2b4"
        },
        "af5b7cd7b1cb4784a4241eae9435e45a": {
            "from": "31d3da1a8f834f5ab620aacf73de0940",
            "timestamp_created": "2021-04-25T05:50:30.928030",
            "to": "889c916805794455ad9dcd84db142557"
        },
        "b025dd0715c14e399706acfebc59c659": {
            "from": "2a3c18b5f0914536be66afe1ea8aee44",
            "timestamp_created": "2021-04-25T05:34:39.823314",
            "to": "496c510e4c784026a572152da104e3b2"
        },
        "b35c13f58b954a3bae69ad2f0dccc433": {
            "from": "1ffd967bcd164d1da4966c8f8ca2dd8a",
            "timestamp_created": "2021-04-25T04:49:26.906523",
            "to": "53a84227ad3d4098b46c22d634dc25de"
        },
        "b384417150ec4716b123bb6bd023d7a8": {
            "from": "5113375cfc3f4d62ae828a31baf28344",
            "timestamp_created": "2021-06-20T10:33:11.818935",
            "to": "01bd457b2d52424da9a9f2fd914133c3"
        },
        "b4948b9b88e84d42931f5609ef23fad4": {
            "from": "2a3c18b5f0914536be66afe1ea8aee44",
            "timestamp_created": "2021-04-25T05:42:34.665617",
            "to": "f8c7cfbfa46b4e88b4a046bd51f2e3af"
        },
        "b91e2f9816ad4d3680eaf7bb8614be4e": {
            "from": "2a3c18b5f0914536be66afe1ea8aee44",
            "timestamp_created": "2021-04-25T05:34:34.479057",
            "to": "564ab377fbcc454ba8aff7bedde91fe8"
        },
        "b9973ef3e17e45449e116d2b3da3935c": {
            "from": "0307b3ea3c4a4d3b9216ab7b9e2e0bbd",
            "timestamp_created": "2021-06-19T07:27:52.784228",
            "to": "05a9b0cd9f80404793e93b7906713700"
        },
        "ba1ad2af58684ee7b6d6e21d5984348b": {
            "from": "601cade7d7c8406f97745cfcf3811b50",
            "timestamp_created": "2021-04-25T05:51:38.991546",
            "to": "8964e13284534183b2e84fc24c9c0426"
        },
        "bc1db8b77b154f2baa4c92e4f4ec62ed": {
            "from": "5113375cfc3f4d62ae828a31baf28344",
            "timestamp_created": "2021-06-20T10:32:58.022832",
            "to": "cd1a983e9fc54e32b67bddd67b11d5a5"
        },
        "bcb9efc2898446c3851539394b024d36": {
            "from": "0c17b970bc484a6eaca80302bf3dfd66",
            "timestamp_created": "2021-04-25T05:30:08.402763",
            "to": "ecb1efa5b4a44970928ac9a69160769f"
        },
        "bcbafb4c244c431e95d89d96c29d119e": {
            "from": "ab07169ee24042a5ac67ed97b41db1fd",
            "timestamp_created": "2021-04-25T05:47:31.899880",
            "to": "bff6c2de92c6405cb51883b79c03ba4b"
        },
        "bd46cdde4c4f441d854eec1d3b8e2539": {
            "from": "ba108f5d9a264dad8d85d6fc7f2d8080",
            "timestamp_created": "2021-06-20T12:15:32.471441",
            "to": "b9ead1e5dbad4a97abb50aad507341ca"
        },
        "be1684cd130340ceafb747e6df974735": {
            "from": "8e8d2b99b72c4be9a46637d9688c1cf1",
            "timestamp_created": "2021-06-19T07:27:54.041427",
            "to": "bef0e90db2fd4445973a9afd8b0cf636"
        },
        "c14a12e4da324845ba8439b8673d9151": {
            "from": "25ce5b2877d94c10b54dcad84500c9f9",
            "timestamp_created": "2021-06-19T07:27:53.795779",
            "to": "c79b278199e343e69d2dede9e8339a33"
        },
        "c15e8001283844d18622d1001f9b4b3c": {
            "from": "5d02a07589c84bb6a913b5d99708c603",
            "timestamp_created": "2021-06-19T07:27:54.226867",
            "to": "6d564d8cb2fa425381dfc90108774372"
        },
        "c161ac73fe3c488c8ead3bd422b023e2": {
            "from": "03b9695f2aeb409ca19e899c73715bcb",
            "timestamp_created": "2021-06-19T07:27:52.691831",
            "to": "8a68350969694fc3b66f97d0a704da94"
        },
        "c56a91cccb1a4addbfb7b3a0096fbd45": {
            "from": "2a3c18b5f0914536be66afe1ea8aee44",
            "timestamp_created": "2021-04-25T05:43:48.840138",
            "to": "73bd50be44c24e0198e725a0ff9c56df"
        },
        "c6961fa530294ba3b0624a3628e30178": {
            "from": "9b67b722e8aa4a2a913fe18905e369af",
            "timestamp_created": "2021-06-19T07:27:52.675710",
            "to": "21f583aa5a32443fbad72db20a181f03"
        },
        "c6a7c68fcbbd4363966f8c0601748397": {
            "from": "29bce2bdc6844ce1bd962cd144359aaa",
            "timestamp_created": "2021-06-19T07:27:53.539709",
            "to": "05bb59abb936423489c2a74b974cd769"
        },
        "c724a19b7084437687e8f93518b4430c": {
            "from": "2a3c18b5f0914536be66afe1ea8aee44",
            "timestamp_created": "2021-04-25T05:40:30.444120",
            "to": "aa57cd41ac6a4c0082803451c048e7f2"
        },
        "c7f2900837f94fc5858d147f8d92424f": {
            "from": "2a3c18b5f0914536be66afe1ea8aee44",
            "timestamp_created": "2021-04-25T05:34:30.152877",
            "to": "5aa33f5f89b343b690209ac5ae1aaa79"
        },
        "c8b294569db14d419ca1298ae55a2a46": {
            "from": "2a3c18b5f0914536be66afe1ea8aee44",
            "timestamp_created": "2021-04-25T05:40:02.610782",
            "to": "a3253be03d374e609bb39fdc3d614e8c"
        },
        "c99dd3283d4247caa84bf53c2ee81940": {
            "from": "bb1078db928c4a689b896659d62e5e4c",
            "timestamp_created": "2021-06-19T07:27:52.655916",
            "to": "5d81e13c3cb9476da21aac3f66c239f7"
        },
        "caef4d82f13d468286051a3d96b7dc6c": {
            "from": "e9202b7c4ada48afb2cc0ae453165209",
            "timestamp_created": "2021-06-19T07:27:53.006462",
            "to": "d8feaf1314404d3d8c3482aeb67b7625"
        },
        "cb208fdfaf86473987771274a02ec7dc": {
            "from": "5113375cfc3f4d62ae828a31baf28344",
            "timestamp_created": "2021-06-20T10:33:02.601684",
            "to": "db2737780b294f7b91ed1083778d234b"
        },
        "cb89280a4bee43d581e3e932aac4eab6": {
            "from": "01bd457b2d52424da9a9f2fd914133c3",
            "timestamp_created": "2021-06-19T07:27:53.172332",
            "to": "378ad330e3104287820d0abc9669577b"
        },
        "cc2e547d519f4da99c6a5184048eebe9": {
            "from": "2ee004f1e26a4e6bafcf5e9fd1e4e874",
            "timestamp_created": "2021-06-19T07:27:53.888144",
            "to": "291e4cbb8ca049998afaa567b1749d9b"
        },
        "ce01545ed996400b92155992555b6dab": {
            "from": "2d9ff066dc6d428593815e2735918279",
            "timestamp_created": "2021-06-19T07:27:54.348963",
            "to": "25ce5b2877d94c10b54dcad84500c9f9"
        },
        "cef4000a233d406281dd0bd1f1e9c3cd": {
            "from": "e4178f58125741c88e14bc1f690f539e",
            "timestamp_created": "2021-06-19T07:27:53.136177",
            "to": "a0fe67b02bfd42c9adca92215cbf88b1"
        },
        "d3b96fda58ad4b3b9f2e019e9456b365": {
            "from": "5aa33f5f89b343b690209ac5ae1aaa79",
            "timestamp_created": "2021-06-20T10:19:53.826440",
            "to": "f93fa1b9bae3438d937c03f4b2c98346"
        },
        "d3f4949a1f284808ae6d8929535e9ed6": {
            "from": "9373b6fe256a4eee9478e30d701ddc90",
            "timestamp_created": "2021-06-19T07:27:54.120474",
            "to": "e2921f12daf8427196865d7c7f11b732"
        },
        "d6c9f14f54774ff299da74cafd12c8ed": {
            "from": "5d81e13c3cb9476da21aac3f66c239f7",
            "timestamp_created": "2021-06-19T07:27:52.668556",
            "to": "9b67b722e8aa4a2a913fe18905e369af"
        },
        "d747233fa08549098e9faee4a3e2cba1": {
            "from": "e93c1a192b0349c69178e5163045e8a8",
            "timestamp_created": "2021-06-21T05:46:26.130516",
            "to": "1a0560811c6e487a864e5bcf2b576ebc"
        },
        "daa5062fa11a49d0ad02b600c02bc0f8": {
            "from": "01bd457b2d52424da9a9f2fd914133c3",
            "timestamp_created": "2021-06-19T07:27:53.519552",
            "to": "29bce2bdc6844ce1bd962cd144359aaa"
        },
        "dc839e68e2464d90a83594dcefb4d531": {
            "from": "3c0c8700f3df48f993020e420ec4b125",
            "timestamp_created": "2021-06-19T07:27:52.709889",
            "to": "649a10bfa42a46a8b72a14a20dbf700d"
        },
        "de985eb9bf1749ddba64279ff184d25c": {
            "from": "2a3c18b5f0914536be66afe1ea8aee44",
            "timestamp_created": "2021-06-20T10:28:54.087010",
            "to": "098bed8bd0424d1d8572cfe86c97eda2"
        },
        "deb98b337ac94038ac7e60a897227479": {
            "from": "12310f4824d94c3189ab50c782e3d9c3",
            "timestamp_created": "2021-04-25T04:59:06.562155",
            "to": "726500679d284eb494c0900f5c305cda"
        },
        "e0af55781df94d3482b7ccfddf18ba54": {
            "from": "f67f7af3474d431f9994be06dbb1bd61",
            "timestamp_created": "2021-06-19T07:27:52.626162",
            "to": "28bb50737b9843fea003e2659b62a1cb"
        },
        "e0c307b0806a49079a1481fdd1d59068": {
            "from": "19c4146f24a34fd692f02a722b9041d2",
            "timestamp_created": "2021-06-21T05:43:34.752472",
            "to": "a343b9c995084d61a41a57413018dbe3"
        },
        "e24a475910db43de859d2ab0696c7828": {
            "from": "2a3c18b5f0914536be66afe1ea8aee44",
            "timestamp_created": "2021-04-25T06:20:25.904723",
            "to": "4bc36929a07a46bc9fd7c691f4e93be4"
        },
        "e34440c285394c47a0ed06ebcf431d46": {
            "from": "11b1c0c63fb446ddb348d60f48f8c943",
            "timestamp_created": "2021-06-19T07:27:54.015544",
            "to": "8e8d2b99b72c4be9a46637d9688c1cf1"
        },
        "e4216cc5c9264c6c9d74be0335ac9427": {
            "from": "5d02a07589c84bb6a913b5d99708c603",
            "timestamp_created": "2021-06-19T07:27:54.173804",
            "to": "b4922ecf5d984d408bcdaab9fdeeb064"
        },
        "e495a069947445e89fb1dc8e31698173": {
            "from": "ee8e6fa26d14437490223461461e9fb4",
            "timestamp_created": "2021-06-19T07:27:53.247811",
            "to": "2d9ff066dc6d428593815e2735918279"
        },
        "e6413c3233654c4bb102da8d195eb386": {
            "from": "2a3c18b5f0914536be66afe1ea8aee44",
            "timestamp_created": "2021-06-20T10:28:45.787841",
            "to": "569e73cef808401fb3282b7f47b9a41d"
        },
        "e721c2abea6c4da0a0d9dc8f63d06e5b": {
            "from": "0c17b970bc484a6eaca80302bf3dfd66",
            "timestamp_created": "2021-04-25T05:40:18.021781",
            "to": "aa57cd41ac6a4c0082803451c048e7f2"
        },
        "e93c5c3d396d47f1a247d3a3479a96ff": {
            "from": "fa07efa79a8e4b58b8a826bfbc628a5c",
            "timestamp_created": "2021-06-19T07:27:53.663594",
            "to": "7d7f4a4f4b894086ace8287b083ab4f1"
        },
        "e9460d922ef74a6dad20955edc19c32c": {
            "from": "e9202b7c4ada48afb2cc0ae453165209",
            "timestamp_created": "2021-06-19T07:27:53.069396",
            "to": "7304d987b32245018eb1ad58d0685c89"
        },
        "e957486fe361413bb430600aa70f80cf": {
            "from": "98765de5e17b468ebd5d7bb7b229cc0c",
            "timestamp_created": "2021-06-19T07:27:52.975231",
            "to": "dee94b78ca4f4adaa5ad786c7d1b671c"
        },
        "ea6a0838be874755b38114ff8c18ac12": {
            "from": "bb1078db928c4a689b896659d62e5e4c",
            "timestamp_created": "2021-06-19T07:27:52.651076",
            "to": "ba04a2b92b7f49a99a25a0af26d3b3aa"
        },
        "eab333e6fa97471cb8932dc8db863970": {
            "from": "f67f7af3474d431f9994be06dbb1bd61",
            "timestamp_created": "2021-06-19T07:27:52.634309",
            "to": "94df86b13b0a46039880954fcd6f2c43"
        },
        "eae399e53bb8440c8fa882263a638f58": {
            "from": "726500679d284eb494c0900f5c305cda",
            "timestamp_created": "2021-04-25T04:58:08.635963",
            "to": "6d32f7de8be84e77b04741a09671721b"
        },
        "eb36c2e2b8d14e019f597f348384e730": {
            "from": "e9202b7c4ada48afb2cc0ae453165209",
            "timestamp_created": "2021-06-19T07:27:53.022332",
            "to": "2161885ac39948218c2dbe0f23e91c5e"
        },
        "ebb82489730b4bea9f2a763eec18bccf": {
            "from": "79b1ae3dad3c44a285b57fb88b01e561",
            "timestamp_created": "2021-06-19T07:27:53.362644",
            "to": "dfc61c882af9400c9501db2e1a5ee306"
        },
        "ed9bbc7060e94290b123c86d9d1e17d4": {
            "from": "51b4a680f3b741b7ae3d407bcbfaa6a4",
            "timestamp_created": "2021-06-19T07:27:52.901448",
            "to": "7d0dd1cbe8174b6a9be503e9206c25bb"
        },
        "ee5b0402f7864264beb849d6f86c6347": {
            "from": "726500679d284eb494c0900f5c305cda",
            "timestamp_created": "2021-04-25T05:50:15.764621",
            "to": "31d3da1a8f834f5ab620aacf73de0940"
        },
        "eeaf5ae37b854cee8375de749dc72c81": {
            "from": "2a3c18b5f0914536be66afe1ea8aee44",
            "timestamp_created": "2021-06-20T10:29:49.594810",
            "to": "d89ad9a23c64463b80cc41d4701d3dfb"
        },
        "ef33c5e02f5849e9921bdb19d72300ad": {
            "from": "291e4cbb8ca049998afaa567b1749d9b",
            "timestamp_created": "2021-06-20T10:01:23.119553",
            "to": "ab07169ee24042a5ac67ed97b41db1fd"
        },
        "effd93b1b8ce402e8166c742c492abb9": {
            "from": "0c17b970bc484a6eaca80302bf3dfd66",
            "timestamp_created": "2021-04-25T05:43:42.258847",
            "to": "81c03dd935934f6988dbe6800d2a0013"
        },
        "f0fa25750dea41d596795dd404a7eb32": {
            "from": "0c17b970bc484a6eaca80302bf3dfd66",
            "timestamp_created": "2021-04-25T05:33:10.313858",
            "to": "5c0bc7f27f96430ca58c9ab51a77992a"
        },
        "f17d5c033f37451cbf8c98f6779da46e": {
            "from": "ee8e6fa26d14437490223461461e9fb4",
            "timestamp_created": "2021-06-19T07:27:53.267180",
            "to": "f2b1415b9cbb451a877ce3cb5785d01d"
        },
        "f2354d1c543c4fffa4db838746a29b40": {
            "from": "af88ba59057c45338350bc42a0001adb",
            "timestamp_created": "2021-06-20T10:33:27.206967",
            "to": "1ffd967bcd164d1da4966c8f8ca2dd8a"
        },
        "f3b69a026a6446979995025cc2e89727": {
            "from": "2ee004f1e26a4e6bafcf5e9fd1e4e874",
            "timestamp_created": "2021-06-19T07:27:53.913321",
            "to": "5ad55d51dad84960bda16db55ffb5115"
        },
        "f41dd1b56c924282bf7a245caab70685": {
            "from": "2a3c18b5f0914536be66afe1ea8aee44",
            "timestamp_created": "2021-06-20T12:30:46.912286",
            "to": "6f2696b9761a45d48b44f77888167531"
        },
        "f4e749c3737a4fe8998d9a1d2c2420d1": {
            "from": "73bd50be44c24e0198e725a0ff9c56df",
            "timestamp_created": "2021-04-25T05:44:22.948786",
            "to": "c4cb89fe89d04a5f8fa001eba0d7770d"
        },
        "f840e9d8d0b74fada136af0bc3b85022": {
            "from": "2a3c18b5f0914536be66afe1ea8aee44",
            "timestamp_created": "2021-06-20T10:31:28.194512",
            "to": "e86e435137dc469188e80c3579924929"
        },
        "fa899ad2e40e4fa1a2e607db9d1a4a29": {
            "from": "5e9dea2ec8a14dea8d0c4cee558101bf",
            "timestamp_created": "2021-06-19T07:27:52.762695",
            "to": "9914cb6c8dbf4a6b8859d68e94ce1bef"
        },
        "fc40046190f54304a322eb8ee4a2c23d": {
            "from": "c55248cf1ef74c2a9df030ffab9ccf90",
            "timestamp_created": "2021-04-25T05:37:32.884071",
            "to": "e7276002eaa14dca9e0fbac392e715b4"
        },
        "fc4f3ec2448c4ea2ae79530241b54bfd": {
            "from": "11b1c0c63fb446ddb348d60f48f8c943",
            "timestamp_created": "2021-06-19T07:27:54.307223",
            "to": "21228dea83a648c0a3c698b8f9e50b30"
        },
        "fee65ebafa3045458a93905e71cefe15": {
            "from": "42fc6bb887984f2780bacd47e8fb3e08",
            "timestamp_created": "2021-06-19T07:27:52.620607",
            "to": "f67f7af3474d431f9994be06dbb1bd61"
        },
        "feec594fb1d24857a9ec8a1c908f5ac0": {
            "from": "ab07169ee24042a5ac67ed97b41db1fd",
            "timestamp_created": "2021-04-25T05:32:55.454967",
            "to": "496c510e4c784026a572152da104e3b2"
        },
        "fef25f1d74a144b18ce211e94695e0fc": {
            "from": "01bd457b2d52424da9a9f2fd914133c3",
            "timestamp_created": "2021-06-19T07:27:53.642438",
            "to": "fa07efa79a8e4b58b8a826bfbc628a5c"
        },
        "ff749947592642129681e99f56bb9035": {
            "from": "ee8e6fa26d14437490223461461e9fb4",
            "timestamp_created": "2021-06-19T07:27:53.479284",
            "to": "ba947625790e456a8e4824e9fda0d8e9"
        },
        "ff9daf255ef54e688588be267a335d5d": {
            "from": "12310f4824d94c3189ab50c782e3d9c3",
            "timestamp_created": "2021-04-25T05:29:43.498144",
            "to": "0c17b970bc484a6eaca80302bf3dfd66"
        }
    },
    "notes": {
        "0137eb98a2b946d885411da919412185": {
            "text": "Smart Notes is implemented in layers. The application itself is written using a widget framework. The widget framework is designed to meet only the needs of the application, although it might be usable as a base for other projects as well. The widget framework is realized using pygame and Cairo. Neither the application nor the widget framework knows about pygame or Cairo. All layers might use utility functions. Utilities are considered fairly generic.",
            "timestamp_created": "2021-06-19T07:27:52.609286"
        },
        "01bd457b2d52424da9a9f2fd914133c3": {
            "tags": [
                "title"
            ],
            "text": "Widget Framework",
            "timestamp_created": "2021-06-19T07:27:53.145402"
        },
        "0303806f467a458d932d588b0a0cd86d": {
            "links": [],
            "tags": [],
            "text": "Issues related to rect/allotted_rect/get_used_rect()\n",
            "timestamp_created": "2021-04-25T04:54:21.752135"
        },
        "0307b3ea3c4a4d3b9216ab7b9e2e0bbd": {
            "tags": [
                "title"
            ],
            "text": "Application",
            "timestamp_created": "2021-06-19T07:27:52.611062"
        },
        "030878e06ca3461fb0110428917bcfc2": {
            "tags": [
                "title"
            ],
            "text": "Pygame/Cairo",
            "timestamp_created": "2021-06-19T07:27:53.718238"
        },
        "03b9695f2aeb409ca19e899c73715bcb": {
            "tags": [
                "title"
            ],
            "text": "Link",
            "timestamp_created": "2021-06-19T07:27:52.679680"
        },
        "03d0dac1ff7c4124b85b2ed8896e232a": {
            "chunkpath": [
                "classes",
                "NoteDb"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def collect(self, file, chunk, parts):",
                    "type": "line"
                },
                {
                    "text": "    lines = []",
                    "type": "line"
                },
                {
                    "text": "    self.collect_lines(lines, file, chunk, parts)",
                    "type": "line"
                },
                {
                    "text": "    return \"\\n\".join(line[1] for line in lines) + \"\\n\"",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-20T12:22:06.076740",
            "type": "code"
        },
        "04e38881c82644fe822dfd8a7d0c43ef": {
            "chunkpath": [
                "classes",
                "NoteDb"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def strip_prefix(self, prefix, line):",
                    "type": "line"
                },
                {
                    "text": "    if line.startswith(prefix):",
                    "type": "line"
                },
                {
                    "text": "        return line[len(prefix):]",
                    "type": "line"
                },
                {
                    "text": "    else:",
                    "type": "line"
                },
                {
                    "text": "        return line",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-20T12:22:06.076693",
            "type": "code"
        },
        "05a20094744b470f987e5c67947f8c30": {
            "text": "`process_event` should not call methods that change focus or any other attributes that affects `process_event` calls in other widgets. To solve a situation like this, you can set a flag in the `process_event` call and act on that flag in the `update` call.",
            "timestamp_created": "2021-06-19T07:27:53.295747"
        },
        "05a9b0cd9f80404793e93b7906713700": {
            "tags": [
                "title"
            ],
            "text": "Widgets",
            "timestamp_created": "2021-06-19T07:27:52.778805"
        },
        "05bb59abb936423489c2a74b974cd769": {
            "chunkpath": [
                "base base classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class Padding(Widget):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, window, parent, widget, hpadding=None, vpadding=None, **kwargs):",
                    "type": "line"
                },
                {
                    "text": "        Widget.__init__(self, window, parent, **kwargs)",
                    "type": "line"
                },
                {
                    "text": "        self.widget = widget",
                    "type": "line"
                },
                {
                    "text": "        self.hpadding = (lambda rect: 0) if hpadding is None else hpadding",
                    "type": "line"
                },
                {
                    "text": "        self.vpadding = (lambda rect: 0) if vpadding is None else vpadding",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def process_event(self, event):",
                    "type": "line"
                },
                {
                    "text": "        Widget.process_event(self, event)",
                    "type": "line"
                },
                {
                    "text": "        self.widget.process_event(event)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def update(self, rect, elapsed_ms):",
                    "type": "line"
                },
                {
                    "text": "        Widget.update(self, rect, elapsed_ms)",
                    "type": "line"
                },
                {
                    "text": "        self.widget.update(",
                    "type": "line"
                },
                {
                    "text": "            rect.inflate(-self.hpadding(rect)*2, -self.vpadding(rect)*2),",
                    "type": "line"
                },
                {
                    "text": "            elapsed_ms",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def draw(self, canvas):",
                    "type": "line"
                },
                {
                    "text": "        self.widget.draw(canvas)",
                    "type": "line"
                },
                {
                    "text": "        Widget.draw(self, canvas)",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.529461",
            "type": "code"
        },
        "06ac8f7d9aee44658310cfbd877dd8b9": {
            "text": "The child resizes itself causing it to possibly get a different rect in the next `update` call.",
            "timestamp_created": "2021-06-19T07:27:53.391355"
        },
        "071f96d7e41a4535a1676e19eb4b1473": {
            "links": [],
            "tags": [],
            "text": "Initiating search should work from table as well as network.\n",
            "timestamp_created": "2021-04-25T05:36:33.514745"
        },
        "0869381f43fa488b9b8aabb1f1777e19": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class SearchNote(NoteBaseWidget):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, window, parent, db, overlay, settings, note_id, open_callback):",
                    "type": "line"
                },
                {
                    "text": "        NoteBaseWidget.__init__(self, window, parent, db, overlay, note_id, settings)",
                    "type": "line"
                },
                {
                    "text": "        self.overlay = overlay",
                    "type": "line"
                },
                {
                    "text": "        self.open_callback = open_callback",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def open_me(self):",
                    "type": "line"
                },
                {
                    "text": "        self.open_callback(self.note_id)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def update(self, rect, elapsed_ms):",
                    "type": "line"
                },
                {
                    "text": "        NoteBaseWidget.update(self, rect, elapsed_ms)",
                    "type": "line"
                },
                {
                    "text": "        self.rect = self._get_target(rect, align=\"center\")",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.640157",
            "type": "code"
        },
        "08933303ef594af0a3858672b67f2df9": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class PygameEvent(object):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, event):",
                    "type": "line"
                },
                {
                    "text": "        self.event = event",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def mouse_motion(self, rect=None):",
                    "type": "line"
                },
                {
                    "text": "        return (",
                    "type": "line"
                },
                {
                    "text": "            self.event.type == pygame.MOUSEMOTION and",
                    "type": "line"
                },
                {
                    "text": "            (rect is None or rect.collidepoint(self.event.pos))",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def left_mouse_down(self, rect=None):",
                    "type": "line"
                },
                {
                    "text": "        return (",
                    "type": "line"
                },
                {
                    "text": "            self.event.type == pygame.MOUSEBUTTONDOWN and",
                    "type": "line"
                },
                {
                    "text": "            self.event.button == 1 and",
                    "type": "line"
                },
                {
                    "text": "            (rect is None or rect.collidepoint(self.event.pos))",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def left_mouse_up(self, rect=None):",
                    "type": "line"
                },
                {
                    "text": "        return (",
                    "type": "line"
                },
                {
                    "text": "            self.event.type == pygame.MOUSEBUTTONUP and",
                    "type": "line"
                },
                {
                    "text": "            self.event.button == 1 and",
                    "type": "line"
                },
                {
                    "text": "            (rect is None or rect.collidepoint(self.event.pos))",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def mouse_pos(self):",
                    "type": "line"
                },
                {
                    "text": "        return self.event.pos",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def key_down_text(self):",
                    "type": "line"
                },
                {
                    "text": "        return (",
                    "type": "line"
                },
                {
                    "text": "            self.event.type == pygame.KEYDOWN and",
                    "type": "line"
                },
                {
                    "text": "            self.event.unicode",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def key_down(self, description=None):",
                    "type": "line"
                },
                {
                    "text": "        if description is None:",
                    "type": "line"
                },
                {
                    "text": "            return self.event.type == pygame.KEYDOWN",
                    "type": "line"
                },
                {
                    "text": "        parts = description.split(\"+\")",
                    "type": "line"
                },
                {
                    "text": "        ctrl = False",
                    "type": "line"
                },
                {
                    "text": "        shift = False",
                    "type": "line"
                },
                {
                    "text": "        alt = False",
                    "type": "line"
                },
                {
                    "text": "        while parts:",
                    "type": "line"
                },
                {
                    "text": "            part = parts.pop(0)",
                    "type": "line"
                },
                {
                    "text": "            if part == \"ctrl\":",
                    "type": "line"
                },
                {
                    "text": "                ctrl = True",
                    "type": "line"
                },
                {
                    "text": "            elif part == \"shift\":",
                    "type": "line"
                },
                {
                    "text": "                shift = True",
                    "type": "line"
                },
                {
                    "text": "            elif part == \"alt\":",
                    "type": "line"
                },
                {
                    "text": "                alt = True",
                    "type": "line"
                },
                {
                    "text": "            elif not parts:",
                    "type": "line"
                },
                {
                    "text": "                key = pygame.key.key_code(part)",
                    "type": "line"
                },
                {
                    "text": "            else:",
                    "type": "line"
                },
                {
                    "text": "                raise ValueError(\"unknown part {}\".format(part))",
                    "type": "line"
                },
                {
                    "text": "        return (",
                    "type": "line"
                },
                {
                    "text": "            self.event.type == pygame.KEYDOWN and",
                    "type": "line"
                },
                {
                    "text": "            self.event.key == key and",
                    "type": "line"
                },
                {
                    "text": "            bool(self.event.mod & pygame.KMOD_CTRL) == ctrl and",
                    "type": "line"
                },
                {
                    "text": "            bool(self.event.mod & pygame.KMOD_SHIFT) == shift and",
                    "type": "line"
                },
                {
                    "text": "            bool(self.event.mod & pygame.KMOD_ALT) == alt",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def window_gained_focus(self):",
                    "type": "line"
                },
                {
                    "text": "        return (",
                    "type": "line"
                },
                {
                    "text": "            self.event.type == pygame.ACTIVEEVENT and",
                    "type": "line"
                },
                {
                    "text": "            self.event.state == 1 and",
                    "type": "line"
                },
                {
                    "text": "            self.event.gain",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def window_lost_focus(self):",
                    "type": "line"
                },
                {
                    "text": "        return (",
                    "type": "line"
                },
                {
                    "text": "            self.event.type == pygame.ACTIVEEVENT and",
                    "type": "line"
                },
                {
                    "text": "            self.event.state == 1 and",
                    "type": "line"
                },
                {
                    "text": "            not self.event.gain",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.829135",
            "type": "code"
        },
        "098bed8bd0424d1d8572cfe86c97eda2": {
            "links": [],
            "tags": [],
            "text": "Feature idea: Import images/videos to notes. Usefult to categorize clips for future use.\n",
            "timestamp_created": "2021-06-16T04:45:46.629211"
        },
        "0c17b970bc484a6eaca80302bf3dfd66": {
            "links": [],
            "tags": [
                "title"
            ],
            "text": "User Interface\n",
            "timestamp_created": "2021-04-25T05:29:43.498035",
            "type": "text"
        },
        "0da709e2882d42318300793b0f13b740": {
            "chunkpath": [
                "classes",
                "SearchResults"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def set_num_results(self, num):",
                    "type": "line"
                },
                {
                    "text": "    self.num_results = max(3, min(12, num))",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-20T12:14:33.776732",
            "type": "code"
        },
        "0ee427a47e9e4eeeb4fbbe487f1440c1": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class SmartNotesWidget(VBox):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, window, parent, path):",
                    "type": "line"
                },
                {
                    "text": "        VBox.__init__(self, window, parent)",
                    "type": "line"
                },
                {
                    "text": "        self.note_settings = NoteSettings()",
                    "type": "line"
                },
                {
                    "text": "        self.set_title(format_title(\"Smart Notes\", path))",
                    "type": "line"
                },
                {
                    "text": "        self.toggle_table_network_after_event_processing = False",
                    "type": "line"
                },
                {
                    "text": "        self.db = NoteDb(path)",
                    "type": "line"
                },
                {
                    "text": "        self.overlay = self.instantiate(OverlayWidget, self.db)",
                    "type": "line"
                },
                {
                    "text": "        self.note_browser = self.instantiate(NoteBrowserWidget,",
                    "type": "line"
                },
                {
                    "text": "            self.db,",
                    "type": "line"
                },
                {
                    "text": "            self.overlay,",
                    "type": "line"
                },
                {
                    "text": "            self.note_settings",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "        self.search_bar = self.add(self.instantiate(SearchBar,",
                    "type": "line"
                },
                {
                    "text": "            self.db,",
                    "type": "line"
                },
                {
                    "text": "            self.overlay,",
                    "type": "line"
                },
                {
                    "text": "            self.note_settings,",
                    "type": "line"
                },
                {
                    "text": "            open_callback=self._on_search_note_open,",
                    "type": "line"
                },
                {
                    "text": "            dismiss_callback=self._on_search_dismiss",
                    "type": "line"
                },
                {
                    "text": "        ))",
                    "type": "line"
                },
                {
                    "text": "        self.add(self.note_browser)",
                    "type": "line"
                },
                {
                    "text": "        self.debug_bar = self.add(self.instantiate(DebugBar))",
                    "type": "line"
                },
                {
                    "text": "        self.note_browser.focus()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def bubble_event(self, event):",
                    "type": "line"
                },
                {
                    "text": "        if event.key_down(KEY_TOGGLE_TABLE_NETWORK):",
                    "type": "line"
                },
                {
                    "text": "            self.toggle_table_network()",
                    "type": "line"
                },
                {
                    "text": "        elif event.key_down(KEY_OPEN_SEARCH):",
                    "type": "line"
                },
                {
                    "text": "            self.clear_quick_focus()",
                    "type": "line"
                },
                {
                    "text": "            self.search_bar.start_search()",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            VBox.bubble_event(self, event)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def toggle_table_network(self):",
                    "type": "line"
                },
                {
                    "text": "        self.toggle_table_network_after_event_processing = True",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def process_event(self, event):",
                    "type": "line"
                },
                {
                    "text": "        try:",
                    "type": "line"
                },
                {
                    "text": "            self.overlay.process_event(event)",
                    "type": "line"
                },
                {
                    "text": "        except OverlayAbort:",
                    "type": "line"
                },
                {
                    "text": "            pass",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            if event.mouse_motion():",
                    "type": "line"
                },
                {
                    "text": "                self.overlay.set_link_target(None)",
                    "type": "line"
                },
                {
                    "text": "                self.clear_quick_focus()",
                    "type": "line"
                },
                {
                    "text": "            if event.key_down(KEY_QUIT):",
                    "type": "line"
                },
                {
                    "text": "                self.quit()",
                    "type": "line"
                },
                {
                    "text": "            elif event.key_down(KEY_UNDO):",
                    "type": "line"
                },
                {
                    "text": "                self.db.undo()",
                    "type": "line"
                },
                {
                    "text": "            elif event.key_down(KEY_REDO):",
                    "type": "line"
                },
                {
                    "text": "                self.db.redo()",
                    "type": "line"
                },
                {
                    "text": "            elif event.key_down(KEY_TOGGLE_DEBUG_BAR):",
                    "type": "line"
                },
                {
                    "text": "                self.debug_bar.toggle()",
                    "type": "line"
                },
                {
                    "text": "            elif event.key_down(KEY_CLEAR_FOCUS) and self.clear_quick_focus():",
                    "type": "line"
                },
                {
                    "text": "                pass",
                    "type": "line"
                },
                {
                    "text": "            elif event.window_gained_focus():",
                    "type": "line"
                },
                {
                    "text": "                self.restore_focus()",
                    "type": "line"
                },
                {
                    "text": "            elif event.window_lost_focus():",
                    "type": "line"
                },
                {
                    "text": "                self.save_focus()",
                    "type": "line"
                },
                {
                    "text": "            else:",
                    "type": "line"
                },
                {
                    "text": "                VBox.process_event(self, event)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _on_search_note_open(self, note_id):",
                    "type": "line"
                },
                {
                    "text": "        self.note_browser.open_note(note_id)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _on_search_dismiss(self, close):",
                    "type": "line"
                },
                {
                    "text": "        if close:",
                    "type": "line"
                },
                {
                    "text": "            self.search_bar.hide()",
                    "type": "line"
                },
                {
                    "text": "        self.note_browser.focus()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def update(self, rect, elapsed_ms):",
                    "type": "line"
                },
                {
                    "text": "        self.overlay.update(rect, elapsed_ms)",
                    "type": "line"
                },
                {
                    "text": "        VBox.update(self, rect, elapsed_ms)",
                    "type": "line"
                },
                {
                    "text": "        self.rect = rect",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def draw(self, canvas):",
                    "type": "line"
                },
                {
                    "text": "        canvas.fill_rect(self.rect, color=COLOR_BACKGROUND)",
                    "type": "line"
                },
                {
                    "text": "        VBox.draw(self, canvas)",
                    "type": "line"
                },
                {
                    "text": "        self.overlay.draw(canvas)",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.617358",
            "type": "code"
        },
        "11126df08c334d5592ccc9d288e1be87": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class SearchField(TextField):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, window, parent, search_results, dismiss_callback, **kwargs):",
                    "type": "line"
                },
                {
                    "text": "        TextField.__init__(self, window, parent, search_results.update_search_text, **kwargs)",
                    "type": "line"
                },
                {
                    "text": "        self.search_results = search_results",
                    "type": "line"
                },
                {
                    "text": "        self.dismiss_callback = dismiss_callback",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def process_event(self, event):",
                    "type": "line"
                },
                {
                    "text": "        if self.has_focus() and self.process_event_when_in_focus(event):",
                    "type": "line"
                },
                {
                    "text": "            return",
                    "type": "line"
                },
                {
                    "text": "        TextField.process_event(self, event)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def process_event_when_in_focus(self, event):",
                    "type": "line"
                },
                {
                    "text": "        if event.key_down(\"ctrl+w\"):",
                    "type": "line"
                },
                {
                    "text": "            self.set_text(strip_last_word(self.text))",
                    "type": "line"
                },
                {
                    "text": "        elif event.key_down(\"backspace\"):",
                    "type": "line"
                },
                {
                    "text": "            self.set_text(self.text[:-1])",
                    "type": "line"
                },
                {
                    "text": "        elif event.key_down(KEY_DISMISS):",
                    "type": "line"
                },
                {
                    "text": "            self.dismiss_callback(close=True)",
                    "type": "line"
                },
                {
                    "text": "        elif event.key_down(KEY_INCREASE):",
                    "type": "line"
                },
                {
                    "text": "            self.search_results.inc_results()",
                    "type": "line"
                },
                {
                    "text": "        elif event.key_down(KEY_DECREASE):",
                    "type": "line"
                },
                {
                    "text": "            self.search_results.dec_results()",
                    "type": "line"
                },
                {
                    "text": "        elif event.key_down(KEY_CLEAR_FOCUS):",
                    "type": "line"
                },
                {
                    "text": "            self.dismiss_callback(close=False)",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            return False",
                    "type": "line"
                },
                {
                    "text": "        return True",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.627580",
            "type": "code"
        },
        "11425f028b434e938fd0c378eaeffcc3": {
            "chunkpath": [
                "classes",
                "NoteDb"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def _ensure_note_id(self, note_id):",
                    "type": "line"
                },
                {
                    "text": "    if note_id not in self._get(\"notes\"):",
                    "type": "line"
                },
                {
                    "text": "        raise NoteNotFound(str(note_id))",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-20T12:22:06.077089",
            "type": "code"
        },
        "11b1c0c63fb446ddb348d60f48f8c943": {
            "tags": [
                "title"
            ],
            "text": "Utilities",
            "timestamp_created": "2021-06-19T07:27:53.951476"
        },
        "12310f4824d94c3189ab50c782e3d9c3": {
            "links": [],
            "tags": [
                "title"
            ],
            "text": "Areas\n",
            "timestamp_created": "2021-04-25T04:58:55.091302"
        },
        "13b90445c95940309b6615d56d6c5a61": {
            "links": [],
            "tags": [],
            "text": "Automatic/Virtual notes such as \"file tree\".\n",
            "timestamp_created": "2021-06-20T09:34:17.227581",
            "type": "text"
        },
        "13d328224b304432a206a3a27a27a443": {
            "chunkpath": [
                "imports"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "import contextlib",
                    "type": "line"
                },
                {
                    "text": "import json",
                    "type": "line"
                },
                {
                    "text": "import os",
                    "type": "line"
                },
                {
                    "text": "import subprocess",
                    "type": "line"
                },
                {
                    "text": "import tempfile",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.977137",
            "type": "code"
        },
        "1751b524ae56481b86401036833171e9": {
            "links": [],
            "tags": [
                "title"
            ],
            "text": "Automated Tests\n",
            "timestamp_created": "2021-04-25T04:52:53.848946"
        },
        "19c4146f24a34fd692f02a722b9041d2": {
            "links": [],
            "tags": [
                "title"
            ],
            "text": "LP Support\n",
            "timestamp_created": "2021-06-19T11:27:07.891633",
            "type": "text"
        },
        "19cd9c5f66224883b498baf2d20a1d92": {
            "links": [],
            "tags": [],
            "text": "Do we have to clear quick focus when opening event editor?\n",
            "timestamp_created": "2021-05-23T08:11:31.860272"
        },
        "1a0560811c6e487a864e5bcf2b576ebc": {
            "links": [],
            "tags": [],
            "text": "If the center note in network view is a code note, add ability to switch to file mode.\n",
            "timestamp_created": "2021-06-21T05:46:26.130455",
            "type": "text"
        },
        "1a43d8044ac040139a660e961ae77d02": {
            "links": [],
            "tags": [],
            "text": "Visualise possible commands & undo/redo buffer in status bar.\n",
            "timestamp_created": "2021-04-25T05:43:17.100525"
        },
        "1a499036e07b42f794d14348c634f69d": {
            "links": [],
            "tags": [],
            "text": "Can we remove Widget.rect?\n",
            "timestamp_created": "2021-04-25T04:54:43.530212"
        },
        "1c384abda79d4c0b8f117c6b293e2dc5": {
            "chunkpath": [
                "base classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class Box(Widget):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, window, parent, **kwargs):",
                    "type": "line"
                },
                {
                    "text": "        Widget.__init__(self, window, parent, **kwargs)",
                    "type": "line"
                },
                {
                    "text": "        self.clear()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def clear(self):",
                    "type": "line"
                },
                {
                    "text": "        self.children = []",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def add(self, child):",
                    "type": "line"
                },
                {
                    "text": "        self.children.append(child)",
                    "type": "line"
                },
                {
                    "text": "        return child",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def process_event(self, event):",
                    "type": "line"
                },
                {
                    "text": "        Widget.process_event(self, event)",
                    "type": "line"
                },
                {
                    "text": "        for child in self.visible_children():",
                    "type": "line"
                },
                {
                    "text": "            child.process_event(event)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def update(self, rect, elapsed_ms):",
                    "type": "line"
                },
                {
                    "text": "        Widget.update(self, rect, elapsed_ms)",
                    "type": "line"
                },
                {
                    "text": "        sizes = []",
                    "type": "line"
                },
                {
                    "text": "        divide_indices = []",
                    "type": "line"
                },
                {
                    "text": "        for child in self.visible_children():",
                    "type": "line"
                },
                {
                    "text": "            if self.get_widget_size(child) == -1:",
                    "type": "line"
                },
                {
                    "text": "                divide_indices.append(len(sizes))",
                    "type": "line"
                },
                {
                    "text": "                sizes.append(0)",
                    "type": "line"
                },
                {
                    "text": "            else:",
                    "type": "line"
                },
                {
                    "text": "                sizes.append(self.get_widget_size(child))",
                    "type": "line"
                },
                {
                    "text": "        if divide_indices:",
                    "type": "line"
                },
                {
                    "text": "            divide_size = int(round((self.get_rect_size(rect) - sum(sizes)) / len(divide_indices)))",
                    "type": "line"
                },
                {
                    "text": "            for divide_index in divide_indices:",
                    "type": "line"
                },
                {
                    "text": "                sizes[divide_index] = divide_size",
                    "type": "line"
                },
                {
                    "text": "        for child, size in zip(self.visible_children(), sizes):",
                    "type": "line"
                },
                {
                    "text": "            rect = self.set_rect_size(rect, size)",
                    "type": "line"
                },
                {
                    "text": "            child.update(rect, elapsed_ms)",
                    "type": "line"
                },
                {
                    "text": "            rect = self.move_rect(rect, size)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def draw(self, canvas):",
                    "type": "line"
                },
                {
                    "text": "        for child in self.visible_children():",
                    "type": "line"
                },
                {
                    "text": "            child.draw(canvas)",
                    "type": "line"
                },
                {
                    "text": "        Widget.draw(self, canvas)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def visible_children(self):",
                    "type": "line"
                },
                {
                    "text": "        for child in self.children:",
                    "type": "line"
                },
                {
                    "text": "            if child.is_visible():",
                    "type": "line"
                },
                {
                    "text": "                yield child",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.569826",
            "type": "code"
        },
        "1ffd967bcd164d1da4966c8f8ca2dd8a": {
            "links": [],
            "tags": [
                "title"
            ],
            "text": "Realisations\n",
            "timestamp_created": "2021-04-25T04:48:22.080379"
        },
        "21228dea83a648c0a3c698b8f9e50b30": {
            "tags": [
                "title"
            ],
            "text": "Text Manipulation",
            "timestamp_created": "2021-06-19T07:27:54.293639"
        },
        "2161885ac39948218c2dbe0f23e91c5e": {
            "chunkpath": [
                "end-to-end"
            ],
            "filepath": [
                "test_smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def test_table_view(self):",
                    "type": "line"
                },
                {
                    "text": "    self.driver.iteration(events=[KeyEvent(\"t\")], elapsed_ms=300+1)",
                    "type": "line"
                },
                {
                    "text": "    self.assert_drawn_image_is(\"table_view.png\")",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.014429",
            "type": "code"
        },
        "21e09e1f1d0d4fa184795fa3105577c9": {
            "chunkpath": [
                "classes",
                "NoteText"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def _text_to_note_fields(self):",
                    "type": "line"
                },
                {
                    "text": "    try:",
                    "type": "line"
                },
                {
                    "text": "        return self._parse_footer()",
                    "type": "line"
                },
                {
                    "text": "    except ParseError:",
                    "type": "line"
                },
                {
                    "text": "        return {",
                    "type": "line"
                },
                {
                    "text": "            \"text\": self.text,",
                    "type": "line"
                },
                {
                    "text": "            \"links\": [],",
                    "type": "line"
                },
                {
                    "text": "            \"tags\": [],",
                    "type": "line"
                },
                {
                    "text": "        }",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-20T12:27:02.675543",
            "type": "code"
        },
        "21f583aa5a32443fbad72db20a181f03": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class NetworkNote(NoteBaseWidget):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, window, parent, network, db, overlay, note_id, settings):",
                    "type": "line"
                },
                {
                    "text": "        NoteBaseWidget.__init__(self, window, parent, db, overlay, note_id, settings)",
                    "type": "line"
                },
                {
                    "text": "        self.overlay = overlay",
                    "type": "line"
                },
                {
                    "text": "        self.network = network",
                    "type": "line"
                },
                {
                    "text": "        self.incoming = []",
                    "type": "line"
                },
                {
                    "text": "        self.outgoing = []",
                    "type": "line"
                },
                {
                    "text": "        self.animation = Animation()",
                    "type": "line"
                },
                {
                    "text": "        self.rect = None",
                    "type": "line"
                },
                {
                    "text": "        self.target = None",
                    "type": "line"
                },
                {
                    "text": "        self.previous = None",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def clear_hidden_links(self, visible_links):",
                    "type": "line"
                },
                {
                    "text": "        self.incoming = [x for x in self.incoming if x in visible_links]",
                    "type": "line"
                },
                {
                    "text": "        self.outgoing = [x for x in self.outgoing if x in visible_links]",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def open_me(self):",
                    "type": "line"
                },
                {
                    "text": "        self.network.make_root(self)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def process_event(self, event):",
                    "type": "line"
                },
                {
                    "text": "        if self.has_focus() and event.key_down(KEY_UNLINK_NOTE):",
                    "type": "line"
                },
                {
                    "text": "            link_id = self.get_link_id()",
                    "type": "line"
                },
                {
                    "text": "            if link_id:",
                    "type": "line"
                },
                {
                    "text": "                self.db.delete_link(link_id)",
                    "type": "line"
                },
                {
                    "text": "                self.clear_quick_focus()",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            NoteBaseWidget.process_event(self, event)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def update_incoming(self):",
                    "type": "line"
                },
                {
                    "text": "        by_id = {",
                    "type": "line"
                },
                {
                    "text": "            link.link_id: link",
                    "type": "line"
                },
                {
                    "text": "            for link in self.incoming",
                    "type": "line"
                },
                {
                    "text": "        }",
                    "type": "line"
                },
                {
                    "text": "        self.incoming = []",
                    "type": "line"
                },
                {
                    "text": "        for link_id, link_data in self.db.get_incoming_links(self.note_id):",
                    "type": "line"
                },
                {
                    "text": "            if link_id in by_id:",
                    "type": "line"
                },
                {
                    "text": "                self.incoming.append(by_id.pop(link_id))",
                    "type": "line"
                },
                {
                    "text": "            else:",
                    "type": "line"
                },
                {
                    "text": "                self.instantiate(LinkWidget,",
                    "type": "line"
                },
                {
                    "text": "                    link_id,",
                    "type": "line"
                },
                {
                    "text": "                    link_data,",
                    "type": "line"
                },
                {
                    "text": "                    self.instantiate(",
                    "type": "line"
                },
                {
                    "text": "                        NetworkNote,",
                    "type": "line"
                },
                {
                    "text": "                        self.network,",
                    "type": "line"
                },
                {
                    "text": "                        self.db,",
                    "type": "line"
                },
                {
                    "text": "                        self.overlay,",
                    "type": "line"
                },
                {
                    "text": "                        link_data[\"from\"],",
                    "type": "line"
                },
                {
                    "text": "                        self.settings",
                    "type": "line"
                },
                {
                    "text": "                    ),",
                    "type": "line"
                },
                {
                    "text": "                    self",
                    "type": "line"
                },
                {
                    "text": "                )",
                    "type": "line"
                },
                {
                    "text": "        return self.incoming",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def update_outgoing(self):",
                    "type": "line"
                },
                {
                    "text": "        by_id = {",
                    "type": "line"
                },
                {
                    "text": "            link.link_id: link",
                    "type": "line"
                },
                {
                    "text": "            for link in self.outgoing",
                    "type": "line"
                },
                {
                    "text": "        }",
                    "type": "line"
                },
                {
                    "text": "        self.outgoing = []",
                    "type": "line"
                },
                {
                    "text": "        for link_id, link_data in self.db.get_outgoing_links(self.note_id):",
                    "type": "line"
                },
                {
                    "text": "            if link_id in by_id:",
                    "type": "line"
                },
                {
                    "text": "                self.outgoing.append(by_id.pop(link_id))",
                    "type": "line"
                },
                {
                    "text": "            else:",
                    "type": "line"
                },
                {
                    "text": "                self.instantiate(LinkWidget,",
                    "type": "line"
                },
                {
                    "text": "                    link_id,",
                    "type": "line"
                },
                {
                    "text": "                    link_data,",
                    "type": "line"
                },
                {
                    "text": "                    self,",
                    "type": "line"
                },
                {
                    "text": "                    self.instantiate(",
                    "type": "line"
                },
                {
                    "text": "                        NetworkNote,",
                    "type": "line"
                },
                {
                    "text": "                        self.network,",
                    "type": "line"
                },
                {
                    "text": "                        self.db,",
                    "type": "line"
                },
                {
                    "text": "                        self.overlay,",
                    "type": "line"
                },
                {
                    "text": "                        link_data[\"to\"],",
                    "type": "line"
                },
                {
                    "text": "                        self.settings",
                    "type": "line"
                },
                {
                    "text": "                    )",
                    "type": "line"
                },
                {
                    "text": "                )",
                    "type": "line"
                },
                {
                    "text": "        return self.outgoing",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_link_id(self):",
                    "type": "line"
                },
                {
                    "text": "        if self.side == \"left\" and len(self.outgoing) == 1 and not self.outgoing[0].is_virtual():",
                    "type": "line"
                },
                {
                    "text": "            return self.outgoing[0].link_id",
                    "type": "line"
                },
                {
                    "text": "        if self.side == \"right\" and len(self.incoming) == 1 and not self.incoming[0].is_virtual():",
                    "type": "line"
                },
                {
                    "text": "            return self.incoming[0].link_id",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_center(self):",
                    "type": "line"
                },
                {
                    "text": "        return self.rect.center",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_link_in_point(self):",
                    "type": "line"
                },
                {
                    "text": "        return self.rect.midleft",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_link_out_point(self):",
                    "type": "line"
                },
                {
                    "text": "        return self.rect.midright",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def update(self, rect, elapsed_ms, side, center_position):",
                    "type": "line"
                },
                {
                    "text": "        NoteBaseWidget.update(self, rect, elapsed_ms)",
                    "type": "line"
                },
                {
                    "text": "        self.side = side",
                    "type": "line"
                },
                {
                    "text": "        self.true_rect = rect",
                    "type": "line"
                },
                {
                    "text": "        target = self._get_target(rect, side)",
                    "type": "line"
                },
                {
                    "text": "        if center_position:",
                    "type": "line"
                },
                {
                    "text": "            x = target.copy()",
                    "type": "line"
                },
                {
                    "text": "            x.center = center_position",
                    "type": "line"
                },
                {
                    "text": "            self.rect = self.target = self.previous = x",
                    "type": "line"
                },
                {
                    "text": "        if self.rect is None:",
                    "type": "line"
                },
                {
                    "text": "            self.rect = self.target = self.previous = target",
                    "type": "line"
                },
                {
                    "text": "        if target != self.target:",
                    "type": "line"
                },
                {
                    "text": "            if self.animation.active():",
                    "type": "line"
                },
                {
                    "text": "                self.rect = self.target",
                    "type": "line"
                },
                {
                    "text": "            self.target = target",
                    "type": "line"
                },
                {
                    "text": "            self.previous = self.rect",
                    "type": "line"
                },
                {
                    "text": "            self.animation.start(300)",
                    "type": "line"
                },
                {
                    "text": "        if self.animation.active():",
                    "type": "line"
                },
                {
                    "text": "            x_diff = self.target.width - self.previous.width",
                    "type": "line"
                },
                {
                    "text": "            y_diff = self.target.height - self.previous.height",
                    "type": "line"
                },
                {
                    "text": "            percent = self.animation.advance(elapsed_ms)",
                    "type": "line"
                },
                {
                    "text": "            self.rect = self.previous.inflate(x_diff*percent, y_diff*percent).move(",
                    "type": "line"
                },
                {
                    "text": "                (",
                    "type": "line"
                },
                {
                    "text": "                    pygame.math.Vector2(self.target.center)-",
                    "type": "line"
                },
                {
                    "text": "                    pygame.math.Vector2(self.previous.center)",
                    "type": "line"
                },
                {
                    "text": "                )*percent",
                    "type": "line"
                },
                {
                    "text": "            )",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def draw(self, canvas):",
                    "type": "line"
                },
                {
                    "text": "        NoteBaseWidget.draw(self, canvas)",
                    "type": "line"
                },
                {
                    "text": "        if DEBUG_NOTE_BORDER:",
                    "type": "line"
                },
                {
                    "text": "            canvas.draw_rect(self.true_rect, (255, 0, 0), 1)",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.671796",
            "type": "code"
        },
        "25ce5b2877d94c10b54dcad84500c9f9": {
            "tags": [
                "title"
            ],
            "text": "Pygame",
            "timestamp_created": "2021-06-19T07:27:53.762854"
        },
        "26f8d74f50074d56813e1466850c2ffc": {
            "links": [],
            "tags": [],
            "text": "No scrollbars.\n",
            "timestamp_created": "2021-04-25T05:28:38.973153"
        },
        "28bb50737b9843fea003e2659b62a1cb": {
            "tags": [
                "title"
            ],
            "text": "Search Field",
            "timestamp_created": "2021-06-19T07:27:52.624705"
        },
        "291e4cbb8ca049998afaa567b1749d9b": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class CairoCanvas(object):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, surface):",
                    "type": "line"
                },
                {
                    "text": "        self.surface = surface",
                    "type": "line"
                },
                {
                    "text": "        self.ctx = cairo.Context(self.surface)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def create_image(self, size, fn):",
                    "type": "line"
                },
                {
                    "text": "        surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, size[0], size[1])",
                    "type": "line"
                },
                {
                    "text": "        fn(CairoCanvas(surface))",
                    "type": "line"
                },
                {
                    "text": "        return surface",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def blit(self, image, pos, alpha=255, scale_to_fit=None):",
                    "type": "line"
                },
                {
                    "text": "        self.ctx.save()",
                    "type": "line"
                },
                {
                    "text": "        self.ctx.translate(pos[0], pos[1])",
                    "type": "line"
                },
                {
                    "text": "        if scale_to_fit:",
                    "type": "line"
                },
                {
                    "text": "            self.ctx.scale(",
                    "type": "line"
                },
                {
                    "text": "                max(0.001, scale_to_fit[0] / image.get_width()),",
                    "type": "line"
                },
                {
                    "text": "                max(0.001, scale_to_fit[1] / image.get_height())",
                    "type": "line"
                },
                {
                    "text": "            )",
                    "type": "line"
                },
                {
                    "text": "        self.ctx.set_source_surface(image, 0, 0)",
                    "type": "line"
                },
                {
                    "text": "        self.ctx.paint_with_alpha(alpha/255)",
                    "type": "line"
                },
                {
                    "text": "        self.ctx.restore()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def fill_rect(self, rect, color=(0, 0, 0)):",
                    "type": "line"
                },
                {
                    "text": "        self._set_color(color)",
                    "type": "line"
                },
                {
                    "text": "        self.ctx.rectangle(rect.x, rect.y, rect.width, rect.height)",
                    "type": "line"
                },
                {
                    "text": "        self.ctx.fill()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def draw_rect(self, rect, color, width):",
                    "type": "line"
                },
                {
                    "text": "        if width % 2 == 0:",
                    "type": "line"
                },
                {
                    "text": "            offset = 0",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            offset = 0.5",
                    "type": "line"
                },
                {
                    "text": "        self._set_color(color)",
                    "type": "line"
                },
                {
                    "text": "        self.ctx.rectangle(rect.x+offset, rect.y+offset, rect.width, rect.height)",
                    "type": "line"
                },
                {
                    "text": "        self.ctx.set_line_width(width)",
                    "type": "line"
                },
                {
                    "text": "        self.ctx.stroke()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _set_color(self, color):",
                    "type": "line"
                },
                {
                    "text": "        if len(color) == 4:",
                    "type": "line"
                },
                {
                    "text": "            self.ctx.set_source_rgba(color[0]/255, color[1]/255, color[2]/255, color[3]/255)",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            self.ctx.set_source_rgb(color[0]/255, color[1]/255, color[2]/255)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def render_text(self, text, box,",
                    "type": "line"
                },
                {
                    "text": "        size=40,",
                    "type": "line"
                },
                {
                    "text": "        boxalign=\"center\",",
                    "type": "line"
                },
                {
                    "text": "        face=None,",
                    "type": "line"
                },
                {
                    "text": "        textalign=\"left\",",
                    "type": "line"
                },
                {
                    "text": "        split=True,",
                    "type": "line"
                },
                {
                    "text": "        color=(0, 0, 0)",
                    "type": "line"
                },
                {
                    "text": "    ):",
                    "type": "line"
                },
                {
                    "text": "        if box.height <= 0:",
                    "type": "line"
                },
                {
                    "text": "            return",
                    "type": "line"
                },
                {
                    "text": "        if split:",
                    "type": "line"
                },
                {
                    "text": "            text = text.strip().replace(\"\\n\", \" \")",
                    "type": "line"
                },
                {
                    "text": "        if not text:",
                    "type": "line"
                },
                {
                    "text": "            return",
                    "type": "line"
                },
                {
                    "text": "        if DEBUG_TEXT_BORDER:",
                    "type": "line"
                },
                {
                    "text": "            self.ctx.set_source_rgb(1, 0.1, 0.1)",
                    "type": "line"
                },
                {
                    "text": "            self.ctx.rectangle(box[0], box[1], box[2], box[3])",
                    "type": "line"
                },
                {
                    "text": "            self.ctx.set_line_width(1)",
                    "type": "line"
                },
                {
                    "text": "            self.ctx.stroke()",
                    "type": "line"
                },
                {
                    "text": "        if face is not None:",
                    "type": "line"
                },
                {
                    "text": "            self.ctx.select_font_face(face)",
                    "type": "line"
                },
                {
                    "text": "        self._set_color(color)",
                    "type": "line"
                },
                {
                    "text": "        metrics, scale_factor = self._find_best_fit(text, box, split, size)",
                    "type": "line"
                },
                {
                    "text": "        self.ctx.save()",
                    "type": "line"
                },
                {
                    "text": "        xoffset = 0",
                    "type": "line"
                },
                {
                    "text": "        yoffset = 0",
                    "type": "line"
                },
                {
                    "text": "        self._translate_box(box, metrics[\"width\"]*scale_factor, metrics[\"height\"]*scale_factor, boxalign)",
                    "type": "line"
                },
                {
                    "text": "        self.ctx.scale(scale_factor, scale_factor)",
                    "type": "line"
                },
                {
                    "text": "        for x, y, width, part in metrics[\"parts\"]:",
                    "type": "line"
                },
                {
                    "text": "            if not split:",
                    "type": "line"
                },
                {
                    "text": "                x = 0",
                    "type": "line"
                },
                {
                    "text": "            if textalign == \"center\":",
                    "type": "line"
                },
                {
                    "text": "                x_align_offset = (metrics[\"width\"]-width)/2",
                    "type": "line"
                },
                {
                    "text": "            elif textalign == \"right\":",
                    "type": "line"
                },
                {
                    "text": "                x_align_offset = metrics[\"width\"]-width",
                    "type": "line"
                },
                {
                    "text": "            else:",
                    "type": "line"
                },
                {
                    "text": "                x_align_offset = 0",
                    "type": "line"
                },
                {
                    "text": "            self.ctx.move_to(x+x_align_offset, y)",
                    "type": "line"
                },
                {
                    "text": "            self.ctx.show_text(part)",
                    "type": "line"
                },
                {
                    "text": "        if DEBUG_TEXT_BORDER:",
                    "type": "line"
                },
                {
                    "text": "            self.ctx.set_source_rgb(0.1, 1, 0.1)",
                    "type": "line"
                },
                {
                    "text": "            self.ctx.rectangle(0, 0, metrics[\"width\"], metrics[\"height\"])",
                    "type": "line"
                },
                {
                    "text": "            self.ctx.set_line_width(2/scale_factor)",
                    "type": "line"
                },
                {
                    "text": "            self.ctx.stroke()",
                    "type": "line"
                },
                {
                    "text": "        self.ctx.restore()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _find_best_fit(self, text, box, split, size):",
                    "type": "line"
                },
                {
                    "text": "        self.ctx.set_font_size(size)",
                    "type": "line"
                },
                {
                    "text": "        if split:",
                    "type": "line"
                },
                {
                    "text": "            metrics = self._find_best_split(text, box)",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            metrics = self._get_metrics(text.splitlines())",
                    "type": "line"
                },
                {
                    "text": "        scale_factor = box.width / metrics[\"width\"]",
                    "type": "line"
                },
                {
                    "text": "        if metrics[\"height\"] * scale_factor > box.height:",
                    "type": "line"
                },
                {
                    "text": "            scale_factor = box.height / metrics[\"height\"]",
                    "type": "line"
                },
                {
                    "text": "        scale_factor = min(scale_factor, 1)",
                    "type": "line"
                },
                {
                    "text": "        size = int(size*scale_factor)",
                    "type": "line"
                },
                {
                    "text": "        if scale_factor < 1:",
                    "type": "line"
                },
                {
                    "text": "            while True:",
                    "type": "line"
                },
                {
                    "text": "                self.ctx.set_font_size(size)",
                    "type": "line"
                },
                {
                    "text": "                metrics = self._get_metrics([x[-1] for x in metrics[\"parts\"]])",
                    "type": "line"
                },
                {
                    "text": "                if size < 2:",
                    "type": "line"
                },
                {
                    "text": "                    break",
                    "type": "line"
                },
                {
                    "text": "                if metrics[\"width\"] <= box.width and metrics[\"height\"] <= box.height:",
                    "type": "line"
                },
                {
                    "text": "                    break",
                    "type": "line"
                },
                {
                    "text": "                size -= 1",
                    "type": "line"
                },
                {
                    "text": "        return metrics, 1",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _find_best_split(self, text, box):",
                    "type": "line"
                },
                {
                    "text": "        split_times = 1",
                    "type": "line"
                },
                {
                    "text": "        target_ratio = box.width / box.height",
                    "type": "line"
                },
                {
                    "text": "        metrics = self._get_metrics(self._split_text(text, split_times))",
                    "type": "line"
                },
                {
                    "text": "        diff = abs(metrics[\"ratio\"] - target_ratio)",
                    "type": "line"
                },
                {
                    "text": "        while True:",
                    "type": "line"
                },
                {
                    "text": "            split_times += 1",
                    "type": "line"
                },
                {
                    "text": "            new_metrics = self._get_metrics(self._split_text(text, split_times))",
                    "type": "line"
                },
                {
                    "text": "            new_diff = abs(new_metrics[\"ratio\"] - target_ratio)",
                    "type": "line"
                },
                {
                    "text": "            if new_metrics == metrics or new_diff > diff:",
                    "type": "line"
                },
                {
                    "text": "                return metrics",
                    "type": "line"
                },
                {
                    "text": "            else:",
                    "type": "line"
                },
                {
                    "text": "                diff = new_diff",
                    "type": "line"
                },
                {
                    "text": "                metrics = new_metrics",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _split_text(self, text, times):",
                    "type": "line"
                },
                {
                    "text": "        words = text.split(\" \")",
                    "type": "line"
                },
                {
                    "text": "        words_per_part = max(1, int(round(len(words) / times)))",
                    "type": "line"
                },
                {
                    "text": "        parts = []",
                    "type": "line"
                },
                {
                    "text": "        start = 0",
                    "type": "line"
                },
                {
                    "text": "        while start < len(words):",
                    "type": "line"
                },
                {
                    "text": "            parts.append(\" \".join(words[start:start+words_per_part]))",
                    "type": "line"
                },
                {
                    "text": "            start += words_per_part",
                    "type": "line"
                },
                {
                    "text": "        return parts",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _get_metrics(self, splits):",
                    "type": "line"
                },
                {
                    "text": "        width = 0",
                    "type": "line"
                },
                {
                    "text": "        height = 0",
                    "type": "line"
                },
                {
                    "text": "        start_y = None",
                    "type": "line"
                },
                {
                    "text": "        parts = []",
                    "type": "line"
                },
                {
                    "text": "        font_ascent, font_descent = self.ctx.font_extents()[0:2]",
                    "type": "line"
                },
                {
                    "text": "        extra = font_descent*0.9",
                    "type": "line"
                },
                {
                    "text": "        for text in splits:",
                    "type": "line"
                },
                {
                    "text": "            extents = self.ctx.text_extents(text)",
                    "type": "line"
                },
                {
                    "text": "            height += font_ascent",
                    "type": "line"
                },
                {
                    "text": "            parts.append((-extents.x_bearing, height, extents.width, text))",
                    "type": "line"
                },
                {
                    "text": "            width = max(width, extents.width)",
                    "type": "line"
                },
                {
                    "text": "            height += font_descent",
                    "type": "line"
                },
                {
                    "text": "            height += extra",
                    "type": "line"
                },
                {
                    "text": "        height -= extra",
                    "type": "line"
                },
                {
                    "text": "        if height == 0:",
                    "type": "line"
                },
                {
                    "text": "            height = 0.1",
                    "type": "line"
                },
                {
                    "text": "        return {",
                    "type": "line"
                },
                {
                    "text": "            \"parts\": parts,",
                    "type": "line"
                },
                {
                    "text": "            \"width\": width,",
                    "type": "line"
                },
                {
                    "text": "            \"height\": height,",
                    "type": "line"
                },
                {
                    "text": "            \"ratio\": width / height,",
                    "type": "line"
                },
                {
                    "text": "        }",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _translate_box(self, box, text_width, text_height, boxalign):",
                    "type": "line"
                },
                {
                    "text": "        # topleft      topcenter     topright",
                    "type": "line"
                },
                {
                    "text": "        # midleft        center      midright",
                    "type": "line"
                },
                {
                    "text": "        # bottomleft  bottomcenter  bottomright",
                    "type": "line"
                },
                {
                    "text": "        if boxalign in [\"topright\", \"midright\", \"bottomright\"]:",
                    "type": "line"
                },
                {
                    "text": "            xoffset = box[2]-text_width",
                    "type": "line"
                },
                {
                    "text": "        elif boxalign in [\"topcenter\", \"center\", \"bottomcenter\"]:",
                    "type": "line"
                },
                {
                    "text": "            xoffset = box[2]/2-text_width/2",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            xoffset = 0",
                    "type": "line"
                },
                {
                    "text": "        if boxalign in [\"bottomleft\", \"bottomcenter\", \"bottomright\"]:",
                    "type": "line"
                },
                {
                    "text": "            yoffset = box[3]-text_height",
                    "type": "line"
                },
                {
                    "text": "        elif boxalign in [\"midleft\", \"center\", \"midright\"]:",
                    "type": "line"
                },
                {
                    "text": "            yoffset = box[3]/2-text_height/2",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            yoffset = 0",
                    "type": "line"
                },
                {
                    "text": "        self.ctx.translate(box[0]+xoffset, box[1]+yoffset)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def move_to(self, x, y):",
                    "type": "line"
                },
                {
                    "text": "        self.ctx.move_to(x, y)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def line_to(self, x, y):",
                    "type": "line"
                },
                {
                    "text": "        self.ctx.line_to(x, y)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def curve_to(self, *args):",
                    "type": "line"
                },
                {
                    "text": "        self.ctx.curve_to(*args)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def set_source_rgb(self, *args):",
                    "type": "line"
                },
                {
                    "text": "        self.ctx.set_source_rgb(*args)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def set_line_width(self, *args):",
                    "type": "line"
                },
                {
                    "text": "        self.ctx.set_line_width(*args)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def stroke(self, *args):",
                    "type": "line"
                },
                {
                    "text": "        self.ctx.stroke(*args)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_rect(self):",
                    "type": "line"
                },
                {
                    "text": "        return pygame.Rect(",
                    "type": "line"
                },
                {
                    "text": "            0,",
                    "type": "line"
                },
                {
                    "text": "            0,",
                    "type": "line"
                },
                {
                    "text": "            self.surface.get_width(),",
                    "type": "line"
                },
                {
                    "text": "            self.surface.get_height()",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.875564",
            "type": "code"
        },
        "29bce2bdc6844ce1bd962cd144359aaa": {
            "tags": [
                "title"
            ],
            "text": "Padding",
            "timestamp_created": "2021-06-19T07:27:53.509600"
        },
        "2a3c18b5f0914536be66afe1ea8aee44": {
            "links": [],
            "tags": [
                "title",
                "title"
            ],
            "text": "Backlog: possible features, bugs, etc.\n",
            "timestamp_created": "2021-04-25T05:34:12.538563",
            "type": "text"
        },
        "2d9ff066dc6d428593815e2735918279": {
            "text": "The main interaction with widgets happen in three method calls: `process_event`, `update`, and `draw`. You can see in Pygame how they are invoked. This architecture is inspired by a game loop.",
            "timestamp_created": "2021-06-19T07:27:53.238486"
        },
        "2e71ca7444654d178322a9f276f4f2f5": {
            "text": "<unordered list>",
            "timestamp_created": "2021-06-19T07:27:53.276814"
        },
        "2ee004f1e26a4e6bafcf5e9fd1e4e874": {
            "tags": [
                "title"
            ],
            "text": "Canvas",
            "timestamp_created": "2021-06-19T07:27:53.852281"
        },
        "2f28fa5ea9fb489aa0673676b9c11fbe": {
            "chunkpath": [
                "classes",
                "NoteDb"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def get_incoming_links(self, note_id):",
                    "type": "line"
                },
                {
                    "text": "    return self._sort_links([",
                    "type": "line"
                },
                {
                    "text": "        (link_id, link)",
                    "type": "line"
                },
                {
                    "text": "        for link_id, link in self._links()",
                    "type": "line"
                },
                {
                    "text": "        if link[\"to\"] == note_id",
                    "type": "line"
                },
                {
                    "text": "    ])",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-20T12:22:06.076900",
            "type": "code"
        },
        "2fbe7efc504d440094effd4f88d3981c": {
            "chunkpath": [
                "classes",
                "NoteDb"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def delete_note(self, note_id):",
                    "type": "line"
                },
                {
                    "text": "    self._ensure_note_id(note_id)",
                    "type": "line"
                },
                {
                    "text": "    new_notes = dict(self._get(\"notes\"))",
                    "type": "line"
                },
                {
                    "text": "    new_notes.pop(note_id)",
                    "type": "line"
                },
                {
                    "text": "    new_links = dict(self._get(\"links\"))",
                    "type": "line"
                },
                {
                    "text": "    dead_links = []",
                    "type": "line"
                },
                {
                    "text": "    for link_id, link in new_links.items():",
                    "type": "line"
                },
                {
                    "text": "        if link[\"to\"] == note_id or link[\"from\"] == note_id:",
                    "type": "line"
                },
                {
                    "text": "            dead_links.append(link_id)",
                    "type": "line"
                },
                {
                    "text": "    for link_id in dead_links:",
                    "type": "line"
                },
                {
                    "text": "        new_links.pop(link_id)",
                    "type": "line"
                },
                {
                    "text": "    self._replace(notes=new_notes, links=new_links)",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-20T12:22:06.077016",
            "type": "code"
        },
        "30096585cb4e4f0290bce0505032e629": {
            "links": [],
            "tags": [],
            "text": "Unicode input in text entry. For me to type \u00e5\u00e4\u00f6.\n",
            "timestamp_created": "2021-04-25T05:48:41.263302"
        },
        "31d3da1a8f834f5ab620aacf73de0940": {
            "links": [],
            "tags": [],
            "text": "Tedious to update all constructors.\n",
            "timestamp_created": "2021-04-25T05:50:15.764565"
        },
        "358a64bf3d1f4183b723bef10b10a412": {
            "links": [],
            "tags": [],
            "text": "Game loop vs. event driven redraw?\n",
            "timestamp_created": "2021-04-25T05:30:36.073863"
        },
        "3630311283704b878fd1b9ca4d3453f9": {
            "chunkpath": [
                "functions"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def write_json_file(path, value):",
                    "type": "line"
                },
                {
                    "text": "    with safe_write(path) as f:",
                    "type": "line"
                },
                {
                    "text": "        json.dump(value, f, indent=4, sort_keys=True)",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:54.186814",
            "type": "code"
        },
        "378ad330e3104287820d0abc9669577b": {
            "tags": [
                "title"
            ],
            "text": "Widget",
            "timestamp_created": "2021-06-19T07:27:53.163429"
        },
        "382b92a71e654628ad4c1b51bc4fe471": {
            "chunkpath": [
                "end-to-end"
            ],
            "filepath": [
                "test_smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def test_note_focused(self):",
                    "type": "line"
                },
                {
                    "text": "    self.driver.iteration(elapsed_ms=300+1)",
                    "type": "line"
                },
                {
                    "text": "    self.driver.iteration(events=[MouseMotionEvent((400, 300))], elapsed_ms=1)",
                    "type": "line"
                },
                {
                    "text": "    self.assert_drawn_image_is(\"network_note_focused.png\")",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.030085",
            "type": "code"
        },
        "38347e24de1c4e54b57cd05cce1dc113": {
            "chunkpath": [
                "classes",
                "NoteDb"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def create_note(self, **params):",
                    "type": "line"
                },
                {
                    "text": "    note_id = genid()",
                    "type": "line"
                },
                {
                    "text": "    self._replace(notes=dict(",
                    "type": "line"
                },
                {
                    "text": "        self._get(\"notes\"),",
                    "type": "line"
                },
                {
                    "text": "        **{note_id: dict(params, timestamp_created=utcnow_timestamp_string())}",
                    "type": "line"
                },
                {
                    "text": "    ))",
                    "type": "line"
                },
                {
                    "text": "    return note_id",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-20T12:22:06.076969",
            "type": "code"
        },
        "385ff0e82d6f450bb8a890ceb61cf3e3": {
            "chunkpath": [
                "classes",
                "NoteText"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def _parse_footer(self):",
                    "type": "line"
                },
                {
                    "text": "    data = {",
                    "type": "line"
                },
                {
                    "text": "        \"text\": \"\",",
                    "type": "line"
                },
                {
                    "text": "        \"links\": [],",
                    "type": "line"
                },
                {
                    "text": "        \"tags\": [],",
                    "type": "line"
                },
                {
                    "text": "        \"filepath\": [],",
                    "type": "line"
                },
                {
                    "text": "        \"chunkpath\": [],",
                    "type": "line"
                },
                {
                    "text": "    }",
                    "type": "line"
                },
                {
                    "text": "    parts = self.text.splitlines(True)",
                    "type": "line"
                },
                {
                    "text": "    if parts and parts.pop(-1).rstrip() == \"--\":",
                    "type": "line"
                },
                {
                    "text": "        while parts and parts[-1].rstrip() != \"--\":",
                    "type": "line"
                },
                {
                    "text": "            part = parts.pop(-1)",
                    "type": "line"
                },
                {
                    "text": "            if part.startswith(self.LINK_PREFIX):",
                    "type": "line"
                },
                {
                    "text": "                data[\"links\"].insert(0, part[len(self.LINK_PREFIX):].rstrip())",
                    "type": "line"
                },
                {
                    "text": "            elif part.startswith(self.TAG_PREFIX):",
                    "type": "line"
                },
                {
                    "text": "                data[\"tags\"].insert(0, part[len(self.TAG_PREFIX):].rstrip())",
                    "type": "line"
                },
                {
                    "text": "            elif part.startswith(self.FILEPATH_PREFIX):",
                    "type": "line"
                },
                {
                    "text": "                data[\"filepath\"] = [",
                    "type": "line"
                },
                {
                    "text": "                    x",
                    "type": "line"
                },
                {
                    "text": "                    for x",
                    "type": "line"
                },
                {
                    "text": "                    in part[len(self.FILEPATH_PREFIX):].rstrip().split(\"/\")",
                    "type": "line"
                },
                {
                    "text": "                    if x",
                    "type": "line"
                },
                {
                    "text": "                ]",
                    "type": "line"
                },
                {
                    "text": "            elif part.startswith(self.CHUNKPATH_PREFIX):",
                    "type": "line"
                },
                {
                    "text": "                data[\"chunkpath\"] = [",
                    "type": "line"
                },
                {
                    "text": "                    x",
                    "type": "line"
                },
                {
                    "text": "                    for x",
                    "type": "line"
                },
                {
                    "text": "                    in part[len(self.CHUNKPATH_PREFIX):].rstrip().split(\"/\")",
                    "type": "line"
                },
                {
                    "text": "                    if x",
                    "type": "line"
                },
                {
                    "text": "                ]",
                    "type": "line"
                },
                {
                    "text": "            elif part.startswith(\"#\"):",
                    "type": "line"
                },
                {
                    "text": "                pass",
                    "type": "line"
                },
                {
                    "text": "            else:",
                    "type": "line"
                },
                {
                    "text": "                raise ParseError(\"unknown field\")",
                    "type": "line"
                },
                {
                    "text": "        if parts:",
                    "type": "line"
                },
                {
                    "text": "            parts.pop(-1)",
                    "type": "line"
                },
                {
                    "text": "            while parts and parts[-1].strip() == \"\":",
                    "type": "line"
                },
                {
                    "text": "                parts.pop(-1)",
                    "type": "line"
                },
                {
                    "text": "            data[\"text\"] = \"\".join(parts)",
                    "type": "line"
                },
                {
                    "text": "            if data[\"filepath\"] or data[\"chunkpath\"]:",
                    "type": "line"
                },
                {
                    "text": "                data[\"type\"] = \"code\"",
                    "type": "line"
                },
                {
                    "text": "                data[\"splits\"] = self._text_to_code_fragments(data[\"text\"])",
                    "type": "line"
                },
                {
                    "text": "                data.pop(\"text\")",
                    "type": "line"
                },
                {
                    "text": "            else:",
                    "type": "line"
                },
                {
                    "text": "                data[\"type\"] = \"text\"",
                    "type": "line"
                },
                {
                    "text": "                data.pop(\"filepath\")",
                    "type": "line"
                },
                {
                    "text": "                data.pop(\"chunkpath\")",
                    "type": "line"
                },
                {
                    "text": "            return data",
                    "type": "line"
                },
                {
                    "text": "    raise ParseError(\"no footer found\")",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-20T12:27:02.675622",
            "type": "code"
        },
        "398ad55085fc451383e54a64291de937": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class LinkNotFound(ValueError):",
                    "type": "line"
                },
                {
                    "text": "    pass",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.866026",
            "type": "code"
        },
        "3c0c8700f3df48f993020e420ec4b125": {
            "tags": [
                "title"
            ],
            "text": "Table",
            "timestamp_created": "2021-06-19T07:27:52.696232"
        },
        "3d9747ab26b64a78a40915de14abec3c": {
            "chunkpath": [
                "base base classes",
                "BaseWidget",
                "interaction"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def process_event(self, event):",
                    "type": "line"
                },
                {
                    "text": "    if self.has_focus() and event.key_down():",
                    "type": "line"
                },
                {
                    "text": "        self.bubble_event(event)",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.429749",
            "type": "code"
        },
        "42a4037091bf4702988cebcc3b5c624d": {
            "links": [],
            "tags": [],
            "text": "Edit rendered files externally and merge/consolidate changes on save.\n",
            "timestamp_created": "2021-06-21T19:19:07.658675",
            "type": "text"
        },
        "42bff83e87e6458b90cae3be48449b9e": {
            "chunkpath": [
                "base classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class NoteBaseWidget(Widget):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, window, parent, db, overlay, note_id, settings):",
                    "type": "line"
                },
                {
                    "text": "        Widget.__init__(self, window, parent)",
                    "type": "line"
                },
                {
                    "text": "        self.db = db",
                    "type": "line"
                },
                {
                    "text": "        self.overlay = overlay",
                    "type": "line"
                },
                {
                    "text": "        self.note_id = note_id",
                    "type": "line"
                },
                {
                    "text": "        self.settings = settings",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def is_deleted(self):",
                    "type": "line"
                },
                {
                    "text": "        try:",
                    "type": "line"
                },
                {
                    "text": "            self.db.get_note_data(self.note_id)",
                    "type": "line"
                },
                {
                    "text": "            return False",
                    "type": "line"
                },
                {
                    "text": "        except NoteNotFound:",
                    "type": "line"
                },
                {
                    "text": "            return True",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def bubble_event(self, event):",
                    "type": "line"
                },
                {
                    "text": "        if event.key_down(KEY_EDIT_NOTE):",
                    "type": "line"
                },
                {
                    "text": "            self.clear_quick_focus()",
                    "type": "line"
                },
                {
                    "text": "            self.post_event(",
                    "type": "line"
                },
                {
                    "text": "                USER_EVENT_EXTERNAL_TEXT_ENTRY,",
                    "type": "line"
                },
                {
                    "text": "                entry=NoteText(self.db, self.note_id)",
                    "type": "line"
                },
                {
                    "text": "            )",
                    "type": "line"
                },
                {
                    "text": "        elif event.key_down(KEY_DELETE_NOTE):",
                    "type": "line"
                },
                {
                    "text": "            self.clear_quick_focus()",
                    "type": "line"
                },
                {
                    "text": "            self.db.delete_note(self.note_id)",
                    "type": "line"
                },
                {
                    "text": "        elif event.key_down(KEY_OPEN_LINKS):",
                    "type": "line"
                },
                {
                    "text": "            for link in self.db.get_note_data(self.note_id).get(\"links\", []):",
                    "type": "line"
                },
                {
                    "text": "                webbrowser.open(link)",
                    "type": "line"
                },
                {
                    "text": "        elif event.key_down(KEY_CREATE_NOTE):",
                    "type": "line"
                },
                {
                    "text": "            self.clear_quick_focus()",
                    "type": "line"
                },
                {
                    "text": "            with self.db.transaction():",
                    "type": "line"
                },
                {
                    "text": "                child_note_id = self.db.create_note(text=NEW_NOTE_TEXT)",
                    "type": "line"
                },
                {
                    "text": "                self.db.create_link(self.note_id, child_note_id)",
                    "type": "line"
                },
                {
                    "text": "            self.post_event(",
                    "type": "line"
                },
                {
                    "text": "                USER_EVENT_EXTERNAL_TEXT_ENTRY,",
                    "type": "line"
                },
                {
                    "text": "                entry=NoteText(self.db, child_note_id)",
                    "type": "line"
                },
                {
                    "text": "            )",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            Widget.bubble_event(self, event)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def process_event(self, event):",
                    "type": "line"
                },
                {
                    "text": "        if event.mouse_motion(rect=self.rect):",
                    "type": "line"
                },
                {
                    "text": "            self.overlay.set_link_target(self)",
                    "type": "line"
                },
                {
                    "text": "            self.quick_focus()",
                    "type": "line"
                },
                {
                    "text": "        if self.has_focus() and event.left_mouse_down(self.rect):",
                    "type": "line"
                },
                {
                    "text": "            self.overlay.set_link_source(self)",
                    "type": "line"
                },
                {
                    "text": "        elif self.has_focus() and event.left_mouse_up(self.rect):",
                    "type": "line"
                },
                {
                    "text": "            self.open_me()",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            Widget.process_event(self, event)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def update(self, rect, elapsed_ms):",
                    "type": "line"
                },
                {
                    "text": "        Widget.update(self, rect, elapsed_ms)",
                    "type": "line"
                },
                {
                    "text": "        self.data = self.db.get_note_data(self.note_id)",
                    "type": "line"
                },
                {
                    "text": "        self.full_width = self.settings.get_full_width()",
                    "type": "line"
                },
                {
                    "text": "        self.full_height = int(",
                    "type": "line"
                },
                {
                    "text": "            self.full_width * self.settings.get_height_width_ratio()",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "        self.card_full_size = (self.full_width, self.full_height)",
                    "type": "line"
                },
                {
                    "text": "        self.card_full_rect = pygame.Rect((0, 0), self.card_full_size)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def draw(self, canvas):",
                    "type": "line"
                },
                {
                    "text": "        border_size = 3",
                    "type": "line"
                },
                {
                    "text": "        border = self.rect.copy()",
                    "type": "line"
                },
                {
                    "text": "        border.width -= border_size",
                    "type": "line"
                },
                {
                    "text": "        border.height -= border_size",
                    "type": "line"
                },
                {
                    "text": "        border.x += border_size",
                    "type": "line"
                },
                {
                    "text": "        border.y += border_size",
                    "type": "line"
                },
                {
                    "text": "        canvas.fill_rect(border, color=(0, 0, 0, 50))",
                    "type": "line"
                },
                {
                    "text": "        border.x -= border_size",
                    "type": "line"
                },
                {
                    "text": "        border.y -= border_size",
                    "type": "line"
                },
                {
                    "text": "        canvas.fill_rect(border, color=COLOR_NOTE_BG)",
                    "type": "line"
                },
                {
                    "text": "        canvas.draw_rect(border, (0, 0, 0, 120), 1)",
                    "type": "line"
                },
                {
                    "text": "        canvas.blit(",
                    "type": "line"
                },
                {
                    "text": "            canvas.create_image(",
                    "type": "line"
                },
                {
                    "text": "                self.card_full_size,",
                    "type": "line"
                },
                {
                    "text": "                self._draw_card",
                    "type": "line"
                },
                {
                    "text": "            ),",
                    "type": "line"
                },
                {
                    "text": "            self.rect,",
                    "type": "line"
                },
                {
                    "text": "            scale_to_fit=self.rect.size",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "        Widget.draw(self, canvas)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_focus_rect(self):",
                    "type": "line"
                },
                {
                    "text": "        border_size = 3",
                    "type": "line"
                },
                {
                    "text": "        border = self.rect.copy()",
                    "type": "line"
                },
                {
                    "text": "        border.width -= border_size",
                    "type": "line"
                },
                {
                    "text": "        border.height -= border_size",
                    "type": "line"
                },
                {
                    "text": "        return border.inflate(-7, -7).move(1, 1).inflate(2, 2)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _draw_card(self, canvas):",
                    "type": "line"
                },
                {
                    "text": "        border = 8",
                    "type": "line"
                },
                {
                    "text": "        status_height = self.full_width/20",
                    "type": "line"
                },
                {
                    "text": "        rect = self.card_full_rect",
                    "type": "line"
                },
                {
                    "text": "        rect = rect.inflate(-border*4, -border*3-status_height)",
                    "type": "line"
                },
                {
                    "text": "        rect.top = border",
                    "type": "line"
                },
                {
                    "text": "        if DEBUG_NOTE_BORDER:",
                    "type": "line"
                },
                {
                    "text": "            canvas.draw_rect(rect, (200, 50, 50), 1)",
                    "type": "line"
                },
                {
                    "text": "        attributes = {",
                    "type": "line"
                },
                {
                    "text": "            \"textalign\": \"left\",",
                    "type": "line"
                },
                {
                    "text": "        }",
                    "type": "line"
                },
                {
                    "text": "        for tag in TAG_ATTRIBUTES:",
                    "type": "line"
                },
                {
                    "text": "            if tag[\"name\"] in self.data.get(\"tags\", []):",
                    "type": "line"
                },
                {
                    "text": "                for key in list(attributes.keys()):",
                    "type": "line"
                },
                {
                    "text": "                    if key in tag:",
                    "type": "line"
                },
                {
                    "text": "                        attributes[key] = tag[key]",
                    "type": "line"
                },
                {
                    "text": "        if self.data.get(\"type\", \"text\") == \"code\":",
                    "type": "line"
                },
                {
                    "text": "            header = rect.copy()",
                    "type": "line"
                },
                {
                    "text": "            header.height = status_height",
                    "type": "line"
                },
                {
                    "text": "            body = rect.copy()",
                    "type": "line"
                },
                {
                    "text": "            body.y += (header.height*1.5)",
                    "type": "line"
                },
                {
                    "text": "            body.height -= (header.height*1.5)",
                    "type": "line"
                },
                {
                    "text": "            canvas.render_text(",
                    "type": "line"
                },
                {
                    "text": "                \"{} - {}\".format(",
                    "type": "line"
                },
                {
                    "text": "                    \"/\".join(self.data[\"filepath\"]),",
                    "type": "line"
                },
                {
                    "text": "                    \"/\".join(self.data[\"chunkpath\"])",
                    "type": "line"
                },
                {
                    "text": "                ),",
                    "type": "line"
                },
                {
                    "text": "                header,",
                    "type": "line"
                },
                {
                    "text": "                size=self.full_width/12,",
                    "type": "line"
                },
                {
                    "text": "                textalign=\"left\",",
                    "type": "line"
                },
                {
                    "text": "                boxalign=\"topright\",",
                    "type": "line"
                },
                {
                    "text": "                color=COLOR_NOTE_TAG_TEXT,",
                    "type": "line"
                },
                {
                    "text": "                face=FONT_MONOSPACE,",
                    "type": "line"
                },
                {
                    "text": "                split=False",
                    "type": "line"
                },
                {
                    "text": "            )",
                    "type": "line"
                },
                {
                    "text": "            canvas.render_text(",
                    "type": "line"
                },
                {
                    "text": "                self._code_lines(self.data[\"fragments\"]),",
                    "type": "line"
                },
                {
                    "text": "                body,",
                    "type": "line"
                },
                {
                    "text": "                size=self.full_width/12,",
                    "type": "line"
                },
                {
                    "text": "                textalign=\"left\",",
                    "type": "line"
                },
                {
                    "text": "                boxalign=\"left\",",
                    "type": "line"
                },
                {
                    "text": "                color=COLOR_NOTE_TEXT,",
                    "type": "line"
                },
                {
                    "text": "                face=FONT_MONOSPACE,",
                    "type": "line"
                },
                {
                    "text": "                split=False",
                    "type": "line"
                },
                {
                    "text": "            )",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            canvas.render_text(",
                    "type": "line"
                },
                {
                    "text": "                self.data[\"text\"],",
                    "type": "line"
                },
                {
                    "text": "                rect,",
                    "type": "line"
                },
                {
                    "text": "                size=self.full_width/10,",
                    "type": "line"
                },
                {
                    "text": "                textalign=attributes[\"textalign\"],",
                    "type": "line"
                },
                {
                    "text": "                boxalign=\"center\",",
                    "type": "line"
                },
                {
                    "text": "                color=COLOR_NOTE_TEXT,",
                    "type": "line"
                },
                {
                    "text": "                face=FONT_TEXT",
                    "type": "line"
                },
                {
                    "text": "            )",
                    "type": "line"
                },
                {
                    "text": "        rect = rect.inflate(border*2, 0)",
                    "type": "line"
                },
                {
                    "text": "        rect.height = status_height",
                    "type": "line"
                },
                {
                    "text": "        rect.bottom = self.card_full_rect.bottom - border",
                    "type": "line"
                },
                {
                    "text": "        if DEBUG_NOTE_BORDER:",
                    "type": "line"
                },
                {
                    "text": "            canvas.draw_rect(rect, (200, 50, 50), 1)",
                    "type": "line"
                },
                {
                    "text": "        canvas.render_text(",
                    "type": "line"
                },
                {
                    "text": "            self.data[\"timestamp_created\"][:10],",
                    "type": "line"
                },
                {
                    "text": "            rect,",
                    "type": "line"
                },
                {
                    "text": "            size=status_height,",
                    "type": "line"
                },
                {
                    "text": "            face=FONT_MONOSPACE,",
                    "type": "line"
                },
                {
                    "text": "            boxalign=\"bottomleft\",",
                    "type": "line"
                },
                {
                    "text": "            split=False,",
                    "type": "line"
                },
                {
                    "text": "            color=COLOR_NOTE_DATE_TEXT",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "        tags = self.data.get(\"tags\", [])",
                    "type": "line"
                },
                {
                    "text": "        links = self.data.get(\"links\", [])",
                    "type": "line"
                },
                {
                    "text": "        if tags or links:",
                    "type": "line"
                },
                {
                    "text": "            right = rect.right",
                    "type": "line"
                },
                {
                    "text": "            rect.width -= (rect.height*1.3) * len(links)",
                    "type": "line"
                },
                {
                    "text": "            canvas.render_text(",
                    "type": "line"
                },
                {
                    "text": "                \" \".join(\"#{}\".format(tag) for tag in self.data[\"tags\"]),",
                    "type": "line"
                },
                {
                    "text": "                rect,",
                    "type": "line"
                },
                {
                    "text": "                size=status_height,",
                    "type": "line"
                },
                {
                    "text": "                face=FONT_MONOSPACE,",
                    "type": "line"
                },
                {
                    "text": "                boxalign=\"bottomright\",",
                    "type": "line"
                },
                {
                    "text": "                split=False,",
                    "type": "line"
                },
                {
                    "text": "                color=COLOR_NOTE_TAG_TEXT",
                    "type": "line"
                },
                {
                    "text": "            )",
                    "type": "line"
                },
                {
                    "text": "            rect.width = rect.height",
                    "type": "line"
                },
                {
                    "text": "            rect.right = right",
                    "type": "line"
                },
                {
                    "text": "            for link in links:",
                    "type": "line"
                },
                {
                    "text": "                canvas.draw_rect(",
                    "type": "line"
                },
                {
                    "text": "                    rect,",
                    "type": "line"
                },
                {
                    "text": "                    (50, 150, 50),",
                    "type": "line"
                },
                {
                    "text": "                    1",
                    "type": "line"
                },
                {
                    "text": "                )",
                    "type": "line"
                },
                {
                    "text": "                rect = rect.move(-rect.height*1.3, 0)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _code_lines(self, fragments):",
                    "type": "line"
                },
                {
                    "text": "        MAX = 15",
                    "type": "line"
                },
                {
                    "text": "        lines = []",
                    "type": "line"
                },
                {
                    "text": "        for fragment in fragments[:MAX]:",
                    "type": "line"
                },
                {
                    "text": "            if fragment[\"type\"] == \"chunk\":",
                    "type": "line"
                },
                {
                    "text": "                lines.append(\"{}<<{}>>\".format(",
                    "type": "line"
                },
                {
                    "text": "                    fragment[\"prefix\"],",
                    "type": "line"
                },
                {
                    "text": "                    \"/\".join(fragment[\"path\"])",
                    "type": "line"
                },
                {
                    "text": "                ))",
                    "type": "line"
                },
                {
                    "text": "            else:",
                    "type": "line"
                },
                {
                    "text": "                lines.append(\"{}\".format(",
                    "type": "line"
                },
                {
                    "text": "                    fragment[\"text\"],",
                    "type": "line"
                },
                {
                    "text": "                ))",
                    "type": "line"
                },
                {
                    "text": "        if len(fragments) > MAX:",
                    "type": "line"
                },
                {
                    "text": "            lines.append(\"...\")",
                    "type": "line"
                },
                {
                    "text": "        return \"\\n\".join(lines)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _get_target(self, alotted_rect, align=\"center\"):",
                    "type": "line"
                },
                {
                    "text": "        target = self.card_full_rect",
                    "type": "line"
                },
                {
                    "text": "        target = target.fit(alotted_rect)",
                    "type": "line"
                },
                {
                    "text": "        if align == \"left\":",
                    "type": "line"
                },
                {
                    "text": "            target.midright = alotted_rect.midright",
                    "type": "line"
                },
                {
                    "text": "        elif align == \"right\":",
                    "type": "line"
                },
                {
                    "text": "            target.midleft = alotted_rect.midleft",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            target.center = alotted_rect.center",
                    "type": "line"
                },
                {
                    "text": "        return target",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_link_source_point(self):",
                    "type": "line"
                },
                {
                    "text": "        return self.rect.center",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def hit_test(self, pos):",
                    "type": "line"
                },
                {
                    "text": "        return self.rect.collidepoint(pos)",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.800620",
            "type": "code"
        },
        "42fc6bb887984f2780bacd47e8fb3e08": {
            "tags": [
                "title"
            ],
            "text": "Smart Notes Widget",
            "timestamp_created": "2021-06-19T07:27:52.616173"
        },
        "43249a90aee8449d8161c78c17088563": {
            "chunkpath": [
                "functions"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def main():",
                    "type": "line"
                },
                {
                    "text": "    if len(sys.argv) < 2:",
                    "type": "line"
                },
                {
                    "text": "        sys.exit(\"Usage: smartnotes.py <file>\")",
                    "type": "line"
                },
                {
                    "text": "    pygame_main(",
                    "type": "line"
                },
                {
                    "text": "        SmartNotesWidget,",
                    "type": "line"
                },
                {
                    "text": "        sys.argv[1]",
                    "type": "line"
                },
                {
                    "text": "    )",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.614969",
            "type": "code"
        },
        "496c510e4c784026a572152da104e3b2": {
            "links": [],
            "tags": [],
            "text": "Better line breaks in text rendering.\n",
            "timestamp_created": "2021-04-25T05:32:55.454854"
        },
        "4bc36929a07a46bc9fd7c691f4e93be4": {
            "links": [],
            "tags": [],
            "text": "Ability to change order of child notes.\n",
            "timestamp_created": "2021-04-25T06:19:59.542463"
        },
        "4bcbb415da1849dca277963f4d3354bc": {
            "links": [],
            "tags": [],
            "text": "Note body is formatted with markdown and markup is sent to text rendering.\n",
            "timestamp_created": "2021-04-25T05:47:51.914362"
        },
        "4c0302cbb5774082aa8f7929378dc999": {
            "chunkpath": [
                "base base classes",
                "BaseWidget",
                "interaction"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def bubble_event(self, event):",
                    "type": "line"
                },
                {
                    "text": "    if self._parent:",
                    "type": "line"
                },
                {
                    "text": "        self._parent.bubble_event(event)",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.489523",
            "type": "code"
        },
        "5055f50fea9241ffaf34adf03f78ae34": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class NoteNotFound(ValueError):",
                    "type": "line"
                },
                {
                    "text": "    pass",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.852081",
            "type": "code"
        },
        "5113375cfc3f4d62ae828a31baf28344": {
            "links": [],
            "tags": [
                "title"
            ],
            "text": "Implementation\n",
            "timestamp_created": "2021-06-20T10:32:29.872999",
            "type": "text"
        },
        "5115170d4f7747c2a4fb0a20eab851aa": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class NoteSettings:",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, **kwargs):",
                    "type": "line"
                },
                {
                    "text": "        self.set_full_width(kwargs.get(\"full_width\", 200))",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_full_width(self):",
                    "type": "line"
                },
                {
                    "text": "        return max(100, self.full_width)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def set_full_width(self, full_width):",
                    "type": "line"
                },
                {
                    "text": "        self.full_width = full_width",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_height_width_ratio(self):",
                    "type": "line"
                },
                {
                    "text": "        return 3/5",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.813153",
            "type": "code"
        },
        "51b4a680f3b741b7ae3d407bcbfaa6a4": {
            "tags": [
                "title"
            ],
            "text": "Note Database",
            "timestamp_created": "2021-06-19T07:27:52.825734"
        },
        "51ee3d6700744fbab1b1371fdc800190": {
            "links": [],
            "tags": [],
            "text": "Make sure file writing/consolidation works when there is no file and when directories are lacking.\n",
            "timestamp_created": "2021-06-21T05:42:54.884089",
            "type": "text"
        },
        "527270aa4bd14cf1b5388d0d63ad53bd": {
            "links": [],
            "tags": [
                "title"
            ],
            "text": "Event System\n",
            "timestamp_created": "2021-04-25T05:51:03.299263"
        },
        "53a84227ad3d4098b46c22d634dc25de": {
            "links": [],
            "tags": [],
            "text": "Draw me first, then draw children/base.\n",
            "timestamp_created": "2021-04-25T04:49:26.906476"
        },
        "564ab377fbcc454ba8aff7bedde91fe8": {
            "links": [],
            "tags": [],
            "text": "Draw link icon instead of rectangle.\n",
            "timestamp_created": "2021-04-25T05:30:59.664629"
        },
        "569e73cef808401fb3282b7f47b9a41d": {
            "links": [],
            "tags": [],
            "text": "Feature idea: Pin feature. Notes can be pinned so they wont disappear when navigating. Kind of like a search bar that has a search for \"pinned\".\n",
            "timestamp_created": "2021-05-24T19:59:25.057776"
        },
        "586475030d3a4ea5bade4e61a34f4dd2": {
            "chunkpath": [
                "classes",
                "NoteDb"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def _create_virtual_links(self):",
                    "type": "line"
                },
                {
                    "text": "    self.virtual_links = {}",
                    "type": "line"
                },
                {
                    "text": "    code_notes = []",
                    "type": "line"
                },
                {
                    "text": "    parts = defaultdict(list)",
                    "type": "line"
                },
                {
                    "text": "    for note_id, note in reversed(self.get_notes()):",
                    "type": "line"
                },
                {
                    "text": "        if note.get(\"type\", None) == \"code\":",
                    "type": "line"
                },
                {
                    "text": "            key = (tuple(note[\"filepath\"]), tuple(note[\"chunkpath\"]))",
                    "type": "line"
                },
                {
                    "text": "            parts[key].append((note_id, note[\"fragments\"]))",
                    "type": "line"
                },
                {
                    "text": "            code_notes.append((note_id, note))",
                    "type": "line"
                },
                {
                    "text": "    for note_id, note in code_notes:",
                    "type": "line"
                },
                {
                    "text": "        for fragment in note[\"fragments\"]:",
                    "type": "line"
                },
                {
                    "text": "            if fragment[\"type\"] == \"chunk\":",
                    "type": "line"
                },
                {
                    "text": "                for (child_note_id, _) in parts[(",
                    "type": "line"
                },
                {
                    "text": "                    tuple(note[\"filepath\"]),",
                    "type": "line"
                },
                {
                    "text": "                    tuple(note[\"chunkpath\"]+fragment[\"path\"])",
                    "type": "line"
                },
                {
                    "text": "                )]:",
                    "type": "line"
                },
                {
                    "text": "                    self.virtual_links[genid()] = {",
                    "type": "line"
                },
                {
                    "text": "                        \"from\": note_id,",
                    "type": "line"
                },
                {
                    "text": "                        \"to\": child_note_id,",
                    "type": "line"
                },
                {
                    "text": "                        \"timestamp_created\": utcnow_timestamp_string(),",
                    "type": "line"
                },
                {
                    "text": "                        \"virtual\": True,",
                    "type": "line"
                },
                {
                    "text": "                    }",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-20T12:22:06.076854",
            "type": "code"
        },
        "58b1b56e5208481a8732c664d989bfe8": {
            "text": "It calculates a rect for each child and calls `child.update` with the new rect.",
            "timestamp_created": "2021-06-19T07:27:53.372159"
        },
        "5aa33f5f89b343b690209ac5ae1aaa79": {
            "links": [],
            "tags": [
                "title"
            ],
            "text": "Table View\n",
            "timestamp_created": "2021-04-25T04:43:11.976456"
        },
        "5ad55d51dad84960bda16db55ffb5115": {
            "chunkpath": [
                "functions"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def create_pygame_cairo_surface(screen):",
                    "type": "line"
                },
                {
                    "text": "    return pygame.Surface(",
                    "type": "line"
                },
                {
                    "text": "        screen.get_size(),",
                    "type": "line"
                },
                {
                    "text": "        depth=32,",
                    "type": "line"
                },
                {
                    "text": "        masks=(",
                    "type": "line"
                },
                {
                    "text": "            0x00FF0000,",
                    "type": "line"
                },
                {
                    "text": "            0x0000FF00,",
                    "type": "line"
                },
                {
                    "text": "            0x000000FF,",
                    "type": "line"
                },
                {
                    "text": "            0x00000000,",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "    )",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.900624",
            "type": "code"
        },
        "5c0bc7f27f96430ca58c9ab51a77992a": {
            "links": [],
            "tags": [],
            "text": "Improve fish eye effect: no blank vertical space.\n",
            "timestamp_created": "2021-04-25T05:33:10.313795"
        },
        "5d02a07589c84bb6a913b5d99708c603": {
            "tags": [
                "title"
            ],
            "text": "JSON",
            "timestamp_created": "2021-06-19T07:27:54.133922"
        },
        "5d81e13c3cb9476da21aac3f66c239f7": {
            "tags": [
                "title"
            ],
            "text": "Network",
            "timestamp_created": "2021-06-19T07:27:52.653421"
        },
        "5dd5dd9cd98245af954272bc602f395f": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class ParseError(ValueError):",
                    "type": "line"
                },
                {
                    "text": "    pass",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.937426",
            "type": "code"
        },
        "5e9dea2ec8a14dea8d0c4cee558101bf": {
            "tags": [
                "title"
            ],
            "text": "Overlay Widget",
            "timestamp_created": "2021-06-19T07:27:52.746989"
        },
        "5f9f0bdfc3994d45ba06f46242f42dd4": {
            "links": [],
            "tags": [],
            "text": "Open search results in table view?\n",
            "timestamp_created": "2021-04-25T05:41:28.765702"
        },
        "601cade7d7c8406f97745cfcf3811b50": {
            "links": [],
            "tags": [],
            "text": "Add Widget.register_event_handler(predicate, action).\n",
            "timestamp_created": "2021-04-25T05:51:19.736856"
        },
        "607b61604277474f977cb173f78f450e": {
            "chunkpath": [
                "classes",
                "NoteDb"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def _ensure_link_id(self, link_id):",
                    "type": "line"
                },
                {
                    "text": "    if link_id not in self._get(\"links\"):",
                    "type": "line"
                },
                {
                    "text": "        raise LinkNotFound(str(link_id))",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-20T12:22:06.077117",
            "type": "code"
        },
        "61897cd565d84372bd561681d67dd702": {
            "chunkpath": [
                "classes",
                "NoteDb"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def get_notes(self, expression=\"\"):",
                    "type": "line"
                },
                {
                    "text": "    def match(item):",
                    "type": "line"
                },
                {
                    "text": "        lower_text = item[\"text\"].lower()",
                    "type": "line"
                },
                {
                    "text": "        for part in expression.split(\" \"):",
                    "type": "line"
                },
                {
                    "text": "            if part.startswith(\"#\"):",
                    "type": "line"
                },
                {
                    "text": "                tagpart = part[1:]",
                    "type": "line"
                },
                {
                    "text": "                for tag in item.get(\"tags\", []):",
                    "type": "line"
                },
                {
                    "text": "                    if tagpart in tag:",
                    "type": "line"
                },
                {
                    "text": "                        break",
                    "type": "line"
                },
                {
                    "text": "                else:",
                    "type": "line"
                },
                {
                    "text": "                    return False",
                    "type": "line"
                },
                {
                    "text": "            else:",
                    "type": "line"
                },
                {
                    "text": "                if part.lower() not in lower_text:",
                    "type": "line"
                },
                {
                    "text": "                    return False",
                    "type": "line"
                },
                {
                    "text": "        return True",
                    "type": "line"
                },
                {
                    "text": "    return sorted(",
                    "type": "line"
                },
                {
                    "text": "        (",
                    "type": "line"
                },
                {
                    "text": "            item",
                    "type": "line"
                },
                {
                    "text": "            for item in self._get(\"notes\").items()",
                    "type": "line"
                },
                {
                    "text": "            if match(item[1])",
                    "type": "line"
                },
                {
                    "text": "        ),",
                    "type": "line"
                },
                {
                    "text": "        key=lambda item: item[1][\"timestamp_created\"],",
                    "type": "line"
                },
                {
                    "text": "        reverse=True",
                    "type": "line"
                },
                {
                    "text": "    )",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-20T12:22:06.076785",
            "type": "code"
        },
        "649a10bfa42a46a8b72a14a20dbf700d": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class TableWidget(Widget):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, window, parent, db, overlay, note_settings):",
                    "type": "line"
                },
                {
                    "text": "        Widget.__init__(self, window, parent)",
                    "type": "line"
                },
                {
                    "text": "        self.db = db",
                    "type": "line"
                },
                {
                    "text": "        self.overlay = overlay",
                    "type": "line"
                },
                {
                    "text": "        self.note_settings = note_settings",
                    "type": "line"
                },
                {
                    "text": "        self.notes = []",
                    "type": "line"
                },
                {
                    "text": "        self.by_id = {}",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def process_event(self, event):",
                    "type": "line"
                },
                {
                    "text": "        for note in self.notes:",
                    "type": "line"
                },
                {
                    "text": "            note.process_event(event)",
                    "type": "line"
                },
                {
                    "text": "        Widget.process_event(self, event)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def open_note(self, note_id):",
                    "type": "line"
                },
                {
                    "text": "        self.note_id = note_id",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def update(self, rect, elapsed_ms):",
                    "type": "line"
                },
                {
                    "text": "        self._update_notes_list()",
                    "type": "line"
                },
                {
                    "text": "        self._layout(rect, elapsed_ms)",
                    "type": "line"
                },
                {
                    "text": "        Widget.update(self, rect, elapsed_ms)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def draw(self, canvas):",
                    "type": "line"
                },
                {
                    "text": "        for note in self.notes:",
                    "type": "line"
                },
                {
                    "text": "            note.draw(canvas)",
                    "type": "line"
                },
                {
                    "text": "        Widget.draw(self, canvas)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _update_notes_list(self):",
                    "type": "line"
                },
                {
                    "text": "        by_id = {}",
                    "type": "line"
                },
                {
                    "text": "        self.notes.clear()",
                    "type": "line"
                },
                {
                    "text": "        for note_id in self.db.get_children(self.note_id):",
                    "type": "line"
                },
                {
                    "text": "            if note_id in self.by_id:",
                    "type": "line"
                },
                {
                    "text": "                note = self.by_id[note_id]",
                    "type": "line"
                },
                {
                    "text": "            else:",
                    "type": "line"
                },
                {
                    "text": "                note = self.instantiate(",
                    "type": "line"
                },
                {
                    "text": "                    TableNote,",
                    "type": "line"
                },
                {
                    "text": "                    self.db,",
                    "type": "line"
                },
                {
                    "text": "                    self.overlay,",
                    "type": "line"
                },
                {
                    "text": "                    self.note_settings,",
                    "type": "line"
                },
                {
                    "text": "                    note_id,",
                    "type": "line"
                },
                {
                    "text": "                    self.open_note",
                    "type": "line"
                },
                {
                    "text": "                )",
                    "type": "line"
                },
                {
                    "text": "            self.notes.append(note)",
                    "type": "line"
                },
                {
                    "text": "            by_id[note_id] = note",
                    "type": "line"
                },
                {
                    "text": "        self.by_id = by_id",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _layout(self, rect, elapsed_ms):",
                    "type": "line"
                },
                {
                    "text": "        if not self.notes:",
                    "type": "line"
                },
                {
                    "text": "            return",
                    "type": "line"
                },
                {
                    "text": "        rows = 1",
                    "type": "line"
                },
                {
                    "text": "        ratio = None",
                    "type": "line"
                },
                {
                    "text": "        fit_box = None",
                    "type": "line"
                },
                {
                    "text": "        notes_per_row = None",
                    "type": "line"
                },
                {
                    "text": "        while True:",
                    "type": "line"
                },
                {
                    "text": "            new_notes_per_row = math.ceil(len(self.notes) / rows)",
                    "type": "line"
                },
                {
                    "text": "            ideal_box = pygame.Rect(",
                    "type": "line"
                },
                {
                    "text": "                0,",
                    "type": "line"
                },
                {
                    "text": "                0,",
                    "type": "line"
                },
                {
                    "text": "                self.note_settings.get_full_width() * new_notes_per_row,",
                    "type": "line"
                },
                {
                    "text": "                self.note_settings.get_full_width() * self.note_settings.get_height_width_ratio() * rows",
                    "type": "line"
                },
                {
                    "text": "            )",
                    "type": "line"
                },
                {
                    "text": "            new_fit_box = ideal_box.fit(rect)",
                    "type": "line"
                },
                {
                    "text": "            new_ratio = new_fit_box.width / ideal_box.width",
                    "type": "line"
                },
                {
                    "text": "            if new_ratio > 1:",
                    "type": "line"
                },
                {
                    "text": "                new_fit_box = ideal_box",
                    "type": "line"
                },
                {
                    "text": "                new_ratio = 1",
                    "type": "line"
                },
                {
                    "text": "            new_fit_box.center = rect.center",
                    "type": "line"
                },
                {
                    "text": "            if ratio is None or new_ratio > ratio:",
                    "type": "line"
                },
                {
                    "text": "                ratio = new_ratio",
                    "type": "line"
                },
                {
                    "text": "                fit_box = new_fit_box",
                    "type": "line"
                },
                {
                    "text": "                notes_per_row = new_notes_per_row",
                    "type": "line"
                },
                {
                    "text": "                rows += 1",
                    "type": "line"
                },
                {
                    "text": "            else:",
                    "type": "line"
                },
                {
                    "text": "                break",
                    "type": "line"
                },
                {
                    "text": "        w = self.note_settings.get_full_width() * ratio",
                    "type": "line"
                },
                {
                    "text": "        h = self.note_settings.get_full_width() * self.note_settings.get_height_width_ratio() * ratio",
                    "type": "line"
                },
                {
                    "text": "        row = 0",
                    "type": "line"
                },
                {
                    "text": "        col = 0",
                    "type": "line"
                },
                {
                    "text": "        for note in self.notes:",
                    "type": "line"
                },
                {
                    "text": "            if col == notes_per_row:",
                    "type": "line"
                },
                {
                    "text": "                col = 0",
                    "type": "line"
                },
                {
                    "text": "                row += 1",
                    "type": "line"
                },
                {
                    "text": "            note.update(",
                    "type": "line"
                },
                {
                    "text": "                pygame.Rect(",
                    "type": "line"
                },
                {
                    "text": "                    fit_box.x+w*col,",
                    "type": "line"
                },
                {
                    "text": "                    fit_box.y+h*row,",
                    "type": "line"
                },
                {
                    "text": "                    w,",
                    "type": "line"
                },
                {
                    "text": "                    h",
                    "type": "line"
                },
                {
                    "text": "                ),",
                    "type": "line"
                },
                {
                    "text": "                elapsed_ms",
                    "type": "line"
                },
                {
                    "text": "            )",
                    "type": "line"
                },
                {
                    "text": "            col += 1",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.705079",
            "type": "code"
        },
        "658f97b5683d4343a6021ffce9d57186": {
            "chunkpath": [
                "classes",
                "NoteDb"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def collect_lines(self, lines, file, chunk, parts, prefix=\"\", blank_lines_before=0):",
                    "type": "line"
                },
                {
                    "text": "    for index, (note_id, fragments) in enumerate(parts.get((file, chunk), [])):",
                    "type": "line"
                },
                {
                    "text": "        if index > 0:",
                    "type": "line"
                },
                {
                    "text": "            for foo in range(blank_lines_before):",
                    "type": "line"
                },
                {
                    "text": "                lines.append((None, \"\"))",
                    "type": "line"
                },
                {
                    "text": "        for fragment_index, fragment in enumerate(fragments):",
                    "type": "line"
                },
                {
                    "text": "            if fragment[\"type\"] == \"line\":",
                    "type": "line"
                },
                {
                    "text": "                if fragment[\"text\"]:",
                    "type": "line"
                },
                {
                    "text": "                    lines.append(((note_id, prefix, fragment_index), prefix+fragment[\"text\"]))",
                    "type": "line"
                },
                {
                    "text": "                else:",
                    "type": "line"
                },
                {
                    "text": "                    lines.append(((note_id, prefix, fragment_index), \"\"))",
                    "type": "line"
                },
                {
                    "text": "            elif fragment[\"type\"] == \"chunk\":",
                    "type": "line"
                },
                {
                    "text": "                self.collect_lines(",
                    "type": "line"
                },
                {
                    "text": "                    lines,",
                    "type": "line"
                },
                {
                    "text": "                    file,",
                    "type": "line"
                },
                {
                    "text": "                    tuple(list(chunk)+fragment[\"path\"]),",
                    "type": "line"
                },
                {
                    "text": "                    parts,",
                    "type": "line"
                },
                {
                    "text": "                    prefix=prefix+fragment[\"prefix\"],",
                    "type": "line"
                },
                {
                    "text": "                    blank_lines_before=fragment[\"blank_lines_before\"],",
                    "type": "line"
                },
                {
                    "text": "                )",
                    "type": "line"
                },
                {
                    "text": "            else:",
                    "type": "line"
                },
                {
                    "text": "                raise ValueError(f\"Unknown code fragment type {fragment['type']}\")",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-20T12:22:06.076763",
            "type": "code"
        },
        "663b1555bdd643f6a873ee3d75c0fa1f": {
            "tags": [
                "title"
            ],
            "text": "Format Title",
            "timestamp_created": "2021-06-19T07:27:54.240113"
        },
        "6c2567819e8447e28ce339e4cda01a94": {
            "links": [],
            "tags": [],
            "text": "post_event should be removed from Widget somehow so that\nit does not depend on pygame.\n",
            "timestamp_created": "2021-04-25T05:32:02.572738"
        },
        "6d32f7de8be84e77b04741a09671721b": {
            "links": [],
            "tags": [],
            "text": "Own Rect/Point implementation so that application does not depend on pygame.\n",
            "timestamp_created": "2021-04-25T04:58:08.635867"
        },
        "6d564d8cb2fa425381dfc90108774372": {
            "chunkpath": [
                "functions"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "@contextlib.contextmanager",
                    "type": "line"
                },
                {
                    "text": "def safe_write(path):",
                    "type": "line"
                },
                {
                    "text": "    tmp_path = f\"{path}.tmp\"",
                    "type": "line"
                },
                {
                    "text": "    with open(tmp_path, \"w\") as f:",
                    "type": "line"
                },
                {
                    "text": "        yield f",
                    "type": "line"
                },
                {
                    "text": "    os.rename(tmp_path, path)",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:54.213519",
            "type": "code"
        },
        "6de5ccbebfc9457e99ac7d0365ca6f53": {
            "links": [],
            "tags": [],
            "text": "It is possible to create invalid event sequences in end-to-end tests. For example mouse move + mouse up in a different location.\n",
            "timestamp_created": "2021-05-22T09:35:38.693453",
            "type": "text"
        },
        "6f1c3a8cf62d4199952ee29aa0f13ea7": {
            "chunkpath": [
                "classes",
                "NoteDb"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def _data_changed(self):",
                    "type": "line"
                },
                {
                    "text": "    write_json_file(self.path, self._get())",
                    "type": "line"
                },
                {
                    "text": "    self.write_files()",
                    "type": "line"
                },
                {
                    "text": "    self._create_virtual_links()",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-20T12:22:06.077157",
            "type": "code"
        },
        "6f2696b9761a45d48b44f77888167531": {
            "links": [],
            "tags": [],
            "text": "Can we write out the file again here so that we don't accidentally create lots of split notes?\n",
            "timestamp_created": "2021-06-20T12:30:05.662734",
            "type": "text"
        },
        "726500679d284eb494c0900f5c305cda": {
            "links": [],
            "tags": [
                "title"
            ],
            "text": "Widget Framework\n",
            "timestamp_created": "2021-04-25T04:57:44.002037"
        },
        "7304d987b32245018eb1ad58d0685c89": {
            "chunkpath": [
                "end-to-end"
            ],
            "filepath": [
                "test_smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def test_link_lines(self):",
                    "type": "line"
                },
                {
                    "text": "    self.driver.iteration(events=[KeyEvent(\"/\")], elapsed_ms=200+MS_PER_FRAME+1)",
                    "type": "line"
                },
                {
                    "text": "    self.assert_drawn_image_is(\"search_bar_animation_completed.png\")",
                    "type": "line"
                },
                {
                    "text": "    self.driver.iteration(events=[",
                    "type": "line"
                },
                {
                    "text": "        MouseMotionEvent((400, 300)),",
                    "type": "line"
                },
                {
                    "text": "        LeftMouseDownEvent((400, 300)),",
                    "type": "line"
                },
                {
                    "text": "        MouseMotionEvent((200, 200)),",
                    "type": "line"
                },
                {
                    "text": "    ], elapsed_ms=MS_PER_FRAME+1)",
                    "type": "line"
                },
                {
                    "text": "    self.assert_drawn_image_is(\"link_network_to_none.png\")",
                    "type": "line"
                },
                {
                    "text": "    self.driver.iteration(events=[",
                    "type": "line"
                },
                {
                    "text": "        MouseMotionEvent((200, 360)),",
                    "type": "line"
                },
                {
                    "text": "    ], elapsed_ms=MS_PER_FRAME+1)",
                    "type": "line"
                },
                {
                    "text": "    self.assert_drawn_image_is(\"link_network_to_network.png\")",
                    "type": "line"
                },
                {
                    "text": "    self.driver.iteration(events=[",
                    "type": "line"
                },
                {
                    "text": "        MouseMotionEvent((150, 80)),",
                    "type": "line"
                },
                {
                    "text": "    ], elapsed_ms=MS_PER_FRAME+1)",
                    "type": "line"
                },
                {
                    "text": "    self.assert_drawn_image_is(\"link_network_to_search.png\")",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.061172",
            "type": "code"
        },
        "73bd50be44c24e0198e725a0ff9c56df": {
            "links": [],
            "tags": [],
            "text": "Draw incoming arrow on links between notes.\n",
            "timestamp_created": "2021-04-25T05:43:48.840082"
        },
        "747762cbc02d47dba2225e680da2b6a3": {
            "chunkpath": [
                "classes",
                "NoteDb"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def _replace(self, **kwargs):",
                    "type": "line"
                },
                {
                    "text": "    self._set(dict(self._get(), **kwargs))",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-20T12:22:06.077138",
            "type": "code"
        },
        "7750cba42afa49e2bc1ff1765d005014": {
            "links": [],
            "tags": [
                "title"
            ],
            "text": "Text Entry\n",
            "timestamp_created": "2021-04-25T05:49:45.269139"
        },
        "77d4ac1d46e547a8b8b997ebc4296f71": {
            "links": [],
            "tags": [],
            "text": "Closing search should focus network/table.\n",
            "timestamp_created": "2021-04-25T05:36:57.056129"
        },
        "7887a860b3e84b8183630dc4b8effb5d": {
            "chunkpath": [
                "classes",
                "NoteDb"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def _links(self):",
                    "type": "line"
                },
                {
                    "text": "    yield from self._get(\"links\").items()",
                    "type": "line"
                },
                {
                    "text": "    yield from self.virtual_links.items()",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-20T12:22:06.076923",
            "type": "code"
        },
        "79b1ae3dad3c44a285b57fb88b01e561": {
            "text": "<unordered list>",
            "timestamp_created": "2021-06-19T07:27:53.334170"
        },
        "7d0dd1cbe8174b6a9be503e9206c25bb": {
            "chunkpath": [
                "functions"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def utcnow_timestamp_string():",
                    "type": "line"
                },
                {
                    "text": "    return datetime.datetime.utcnow().isoformat()",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.894362",
            "type": "code"
        },
        "7d30e52fce194eee91cae8dc92df8f82": {
            "chunkpath": [
                "classes",
                "NoteDb"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def write_files(self):",
                    "type": "line"
                },
                {
                    "text": "    parts = self.collect_parts()",
                    "type": "line"
                },
                {
                    "text": "    for (file, chunk) in parts.keys():",
                    "type": "line"
                },
                {
                    "text": "        if file != tuple() and chunk == tuple():",
                    "type": "line"
                },
                {
                    "text": "            with open(os.path.join(*file), \"w\") as f:",
                    "type": "line"
                },
                {
                    "text": "                f.write(self.collect(file, chunk, parts))",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-20T12:22:06.076580",
            "type": "code"
        },
        "7d7f4a4f4b894086ace8287b083ab4f1": {
            "chunkpath": [
                "base classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class TextField(Widget):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, window, parent, text_changed_callback, text_size=10, **kwargs):",
                    "type": "line"
                },
                {
                    "text": "        Widget.__init__(self, window, parent, **kwargs)",
                    "type": "line"
                },
                {
                    "text": "        self.text_size = text_size",
                    "type": "line"
                },
                {
                    "text": "        self.text = \"\"",
                    "type": "line"
                },
                {
                    "text": "        self.text_changed_callback = text_changed_callback",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def set_text(self, text):",
                    "type": "line"
                },
                {
                    "text": "        self.text = text",
                    "type": "line"
                },
                {
                    "text": "        self.text_changed_callback(text)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def process_event(self, event):",
                    "type": "line"
                },
                {
                    "text": "        if self.has_focus() and event.key_down_text():",
                    "type": "line"
                },
                {
                    "text": "            self.set_text(self.text + event.key_down_text())",
                    "type": "line"
                },
                {
                    "text": "        elif event.left_mouse_up(rect=self.get_used_rect()):",
                    "type": "line"
                },
                {
                    "text": "            self.focus()",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            Widget.process_event(self, event)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def draw(self, canvas):",
                    "type": "line"
                },
                {
                    "text": "        canvas.fill_rect(",
                    "type": "line"
                },
                {
                    "text": "            self.get_used_rect(),",
                    "type": "line"
                },
                {
                    "text": "            (250, 250, 250)",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "        canvas.render_text(",
                    "type": "line"
                },
                {
                    "text": "            \"{}\\u2302\".format(self.text),",
                    "type": "line"
                },
                {
                    "text": "            self.get_used_rect().inflate(-4, -4),",
                    "type": "line"
                },
                {
                    "text": "            face=FONT_MONOSPACE,",
                    "type": "line"
                },
                {
                    "text": "            size=self.text_size,",
                    "type": "line"
                },
                {
                    "text": "            boxalign=\"midleft\"",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "        Widget.draw(self, canvas)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_focus_rect(self):",
                    "type": "line"
                },
                {
                    "text": "        return self.get_used_rect().inflate(",
                    "type": "line"
                },
                {
                    "text": "            self.get_focus_rect_size(),",
                    "type": "line"
                },
                {
                    "text": "            self.get_focus_rect_size()",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.652908",
            "type": "code"
        },
        "7d91624b3a4a4e77bd07f15eca46c8bf": {
            "tags": [
                "title"
            ],
            "text": "Animation",
            "timestamp_created": "2021-06-19T07:27:53.674343"
        },
        "8084d282c0c8444a97105a26c6027cee": {
            "chunkpath": [
                "classes",
                "NoteDb"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def get_children(self, note_id):",
                    "type": "line"
                },
                {
                    "text": "    for link_id, link in self.get_outgoing_links(note_id):",
                    "type": "line"
                },
                {
                    "text": "        yield link[\"to\"]",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-20T12:22:06.076831",
            "type": "code"
        },
        "81c03dd935934f6988dbe6800d2a0013": {
            "links": [],
            "tags": [],
            "text": "Show number of hidden search results?\n",
            "timestamp_created": "2021-04-25T05:42:56.114921"
        },
        "81f4feec6d454ca2a2a12ff427db17dc": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class NoteText(ExternalTextEntry):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    LINK_PREFIX = \"link: \"",
                    "type": "line"
                },
                {
                    "text": "    TAG_PREFIX = \"tag: \"",
                    "type": "line"
                },
                {
                    "text": "    FILEPATH_PREFIX = \"filepath: \"",
                    "type": "line"
                },
                {
                    "text": "    CHUNKPATH_PREFIX = \"chunkpath: \"",
                    "type": "line"
                },
                {
                    "text": "    SPLIT_SYNAX = \"<<SPLIT>>\"",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "blank_lines_before": 1,
                    "path": [
                        "NoteText"
                    ],
                    "prefix": "    ",
                    "type": "chunk"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.922483",
            "type": "code"
        },
        "8756fd317b514afab3bbba8fb325a785": {
            "links": [],
            "tags": [],
            "text": "NoteBaseWidget's border_size=3 should be named and extracted.\n",
            "timestamp_created": "2021-04-25T04:45:20.235622"
        },
        "889c916805794455ad9dcd84db142557": {
            "links": [],
            "tags": [],
            "text": "Never override constructor? Custom init?\n",
            "timestamp_created": "2021-04-25T05:50:30.927975"
        },
        "8964e13284534183b2e84fc24c9c0426": {
            "links": [],
            "tags": [],
            "text": "Can be invoked from process_event/bubble_event.\n",
            "timestamp_created": "2021-04-25T05:51:38.991479"
        },
        "8a68350969694fc3b66f97d0a704da94": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class LinkWidget(Widget):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, window, parent, link_id, link_data, start, end):",
                    "type": "line"
                },
                {
                    "text": "        Widget.__init__(self, window, parent)",
                    "type": "line"
                },
                {
                    "text": "        self.link_id = link_id",
                    "type": "line"
                },
                {
                    "text": "        self.link_data = link_data",
                    "type": "line"
                },
                {
                    "text": "        self.start = start",
                    "type": "line"
                },
                {
                    "text": "        self.end = end",
                    "type": "line"
                },
                {
                    "text": "        self.start.outgoing.append(self)",
                    "type": "line"
                },
                {
                    "text": "        self.end.incoming.append(self)",
                    "type": "line"
                },
                {
                    "text": "        self.start_pos = None",
                    "type": "line"
                },
                {
                    "text": "        self.end_pos = None",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def is_virtual(self):",
                    "type": "line"
                },
                {
                    "text": "        return self.link_data.get(\"virtual\", False)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def update(self, rect, elapsed_ms):",
                    "type": "line"
                },
                {
                    "text": "        Widget.update(self, rect, elapsed_ms)",
                    "type": "line"
                },
                {
                    "text": "        start = pygame.math.Vector2(self.start.get_link_out_point())",
                    "type": "line"
                },
                {
                    "text": "        end = pygame.math.Vector2(self.end.get_link_in_point())",
                    "type": "line"
                },
                {
                    "text": "        if start != self.start_pos or end != self.end_pos:",
                    "type": "line"
                },
                {
                    "text": "            self.start_pos = start",
                    "type": "line"
                },
                {
                    "text": "            self.end_pos = end",
                    "type": "line"
                },
                {
                    "text": "            self.padding = 3",
                    "type": "line"
                },
                {
                    "text": "            self.need_redraw = True",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            self.need_redraw = False",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def draw(self, canvas):",
                    "type": "line"
                },
                {
                    "text": "        if self.need_redraw:",
                    "type": "line"
                },
                {
                    "text": "            self.width = max(1, int(abs(self.start_pos.x-self.end_pos.x)))",
                    "type": "line"
                },
                {
                    "text": "            self.height = max(1, int(abs(self.start_pos.y-self.end_pos.y)))+2*self.padding",
                    "type": "line"
                },
                {
                    "text": "            self.image = canvas.create_image(",
                    "type": "line"
                },
                {
                    "text": "                (self.width, self.height),",
                    "type": "line"
                },
                {
                    "text": "                self._draw_line",
                    "type": "line"
                },
                {
                    "text": "            )",
                    "type": "line"
                },
                {
                    "text": "            self.pos = (",
                    "type": "line"
                },
                {
                    "text": "                min(self.start_pos.x, self.end_pos.x),",
                    "type": "line"
                },
                {
                    "text": "                min(self.start_pos.y, self.end_pos.y)-self.padding,",
                    "type": "line"
                },
                {
                    "text": "            )",
                    "type": "line"
                },
                {
                    "text": "        canvas.blit(self.image, self.pos)",
                    "type": "line"
                },
                {
                    "text": "        Widget.draw(self, canvas)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _draw_line(self, canvas):",
                    "type": "line"
                },
                {
                    "text": "        if self.start_pos.x < self.end_pos.x:",
                    "type": "line"
                },
                {
                    "text": "            startx = 0",
                    "type": "line"
                },
                {
                    "text": "            endx = self.width",
                    "type": "line"
                },
                {
                    "text": "            c1x = 0.6*self.width",
                    "type": "line"
                },
                {
                    "text": "            c2x = 0.4*self.width",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            startx = self.width",
                    "type": "line"
                },
                {
                    "text": "            endx = 0",
                    "type": "line"
                },
                {
                    "text": "            c1x = 0.4*self.width",
                    "type": "line"
                },
                {
                    "text": "            c2x = 0.6*self.width",
                    "type": "line"
                },
                {
                    "text": "        if self.start_pos.y < self.end_pos.y:",
                    "type": "line"
                },
                {
                    "text": "            starty = self.padding",
                    "type": "line"
                },
                {
                    "text": "            endy = self.height-self.padding",
                    "type": "line"
                },
                {
                    "text": "            c1y = 0.0*(self.height-self.padding)+self.padding",
                    "type": "line"
                },
                {
                    "text": "            c2y = 1.0*(self.height-self.padding)+self.padding",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            starty = self.height-self.padding",
                    "type": "line"
                },
                {
                    "text": "            endy = self.padding",
                    "type": "line"
                },
                {
                    "text": "            c1y = 1.0*(self.height-self.padding)+self.padding",
                    "type": "line"
                },
                {
                    "text": "            c2y = 0.0*(self.height-self.padding)+self.padding",
                    "type": "line"
                },
                {
                    "text": "        canvas.move_to(startx, starty)",
                    "type": "line"
                },
                {
                    "text": "        canvas.line_to(startx+0.02*(endx-startx), starty)",
                    "type": "line"
                },
                {
                    "text": "        canvas.curve_to(c1x, c1y, c2x, c2y, endx-0.02*(endx-startx), endy)",
                    "type": "line"
                },
                {
                    "text": "        canvas.line_to(endx, endy)",
                    "type": "line"
                },
                {
                    "text": "        canvas._set_color(COLOR_VIRTUAL_LINE if self.is_virtual() else COLOR_LINE)",
                    "type": "line"
                },
                {
                    "text": "        canvas.set_line_width(1.5)",
                    "type": "line"
                },
                {
                    "text": "        canvas.stroke()",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.687581",
            "type": "code"
        },
        "8cb560a43a5e4fceb2a0e237778c6623": {
            "links": [],
            "tags": [],
            "text": "Link has state handling in draw method which prevents tests from skipping intermediate draw calls.\n",
            "timestamp_created": "2021-04-25T04:53:04.817444"
        },
        "8cbf970b04ee428793dc985b0fbf2f01": {
            "links": [],
            "tags": [],
            "text": "All key events can be handled in bubble_event (even if same widget).\n",
            "timestamp_created": "2021-04-25T04:48:34.933029"
        },
        "8e84748c392b4e72adbe4aa48bd30888": {
            "chunkpath": [
                "base classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class HBox(Box):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_widget_size(self, widget):",
                    "type": "line"
                },
                {
                    "text": "        return widget.get_width()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_rect_size(self, thing):",
                    "type": "line"
                },
                {
                    "text": "        return thing.width",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def set_rect_size(self, rect, size):",
                    "type": "line"
                },
                {
                    "text": "        rect = rect.copy()",
                    "type": "line"
                },
                {
                    "text": "        rect.width = size",
                    "type": "line"
                },
                {
                    "text": "        return rect",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def move_rect(self, rect, delta):",
                    "type": "line"
                },
                {
                    "text": "        return rect.move(delta, 0)",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.611325",
            "type": "code"
        },
        "8e8d2b99b72c4be9a46637d9688c1cf1": {
            "tags": [
                "title"
            ],
            "text": "Immutable",
            "timestamp_created": "2021-06-19T07:27:54.002538"
        },
        "8f5ce28ebda74713aa5a991dfc59c16f": {
            "chunkpath": [
                "classes",
                "NoteText"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def __init__(self, db, note_id=None):",
                    "type": "line"
                },
                {
                    "text": "    self.db = db",
                    "type": "line"
                },
                {
                    "text": "    self.note_id = note_id",
                    "type": "line"
                },
                {
                    "text": "    ExternalTextEntry.__init__(self, self._note_to_text(), EDITOR_COMMAND)",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "def __init__(self, db, note_id=None):\n    self.db = db\n    self.note_id = note_id\n    ExternalTextEntry.__init__(self, self._note_to_text(), EDITOR_COMMAND)\n\ndef _note_to_text(self):\n    data = self.db.get_note_data(self.note_id)\n    links = data.get(\"links\", [])\n    tags = data.get(\"tags\", [])\n    extra = []\n    extra.append(\"\\n\")\n    extra.append(\"--\\n\")\n    for link in links:\n        extra.append(\"{}{}\\n\".format(self.LINK_PREFIX, link))\n    for tag in tags:\n        extra.append(\"{}{}\\n\".format(self.TAG_PREFIX, tag))\n    if data.get(\"type\", \"text\") == \"code\":\n        extra.append(\"{}{}\\n\".format(self.FILEPATH_PREFIX, \"/\".join(data[\"filepath\"])))\n        extra.append(\"{}{}\\n\".format(self.CHUNKPATH_PREFIX, \"/\".join(data[\"chunkpath\"])))\n    extra.append(\"# Usage:\\n\")\n    extra.append(\"# {}http://...\\n\".format(self.LINK_PREFIX))\n    extra.append(\"# {}name\\n\".format(self.TAG_PREFIX))\n    extra.append(\"# {}foo/bar.py\\n\".format(self.FILEPATH_PREFIX))\n    extra.append(\"# {}classes/Foo\\n\".format(self.CHUNKPATH_PREFIX))\n    extra.append(\"#\\n\")\n    extra.append(\"# Code Syntax:\\n\")\n    extra.append(\"# <<foo, blank_lines_before=1>>\\n\")\n    extra.append(\"# {}\\n\".format(self.SPLIT_SYNAX))\n    extra.append(\"#\\n\")\n    extra.append(\"# Tags with special formatting:\\n\")\n    for tag in TAG_ATTRIBUTES:\n        extra.append(\"# {}{}\\n\".format(self.TAG_PREFIX, tag[\"name\"]))\n    extra.append(\"--\\n\")\n    if data.get(\"type\", \"text\") == \"code\":\n        return self._code_fragments_to_text(data[\"fragments\"]) + \"\".join(extra)\n    else:\n        return data[\"text\"] + \"\".join(extra)\n\ndef _new_text(self):\n    with self.db.transaction():\n        fields = self._text_to_note_fields()\n        if \"splits\" in fields:\n            splits = fields.pop(\"splits\")\n            self.db.update_note(self.note_id, **dict(fields, fragments=splits[0]))\n            for fragments in splits[1:]:\n                self.db.create_note(**dict(fields, fragments=fragments, text=\"<code>\"))\n        else:\n            self.db.update_note(self.note_id, **fields)\n\ndef _text_to_note_fields(self):\n    try:\n        return self._parse_footer()\n    except ParseError:\n        return {\n            \"text\": self.text,\n            \"links\": [],\n            \"tags\": [],\n        }\n\ndef _code_fragments_to_text(self, fragments):\n    lines = []\n    for fragment in fragments:\n        if fragment[\"type\"] == \"chunk\":\n            lines.append(\"{}<<{}, blank_lines_before={}>>\".format(\n                fragment[\"prefix\"],\n                \"/\".join(fragment[\"path\"]),\n                fragment[\"blank_lines_before\"]\n            ))\n        else:\n            lines.append(\"{}\".format(\n                fragment[\"text\"],\n            ))\n    return \"\\n\".join(lines) + \"\\n\"\n\ndef _text_to_code_fragments(self, text):\n    splits = [[]]\n    for line in text.splitlines():\n        if line == self.SPLIT_SYNAX:\n            splits.append([])\n        else:\n            match = re.match(r'^(.*)<<(.*), blank_lines_before=(\\d+)>>$', line)\n            if match:\n                splits[-1].append({\n                    \"type\": \"chunk\",\n                    \"prefix\": match.group(1),\n                    \"path\": match.group(2).split(\"/\"),\n                    \"blank_lines_before\": int(match.group(3))\n                })\n            else:\n                splits[-1].append({\"type\": \"line\", \"text\": line})\n    return splits\n\ndef _parse_footer(self):\n    data = {\n        \"text\": \"\",\n        \"links\": [],\n        \"tags\": [],\n        \"filepath\": [],\n        \"chunkpath\": [],\n    }\n    parts = self.text.splitlines(True)\n    if parts and parts.pop(-1).rstrip() == \"--\":\n        while parts and parts[-1].rstrip() != \"--\":\n            part = parts.pop(-1)\n            if part.startswith(self.LINK_PREFIX):\n                data[\"links\"].insert(0, part[len(self.LINK_PREFIX):].rstrip())\n            elif part.startswith(self.TAG_PREFIX):\n                data[\"tags\"].insert(0, part[len(self.TAG_PREFIX):].rstrip())\n            elif part.startswith(self.FILEPATH_PREFIX):\n                data[\"filepath\"] = [\n                    x\n                    for x\n                    in part[len(self.FILEPATH_PREFIX):].rstrip().split(\"/\")\n                    if x\n                ]\n            elif part.startswith(self.CHUNKPATH_PREFIX):\n                data[\"chunkpath\"] = [\n                    x\n                    for x\n                    in part[len(self.CHUNKPATH_PREFIX):].rstrip().split(\"/\")\n                    if x\n                ]\n            elif part.startswith(\"#\"):\n                pass\n            else:\n                raise ParseError(\"unknown field\")\n        if parts:\n            parts.pop(-1)\n            while parts and parts[-1].strip() == \"\":\n                parts.pop(-1)\n            data[\"text\"] = \"\".join(parts)\n            if data[\"filepath\"] or data[\"chunkpath\"]:\n                data[\"type\"] = \"code\"\n                data[\"splits\"] = self._text_to_code_fragments(data[\"text\"])\n                data.pop(\"text\")\n            else:\n                data[\"type\"] = \"text\"\n                data.pop(\"filepath\")\n                data.pop(\"chunkpath\")\n            return data\n    raise ParseError(\"no footer found\")\n",
            "timestamp_created": "2021-06-20T12:25:28.651569",
            "type": "code"
        },
        "8fa7f664ecdf47119a1b319bcfe3e293": {
            "links": [],
            "tags": [],
            "text": "true_rect is the same as allotted_rect.\n",
            "timestamp_created": "2021-04-25T06:22:25.500592"
        },
        "915b1755daf440958f7806c9927ccb50": {
            "tags": [
                "title"
            ],
            "text": "Box",
            "timestamp_created": "2021-06-19T07:27:53.549767"
        },
        "91a7888b14b04e7280795ebc78275bfa": {
            "chunkpath": [
                "classes",
                "NoteDb"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def update_note(self, note_id, **params):",
                    "type": "line"
                },
                {
                    "text": "    self._ensure_note_id(note_id)",
                    "type": "line"
                },
                {
                    "text": "    self._replace(notes=dict(",
                    "type": "line"
                },
                {
                    "text": "        self._get(\"notes\"),",
                    "type": "line"
                },
                {
                    "text": "        **{note_id: dict(self._get(\"notes\", note_id), **params)}",
                    "type": "line"
                },
                {
                    "text": "    ))",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-20T12:22:06.076993",
            "type": "code"
        },
        "9373b6fe256a4eee9478e30d701ddc90": {
            "tags": [
                "title"
            ],
            "text": "External Text Entry",
            "timestamp_created": "2021-06-19T07:27:54.054471"
        },
        "9393d6fdfb5d4d918199e9cee8ed0025": {
            "chunkpath": [
                "classes",
                "NoteDb"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def collect_parts(self):",
                    "type": "line"
                },
                {
                    "text": "    parts = defaultdict(list)",
                    "type": "line"
                },
                {
                    "text": "    for note_id, note in reversed(self.get_notes()):",
                    "type": "line"
                },
                {
                    "text": "        if note.get(\"type\", None) == \"code\":",
                    "type": "line"
                },
                {
                    "text": "            key = (tuple(note[\"filepath\"]), tuple(note[\"chunkpath\"]))",
                    "type": "line"
                },
                {
                    "text": "            parts[key].append((note_id, note[\"fragments\"]))",
                    "type": "line"
                },
                {
                    "text": "    return parts",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-20T12:22:06.076643",
            "type": "code"
        },
        "94df86b13b0a46039880954fcd6f2c43": {
            "tags": [
                "title"
            ],
            "text": "Search Results",
            "timestamp_created": "2021-06-19T07:27:52.631781"
        },
        "96c4c873d47f4aa1ac0f878dc98ed879": {
            "links": [],
            "tags": [],
            "text": "Table does not register opened note.\n",
            "timestamp_created": "2021-05-22T09:42:59.960153"
        },
        "98765de5e17b468ebd5d7bb7b229cc0c": {
            "tags": [
                "title"
            ],
            "text": "Settings",
            "timestamp_created": "2021-06-19T07:27:52.952534"
        },
        "9914cb6c8dbf4a6b8859d68e94ce1bef": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class OverlayWidget(VBox):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, window, parent, db):",
                    "type": "line"
                },
                {
                    "text": "        VBox.__init__(self, window, parent)",
                    "type": "line"
                },
                {
                    "text": "        self.db = db",
                    "type": "line"
                },
                {
                    "text": "        self.link_source = None",
                    "type": "line"
                },
                {
                    "text": "        self.link_target = None",
                    "type": "line"
                },
                {
                    "text": "        self.pos = (0, 0)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def process_event(self, event):",
                    "type": "line"
                },
                {
                    "text": "        if event.mouse_motion():",
                    "type": "line"
                },
                {
                    "text": "            self.pos = event.mouse_pos()",
                    "type": "line"
                },
                {
                    "text": "        if self.link_source and event.left_mouse_up():",
                    "type": "line"
                },
                {
                    "text": "            if self.link_target:",
                    "type": "line"
                },
                {
                    "text": "                self.db.create_link(",
                    "type": "line"
                },
                {
                    "text": "                    self.link_source.note_id,",
                    "type": "line"
                },
                {
                    "text": "                    self.link_target.note_id",
                    "type": "line"
                },
                {
                    "text": "                )",
                    "type": "line"
                },
                {
                    "text": "                self.set_link_source(None)",
                    "type": "line"
                },
                {
                    "text": "                self.set_link_target(None)",
                    "type": "line"
                },
                {
                    "text": "                raise OverlayAbort()",
                    "type": "line"
                },
                {
                    "text": "            self.set_link_source(None)",
                    "type": "line"
                },
                {
                    "text": "            self.set_link_target(None)",
                    "type": "line"
                },
                {
                    "text": "        VBox.process_event(self, event)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def draw(self, canvas):",
                    "type": "line"
                },
                {
                    "text": "        VBox.draw(self, canvas)",
                    "type": "line"
                },
                {
                    "text": "        if self.link_source and not self.link_source.hit_test(self.pos):",
                    "type": "line"
                },
                {
                    "text": "            canvas.move_to(*self.link_source.get_link_source_point())",
                    "type": "line"
                },
                {
                    "text": "            canvas.line_to(*self.pos)",
                    "type": "line"
                },
                {
                    "text": "            if self.link_target:",
                    "type": "line"
                },
                {
                    "text": "                canvas._set_color(COLOR_ACTIVE)",
                    "type": "line"
                },
                {
                    "text": "            else:",
                    "type": "line"
                },
                {
                    "text": "                canvas._set_color(COLOR_INACTIVE)",
                    "type": "line"
                },
                {
                    "text": "            canvas.set_line_width(5)",
                    "type": "line"
                },
                {
                    "text": "            canvas.stroke()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def set_link_source(self, link_source):",
                    "type": "line"
                },
                {
                    "text": "        self.link_source = link_source",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def set_link_target(self, link_target):",
                    "type": "line"
                },
                {
                    "text": "        if link_target is None:",
                    "type": "line"
                },
                {
                    "text": "            self.link_target = None",
                    "type": "line"
                },
                {
                    "text": "            return",
                    "type": "line"
                },
                {
                    "text": "        if self.link_source is None:",
                    "type": "line"
                },
                {
                    "text": "            return",
                    "type": "line"
                },
                {
                    "text": "        if self.link_source.note_id == link_target.note_id:",
                    "type": "line"
                },
                {
                    "text": "            return",
                    "type": "line"
                },
                {
                    "text": "        self.link_target = link_target",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.757346",
            "type": "code"
        },
        "99b97696eb76490d811118c5d23e97af": {
            "chunkpath": [
                "classes",
                "NoteDb"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def get_note_data(self, note_id):",
                    "type": "line"
                },
                {
                    "text": "    self._ensure_note_id(note_id)",
                    "type": "line"
                },
                {
                    "text": "    return self._get(\"notes\", note_id)",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-20T12:22:06.076808",
            "type": "code"
        },
        "9b67b722e8aa4a2a913fe18905e369af": {
            "tags": [
                "title"
            ],
            "text": "Note",
            "timestamp_created": "2021-06-19T07:27:52.665205"
        },
        "9d2cf543dd2b4a26b7ecafcaf5ddeeaa": {
            "links": [],
            "tags": [],
            "text": "Edit search note and closing Vim passes enter event to search bar?\n",
            "timestamp_created": "2021-05-23T08:10:34.211312"
        },
        "9dea2f6390954d3fa2de99e0eb6457ca": {
            "tags": [
                "title"
            ],
            "text": "Note",
            "timestamp_created": "2021-06-19T07:27:52.789750"
        },
        "a0fe67b02bfd42c9adca92215cbf88b1": {
            "chunkpath": [],
            "filepath": [
                "test_smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "#!/usr/bin/env python3",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "import os",
                    "type": "line"
                },
                {
                    "text": "import cairo",
                    "type": "line"
                },
                {
                    "text": "import pygame",
                    "type": "line"
                },
                {
                    "text": "import smartnotes",
                    "type": "line"
                },
                {
                    "text": "import subprocess",
                    "type": "line"
                },
                {
                    "text": "import unittest",
                    "type": "line"
                },
                {
                    "text": "import tempfile",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "MANUAL_MODE = os.environ.get(\"MANUAL_MODE\", None) == \"yes\"",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "MS_PER_FRAME = 20",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "class BaseEvent(object):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def mouse_motion(self, rect=None):",
                    "type": "line"
                },
                {
                    "text": "        return False",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def left_mouse_down(self, rect=None):",
                    "type": "line"
                },
                {
                    "text": "        return False",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def left_mouse_up(self, rect=None):",
                    "type": "line"
                },
                {
                    "text": "        return False",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def mouse_pos(self):",
                    "type": "line"
                },
                {
                    "text": "        return None",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def key_down_text(self):",
                    "type": "line"
                },
                {
                    "text": "        return None",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def key_down(self, description=None):",
                    "type": "line"
                },
                {
                    "text": "        return False",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def window_gained_focus(self):",
                    "type": "line"
                },
                {
                    "text": "        return False",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def window_lost_focus(self):",
                    "type": "line"
                },
                {
                    "text": "        return False",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "class MouseMotionEvent(BaseEvent):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, pos):",
                    "type": "line"
                },
                {
                    "text": "        self.pos = pos",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def mouse_motion(self, rect=None):",
                    "type": "line"
                },
                {
                    "text": "        if rect is None:",
                    "type": "line"
                },
                {
                    "text": "            return True",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            return rect.collidepoint(self.pos)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def mouse_pos(self):",
                    "type": "line"
                },
                {
                    "text": "        return self.pos",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "class LeftMouseDownEvent(BaseEvent):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, pos):",
                    "type": "line"
                },
                {
                    "text": "        self.pos = pos",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def left_mouse_down(self, rect=None):",
                    "type": "line"
                },
                {
                    "text": "        if rect is None:",
                    "type": "line"
                },
                {
                    "text": "            return True",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            return rect.collidepoint(self.pos)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def mouse_pos(self):",
                    "type": "line"
                },
                {
                    "text": "        return self.pos",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "class LeftMouseUpEvent(BaseEvent):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, pos):",
                    "type": "line"
                },
                {
                    "text": "        self.pos = pos",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def left_mouse_up(self, rect=None):",
                    "type": "line"
                },
                {
                    "text": "        if rect is None:",
                    "type": "line"
                },
                {
                    "text": "            return True",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            return rect.collidepoint(self.pos)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def mouse_pos(self):",
                    "type": "line"
                },
                {
                    "text": "        return self.pos",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "class KeyEvent(BaseEvent):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, description):",
                    "type": "line"
                },
                {
                    "text": "        self.description = description",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def key_down(self, description=None):",
                    "type": "line"
                },
                {
                    "text": "        if description is None:",
                    "type": "line"
                },
                {
                    "text": "            return True",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            return self.description == description",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "class GuiDriverWindow(smartnotes.WindowFocusMixin):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def set_title(self, title):",
                    "type": "line"
                },
                {
                    "text": "        pass",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def close(self):",
                    "type": "line"
                },
                {
                    "text": "        pass",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "class GuiDriver(object):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, widget_cls, *args, **kwargs):",
                    "type": "line"
                },
                {
                    "text": "        self.window = GuiDriverWindow()",
                    "type": "line"
                },
                {
                    "text": "        self.cairo_surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, 800, 600)",
                    "type": "line"
                },
                {
                    "text": "        self.canvas = smartnotes.CairoCanvas(self.cairo_surface)",
                    "type": "line"
                },
                {
                    "text": "        self.widget = widget_cls(self.window, None, *args, **kwargs)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def iteration(self, events=[], elapsed_ms=1000):",
                    "type": "line"
                },
                {
                    "text": "        for event in events:",
                    "type": "line"
                },
                {
                    "text": "            self.widget.process_event(event)",
                    "type": "line"
                },
                {
                    "text": "        while elapsed_ms > 0:",
                    "type": "line"
                },
                {
                    "text": "            elapsed_ms_per_frame = min(elapsed_ms, MS_PER_FRAME)",
                    "type": "line"
                },
                {
                    "text": "            elapsed_ms -= elapsed_ms_per_frame",
                    "type": "line"
                },
                {
                    "text": "            self.widget.update(pygame.Rect(0, 0, 800, 600), elapsed_ms_per_frame)",
                    "type": "line"
                },
                {
                    "text": "            self.widget.draw(self.canvas)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def write_to_png(self, path):",
                    "type": "line"
                },
                {
                    "text": "        self.cairo_surface.write_to_png(path)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "class SmartNotesEndToEndTests(unittest.TestCase):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def setUp(self):",
                    "type": "line"
                },
                {
                    "text": "        example_notes = \"test_resources/example.notes\"",
                    "type": "line"
                },
                {
                    "text": "        subprocess.check_call([\"git\", \"checkout\", example_notes])",
                    "type": "line"
                },
                {
                    "text": "        self.driver = GuiDriver(smartnotes.SmartNotesWidget, example_notes)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def assert_drawn_image_is(self, name):",
                    "type": "line"
                },
                {
                    "text": "        try:",
                    "type": "line"
                },
                {
                    "text": "            expected_path = os.path.join(\"test_resources\", name)",
                    "type": "line"
                },
                {
                    "text": "            actual_path = os.path.join(\"test_resources\", \"actual_{}\".format(name))",
                    "type": "line"
                },
                {
                    "text": "            self.driver.write_to_png(actual_path)",
                    "type": "line"
                },
                {
                    "text": "            subprocess.check_call([\"diff\", expected_path, actual_path])",
                    "type": "line"
                },
                {
                    "text": "            os.remove(actual_path)",
                    "type": "line"
                },
                {
                    "text": "        except:",
                    "type": "line"
                },
                {
                    "text": "            if MANUAL_MODE and manual_compare_accept(expected_path, actual_path):",
                    "type": "line"
                },
                {
                    "text": "                return",
                    "type": "line"
                },
                {
                    "text": "            self.fail(",
                    "type": "line"
                },
                {
                    "text": "                f\"Drawn image did not match\\n\"",
                    "type": "line"
                },
                {
                    "text": "                f\"\\n\"",
                    "type": "line"
                },
                {
                    "text": "                f\"  Examine:\\n\"",
                    "type": "line"
                },
                {
                    "text": "                f\"    eog {actual_path}\\n\"",
                    "type": "line"
                },
                {
                    "text": "                f\"  Accept:\\n\"",
                    "type": "line"
                },
                {
                    "text": "                f\"    cp {actual_path} {expected_path}\\n\"",
                    "type": "line"
                },
                {
                    "text": "            )",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "blank_lines_before": 1,
                    "path": [
                        "end-to-end"
                    ],
                    "prefix": "    ",
                    "type": "chunk"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def manual_compare_accept(expected, actual):",
                    "type": "line"
                },
                {
                    "text": "    with tempfile.TemporaryDirectory() as tmp_dir:",
                    "type": "line"
                },
                {
                    "text": "        subprocess.call([",
                    "type": "line"
                },
                {
                    "text": "            \"compare\",",
                    "type": "line"
                },
                {
                    "text": "            expected,",
                    "type": "line"
                },
                {
                    "text": "            actual,",
                    "type": "line"
                },
                {
                    "text": "            \"-compose\",",
                    "type": "line"
                },
                {
                    "text": "            \"src\",",
                    "type": "line"
                },
                {
                    "text": "            os.path.join(tmp_dir, \"diff.png\")",
                    "type": "line"
                },
                {
                    "text": "        ])",
                    "type": "line"
                },
                {
                    "text": "        subprocess.call([",
                    "type": "line"
                },
                {
                    "text": "            \"montage\",",
                    "type": "line"
                },
                {
                    "text": "            \"-mode\", \"concatenate\",",
                    "type": "line"
                },
                {
                    "text": "            \"-tile\", \"x1\",",
                    "type": "line"
                },
                {
                    "text": "            \"-geometry\", \"+5+5\",",
                    "type": "line"
                },
                {
                    "text": "            \"-label\", \"%f\",",
                    "type": "line"
                },
                {
                    "text": "            expected,",
                    "type": "line"
                },
                {
                    "text": "            actual,",
                    "type": "line"
                },
                {
                    "text": "            os.path.join(tmp_dir, \"diff.png\"),",
                    "type": "line"
                },
                {
                    "text": "            os.path.join(tmp_dir, \"comparison.png\")",
                    "type": "line"
                },
                {
                    "text": "        ])",
                    "type": "line"
                },
                {
                    "text": "        comparison = subprocess.Popen([",
                    "type": "line"
                },
                {
                    "text": "            \"eog\",",
                    "type": "line"
                },
                {
                    "text": "            os.path.join(tmp_dir, \"comparison.png\")",
                    "type": "line"
                },
                {
                    "text": "        ])",
                    "type": "line"
                },
                {
                    "text": "        accept = input(\"Enter 'y' to accept: \") == \"y\"",
                    "type": "line"
                },
                {
                    "text": "        comparison.kill()",
                    "type": "line"
                },
                {
                    "text": "        if accept:",
                    "type": "line"
                },
                {
                    "text": "            subprocess.check_call([",
                    "type": "line"
                },
                {
                    "text": "                \"cp\",",
                    "type": "line"
                },
                {
                    "text": "                actual,",
                    "type": "line"
                },
                {
                    "text": "                expected,",
                    "type": "line"
                },
                {
                    "text": "            ])",
                    "type": "line"
                },
                {
                    "text": "        return accept",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "if __name__ == \"__main__\":",
                    "type": "line"
                },
                {
                    "text": "    unittest.main()",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.127196",
            "type": "code"
        },
        "a10da329043c4b1ba09358078b3ec849": {
            "links": [],
            "tags": [],
            "text": "Add container type that Box inherits from that Table/Network can use as well.\n",
            "timestamp_created": "2021-05-23T10:11:53.183020"
        },
        "a3253be03d374e609bb39fdc3d614e8c": {
            "links": [],
            "tags": [],
            "text": "Ctrl+g to hide search bar should work in network as well.\n",
            "timestamp_created": "2021-04-25T05:39:37.941350"
        },
        "a343b9c995084d61a41a57413018dbe3": {
            "links": [],
            "tags": [],
            "text": "Add SPLIT-AND-EXTRACT to chunk. This will be the first step of extracting class members to new chunk.\n",
            "timestamp_created": "2021-06-21T05:43:34.752409",
            "type": "text"
        },
        "a555b9e3b8a84bdbb662786cf96773ac": {
            "tags": [
                "title"
            ],
            "text": "Note External Edit",
            "timestamp_created": "2021-06-19T07:27:52.908466"
        },
        "a5661264b360480a954ca02a4998c3c3": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class NoteDb(Immutable):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "blank_lines_before": 1,
                    "path": [
                        "NoteDb"
                    ],
                    "prefix": "    ",
                    "type": "chunk"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.838266",
            "type": "code"
        },
        "aa57cd41ac6a4c0082803451c048e7f2": {
            "links": [],
            "tags": [],
            "text": "Fix that 'g' makes browser focus, but note still looks focused.\n",
            "timestamp_created": "2021-04-25T05:40:18.021729"
        },
        "ab07169ee24042a5ac67ed97b41db1fd": {
            "links": [],
            "tags": [
                "title"
            ],
            "text": "Text Rendering\n",
            "timestamp_created": "2021-04-25T05:32:37.651697"
        },
        "ab5a993917854632b93282a1eb43b38b": {
            "links": [],
            "tags": [],
            "text": "Base widgets can only draw \"overlays\".\n",
            "timestamp_created": "2021-04-25T04:49:41.634147"
        },
        "af2967da19aa441ca600cffe29aae955": {
            "chunkpath": [
                "base classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class VBox(Box):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_widget_size(self, widget):",
                    "type": "line"
                },
                {
                    "text": "        return widget.get_height()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_rect_size(self, thing):",
                    "type": "line"
                },
                {
                    "text": "        return thing.height",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def set_rect_size(self, rect, size):",
                    "type": "line"
                },
                {
                    "text": "        rect = rect.copy()",
                    "type": "line"
                },
                {
                    "text": "        rect.height = size",
                    "type": "line"
                },
                {
                    "text": "        return rect",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def move_rect(self, rect, delta):",
                    "type": "line"
                },
                {
                    "text": "        return rect.move(0, delta)",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.590416",
            "type": "code"
        },
        "af88ba59057c45338350bc42a0001adb": {
            "tags": [
                "title"
            ],
            "text": "Smart Notes",
            "timestamp_created": "2021-06-19T07:27:52.609041"
        },
        "b310f483289c47f59030fb3c25f47123": {
            "chunkpath": [
                "classes",
                "SearchResults"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def update_search_text(self, text):",
                    "type": "line"
                },
                {
                    "text": "    self.text = text",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-20T12:14:33.776761",
            "type": "code"
        },
        "b34dce1ce47449c8ae691acce741daf8": {
            "chunkpath": [
                "classes",
                "NoteText"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def _text_to_code_fragments(self, text):",
                    "type": "line"
                },
                {
                    "text": "    splits = [[]]",
                    "type": "line"
                },
                {
                    "text": "    for line in text.splitlines():",
                    "type": "line"
                },
                {
                    "text": "        if line == self.SPLIT_SYNAX:",
                    "type": "line"
                },
                {
                    "text": "            splits.append([])",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            match = re.match(r'^(.*)<<(.*), blank_lines_before=(\\d+)>>$', line)",
                    "type": "line"
                },
                {
                    "text": "            if match:",
                    "type": "line"
                },
                {
                    "text": "                splits[-1].append({",
                    "type": "line"
                },
                {
                    "text": "                    \"type\": \"chunk\",",
                    "type": "line"
                },
                {
                    "text": "                    \"prefix\": match.group(1),",
                    "type": "line"
                },
                {
                    "text": "                    \"path\": match.group(2).split(\"/\"),",
                    "type": "line"
                },
                {
                    "text": "                    \"blank_lines_before\": int(match.group(3))",
                    "type": "line"
                },
                {
                    "text": "                })",
                    "type": "line"
                },
                {
                    "text": "            else:",
                    "type": "line"
                },
                {
                    "text": "                splits[-1].append({\"type\": \"line\", \"text\": line})",
                    "type": "line"
                },
                {
                    "text": "    return splits",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-20T12:27:02.675596",
            "type": "code"
        },
        "b4922ecf5d984d408bcdaab9fdeeb064": {
            "chunkpath": [
                "functions"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def read_json_file(path, default_value):",
                    "type": "line"
                },
                {
                    "text": "    if os.path.exists(path):",
                    "type": "line"
                },
                {
                    "text": "        with open(path) as f:",
                    "type": "line"
                },
                {
                    "text": "            return json.load(f)",
                    "type": "line"
                },
                {
                    "text": "    else:",
                    "type": "line"
                },
                {
                    "text": "        return default_value",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:54.160479",
            "type": "code"
        },
        "b571359f968a4e2b8b2cb97f1d35c5f1": {
            "chunkpath": [
                "imports"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "import cairo",
                    "type": "line"
                },
                {
                    "text": "import pygame",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.740746",
            "type": "code"
        },
        "b6d3c5edf7454e8ab469258bdb5dc0c1": {
            "links": [],
            "tags": [],
            "text": "`<code>` is needed here only because Smart Notes can not yet handle notes without a `text` field.\n",
            "timestamp_created": "2021-06-20T12:27:23.840166",
            "type": "text"
        },
        "b9ead1e5dbad4a97abb50aad507341ca": {
            "links": [],
            "tags": [],
            "text": "If the same note appears twice in table view, the first one renders blank. Probably same problem in search bar with by_id.\n",
            "timestamp_created": "2021-05-23T07:51:40.641358"
        },
        "ba04a2b92b7f49a99a25a0af26d3b3aa": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class NoteBrowserWidget(VBox):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, window, parent, db, overlay, note_settings):",
                    "type": "line"
                },
                {
                    "text": "        VBox.__init__(self, window, parent)",
                    "type": "line"
                },
                {
                    "text": "        self.db = db",
                    "type": "line"
                },
                {
                    "text": "        self.note_settings = note_settings",
                    "type": "line"
                },
                {
                    "text": "        self.pos = (0, 0)",
                    "type": "line"
                },
                {
                    "text": "        self.note_id = None",
                    "type": "line"
                },
                {
                    "text": "        self.network = self.add(self.instantiate(NetworkWidget,",
                    "type": "line"
                },
                {
                    "text": "            self.db,",
                    "type": "line"
                },
                {
                    "text": "            overlay,",
                    "type": "line"
                },
                {
                    "text": "            self.note_settings",
                    "type": "line"
                },
                {
                    "text": "        ))",
                    "type": "line"
                },
                {
                    "text": "        self.table = self.add(self.instantiate(TableWidget,",
                    "type": "line"
                },
                {
                    "text": "            self.db,",
                    "type": "line"
                },
                {
                    "text": "            overlay,",
                    "type": "line"
                },
                {
                    "text": "            self.note_settings",
                    "type": "line"
                },
                {
                    "text": "        ))",
                    "type": "line"
                },
                {
                    "text": "        self.table.toggle_visible()",
                    "type": "line"
                },
                {
                    "text": "        self.toggle_table_network_after_event_processing = False",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def register_note_opened(self, note_id):",
                    "type": "line"
                },
                {
                    "text": "        self.note_id = note_id",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def open_note(self, note_id):",
                    "type": "line"
                },
                {
                    "text": "        if self.network.is_visible():",
                    "type": "line"
                },
                {
                    "text": "            self.network.open_note(note_id)",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            self.table.open_note(note_id)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def focus(self):",
                    "type": "line"
                },
                {
                    "text": "        if self.table.is_visible():",
                    "type": "line"
                },
                {
                    "text": "            self.table.focus()",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            self.network.focus()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def process_event(self, event):",
                    "type": "line"
                },
                {
                    "text": "        if event.mouse_motion():",
                    "type": "line"
                },
                {
                    "text": "            self.pos = event.mouse_pos()",
                    "type": "line"
                },
                {
                    "text": "        VBox.process_event(self, event)",
                    "type": "line"
                },
                {
                    "text": "        if self.toggle_table_network_after_event_processing:",
                    "type": "line"
                },
                {
                    "text": "            self.network.toggle_visible()",
                    "type": "line"
                },
                {
                    "text": "            self.table.toggle_visible()",
                    "type": "line"
                },
                {
                    "text": "            if self.network.is_visible():",
                    "type": "line"
                },
                {
                    "text": "                self.network.focus()",
                    "type": "line"
                },
                {
                    "text": "            else:",
                    "type": "line"
                },
                {
                    "text": "                self.table.focus()",
                    "type": "line"
                },
                {
                    "text": "            self.open_note(self.note_id)",
                    "type": "line"
                },
                {
                    "text": "            self.clear_quick_focus()",
                    "type": "line"
                },
                {
                    "text": "            self.toggle_table_network_after_event_processing = False",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def update(self, rect, elapsed_ms):",
                    "type": "line"
                },
                {
                    "text": "        self.note_settings.set_full_width(int(rect.width * 0.3))",
                    "type": "line"
                },
                {
                    "text": "        VBox.update(self, rect, elapsed_ms)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def bubble_event(self, event):",
                    "type": "line"
                },
                {
                    "text": "        if event.key_down(KEY_TOGGLE_TABLE_NETWORK):",
                    "type": "line"
                },
                {
                    "text": "            self.toggle_table_network()",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            VBox.bubble_event(self, event)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def toggle_table_network(self):",
                    "type": "line"
                },
                {
                    "text": "        self.toggle_table_network_after_event_processing = True",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.648657",
            "type": "code"
        },
        "ba108f5d9a264dad8d85d6fc7f2d8080": {
            "chunkpath": [
                "classes",
                "SearchResults"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def _update_notes_list(self):",
                    "type": "line"
                },
                {
                    "text": "    by_id = {}",
                    "type": "line"
                },
                {
                    "text": "    self.clear()",
                    "type": "line"
                },
                {
                    "text": "    self.add(self.instantiate(Widget, width=self.hpadding/2))",
                    "type": "line"
                },
                {
                    "text": "    for note_id, note_data in self.db.get_notes(self.text)[:self.num_results]:",
                    "type": "line"
                },
                {
                    "text": "        if note_id in self.by_id:",
                    "type": "line"
                },
                {
                    "text": "            note = self.add(self.by_id[note_id])",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            note = self.add(self.instantiate(Padding,",
                    "type": "line"
                },
                {
                    "text": "                self.instantiate(SearchNote,",
                    "type": "line"
                },
                {
                    "text": "                    self.db,",
                    "type": "line"
                },
                {
                    "text": "                    self.overlay,",
                    "type": "line"
                },
                {
                    "text": "                    self.note_settings,",
                    "type": "line"
                },
                {
                    "text": "                    note_id,",
                    "type": "line"
                },
                {
                    "text": "                    self.open_callback",
                    "type": "line"
                },
                {
                    "text": "                ),",
                    "type": "line"
                },
                {
                    "text": "                hpadding=lambda rect: self.hpadding/2",
                    "type": "line"
                },
                {
                    "text": "            ))",
                    "type": "line"
                },
                {
                    "text": "        by_id[note_id] = note",
                    "type": "line"
                },
                {
                    "text": "    while len(self.children) <= self.num_results:",
                    "type": "line"
                },
                {
                    "text": "        self.add(self.instantiate(Widget))",
                    "type": "line"
                },
                {
                    "text": "    self.add(self.instantiate(Widget, width=self.hpadding/2))",
                    "type": "line"
                },
                {
                    "text": "    self.by_id = by_id",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-20T12:14:33.776808",
            "type": "code"
        },
        "ba5a9b5e721346e3a6265dff1c5139c4": {
            "chunkpath": [
                "classes",
                "NoteDb"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def consolidate_fragments(self, fragments, actions):",
                    "type": "line"
                },
                {
                    "text": "    removes = set()",
                    "type": "line"
                },
                {
                    "text": "    extends = {}",
                    "type": "line"
                },
                {
                    "text": "    for action in actions:",
                    "type": "line"
                },
                {
                    "text": "        if action[0] == 'remove':",
                    "type": "line"
                },
                {
                    "text": "            removes.add(action[1])",
                    "type": "line"
                },
                {
                    "text": "        elif action[0] == 'extend':",
                    "type": "line"
                },
                {
                    "text": "            extends[action[1]] = action[2]",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            raise ValueError(f\"Unknown action {action}\")",
                    "type": "line"
                },
                {
                    "text": "    new_fragments = []",
                    "type": "line"
                },
                {
                    "text": "    for index, fragment in enumerate(fragments):",
                    "type": "line"
                },
                {
                    "text": "        if index in extends:",
                    "type": "line"
                },
                {
                    "text": "            for line in extends[index]:",
                    "type": "line"
                },
                {
                    "text": "                new_fragments.append({\"type\": \"line\", \"text\": line})",
                    "type": "line"
                },
                {
                    "text": "        if index not in removes:",
                    "type": "line"
                },
                {
                    "text": "            new_fragments.append(fragment)",
                    "type": "line"
                },
                {
                    "text": "    if (index+1) in extends:",
                    "type": "line"
                },
                {
                    "text": "        for line in extends[index+1]:",
                    "type": "line"
                },
                {
                    "text": "            new_fragments.append({\"type\": \"line\", \"text\": line})",
                    "type": "line"
                },
                {
                    "text": "    return new_fragments",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-20T12:22:06.076716",
            "type": "code"
        },
        "ba947625790e456a8e4824e9fda0d8e9": {
            "chunkpath": [
                "base base classes",
                "BaseWidget",
                "interaction"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def draw(self, canvas):",
                    "type": "line"
                },
                {
                    "text": "    if self.has_focus():",
                    "type": "line"
                },
                {
                    "text": "        canvas.draw_rect(",
                    "type": "line"
                },
                {
                    "text": "            self.get_focus_rect().inflate(",
                    "type": "line"
                },
                {
                    "text": "                -self.get_focus_rect_size(),",
                    "type": "line"
                },
                {
                    "text": "                -self.get_focus_rect_size()",
                    "type": "line"
                },
                {
                    "text": "            ),",
                    "type": "line"
                },
                {
                    "text": "            COLOR_SELECTION,",
                    "type": "line"
                },
                {
                    "text": "            self.get_focus_rect_size()",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def get_focus_rect_size(self):",
                    "type": "line"
                },
                {
                    "text": "    return 2",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def get_focus_rect(self):",
                    "type": "line"
                },
                {
                    "text": "    return self.allotted_rect",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def get_used_rect(self):",
                    "type": "line"
                },
                {
                    "text": "    return self.allotted_rect",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.469293",
            "type": "code"
        },
        "bb1078db928c4a689b896659d62e5e4c": {
            "tags": [
                "title"
            ],
            "text": "Note Browser",
            "timestamp_created": "2021-06-19T07:27:52.644407"
        },
        "bdda899e7d3d4501a5a3bf817aea2cbe": {
            "chunkpath": [
                "end-to-end"
            ],
            "filepath": [
                "test_smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def test_open_note(self):",
                    "type": "line"
                },
                {
                    "text": "    self.driver.iteration(elapsed_ms=300+1)",
                    "type": "line"
                },
                {
                    "text": "    self.assert_drawn_image_is(\"main_screen.png\")",
                    "type": "line"
                },
                {
                    "text": "    self.driver.iteration(events=[",
                    "type": "line"
                },
                {
                    "text": "        MouseMotionEvent((200, 300)),",
                    "type": "line"
                },
                {
                    "text": "        LeftMouseDownEvent((200, 300)),",
                    "type": "line"
                },
                {
                    "text": "        LeftMouseUpEvent((200, 300)),",
                    "type": "line"
                },
                {
                    "text": "    ], elapsed_ms=400+1)",
                    "type": "line"
                },
                {
                    "text": "    self.assert_drawn_image_is(\"new_note_opened.png\")",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.093303",
            "type": "code"
        },
        "bef0e90db2fd4445973a9afd8b0cf636": {
            "chunkpath": [
                "base classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class Immutable(object):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, data, undo_list_size=20):",
                    "type": "line"
                },
                {
                    "text": "        self.data = data",
                    "type": "line"
                },
                {
                    "text": "        self.undo_list_size = undo_list_size",
                    "type": "line"
                },
                {
                    "text": "        self.undo_list = []",
                    "type": "line"
                },
                {
                    "text": "        self.redo_list = []",
                    "type": "line"
                },
                {
                    "text": "        self.transaction_count = 0",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    @contextlib.contextmanager",
                    "type": "line"
                },
                {
                    "text": "    def transaction(self):",
                    "type": "line"
                },
                {
                    "text": "        current_data = self.data",
                    "type": "line"
                },
                {
                    "text": "        self.transaction_count += 1",
                    "type": "line"
                },
                {
                    "text": "        try:",
                    "type": "line"
                },
                {
                    "text": "            yield",
                    "type": "line"
                },
                {
                    "text": "        except:",
                    "type": "line"
                },
                {
                    "text": "            self.data = current_data",
                    "type": "line"
                },
                {
                    "text": "            raise",
                    "type": "line"
                },
                {
                    "text": "        finally:",
                    "type": "line"
                },
                {
                    "text": "            self.transaction_count -= 1",
                    "type": "line"
                },
                {
                    "text": "            if self.transaction_count == 0 and self.data is not current_data:",
                    "type": "line"
                },
                {
                    "text": "                self.undo_list.append(current_data)",
                    "type": "line"
                },
                {
                    "text": "                self.undo_list = self.undo_list[-self.undo_list_size:]",
                    "type": "line"
                },
                {
                    "text": "                self.redo_list.clear()",
                    "type": "line"
                },
                {
                    "text": "                self._data_changed()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def undo(self):",
                    "type": "line"
                },
                {
                    "text": "        if self.transaction_count == 0 and self.undo_list:",
                    "type": "line"
                },
                {
                    "text": "            self.redo_list.insert(0, self.data)",
                    "type": "line"
                },
                {
                    "text": "            self.data = self.undo_list.pop(-1)",
                    "type": "line"
                },
                {
                    "text": "            self._data_changed()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def redo(self):",
                    "type": "line"
                },
                {
                    "text": "        if self.transaction_count == 0 and self.redo_list:",
                    "type": "line"
                },
                {
                    "text": "            self.undo_list.append(self.data)",
                    "type": "line"
                },
                {
                    "text": "            self.data = self.redo_list.pop(0)",
                    "type": "line"
                },
                {
                    "text": "            self._data_changed()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _get(self, *path):",
                    "type": "line"
                },
                {
                    "text": "        data = self.data",
                    "type": "line"
                },
                {
                    "text": "        for part in path:",
                    "type": "line"
                },
                {
                    "text": "            data = data[part]",
                    "type": "line"
                },
                {
                    "text": "        return data",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _set(self, data):",
                    "type": "line"
                },
                {
                    "text": "        with self.transaction():",
                    "type": "line"
                },
                {
                    "text": "            self.data = data",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _data_changed(self):",
                    "type": "line"
                },
                {
                    "text": "        pass",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:54.028438",
            "type": "code"
        },
        "bf2aabce618349f69ec6b3c43ce03382": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class SearchBar(VBox):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    SEARCH_FIELD_HEIHGT = 50",
                    "type": "line"
                },
                {
                    "text": "    VPADDING = 8",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, window, parent, db, overlay, note_settings, open_callback, dismiss_callback):",
                    "type": "line"
                },
                {
                    "text": "        VBox.__init__(self, window, parent, height=0, visible=False)",
                    "type": "line"
                },
                {
                    "text": "        self.db = db",
                    "type": "line"
                },
                {
                    "text": "        self.open_callback = open_callback",
                    "type": "line"
                },
                {
                    "text": "        self.dismiss_callback = dismiss_callback",
                    "type": "line"
                },
                {
                    "text": "        self.animation = Animation()",
                    "type": "line"
                },
                {
                    "text": "        self.notes = []",
                    "type": "line"
                },
                {
                    "text": "        self.search_results = self.instantiate(SearchResults,",
                    "type": "line"
                },
                {
                    "text": "            db, overlay, note_settings, open_callback,",
                    "type": "line"
                },
                {
                    "text": "            hpadding=self.VPADDING",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "        self.search_field = self.instantiate(SearchField,",
                    "type": "line"
                },
                {
                    "text": "            self.search_results,",
                    "type": "line"
                },
                {
                    "text": "            self.dismiss_callback,",
                    "type": "line"
                },
                {
                    "text": "            text_size=20",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "        self.add(self.instantiate(Padding,",
                    "type": "line"
                },
                {
                    "text": "            self.search_field,",
                    "type": "line"
                },
                {
                    "text": "            hpadding=lambda rect: int(rect.width*0.08),",
                    "type": "line"
                },
                {
                    "text": "            vpadding=lambda rect: self.VPADDING,",
                    "type": "line"
                },
                {
                    "text": "            height=self.SEARCH_FIELD_HEIHGT",
                    "type": "line"
                },
                {
                    "text": "        ))",
                    "type": "line"
                },
                {
                    "text": "        self.add(self.search_results)",
                    "type": "line"
                },
                {
                    "text": "        self.add(self.instantiate(Widget, height=self.VPADDING))",
                    "type": "line"
                },
                {
                    "text": "        self.ideal_height = 200",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def focus(self):",
                    "type": "line"
                },
                {
                    "text": "        self.search_field.focus()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def is_visible(self):",
                    "type": "line"
                },
                {
                    "text": "        return Widget.is_visible(self) or self.animation.active()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def start_search(self):",
                    "type": "line"
                },
                {
                    "text": "        if not Widget.is_visible(self):",
                    "type": "line"
                },
                {
                    "text": "            self.toggle_visible()",
                    "type": "line"
                },
                {
                    "text": "            self.animation.reverse(200)",
                    "type": "line"
                },
                {
                    "text": "        self.focus()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def hide(self):",
                    "type": "line"
                },
                {
                    "text": "        if Widget.is_visible(self):",
                    "type": "line"
                },
                {
                    "text": "            self.toggle_visible()",
                    "type": "line"
                },
                {
                    "text": "            self.animation.reverse(200)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def update(self, rect, elapsed_ms):",
                    "type": "line"
                },
                {
                    "text": "        self.ideal_rect = rect.copy()",
                    "type": "line"
                },
                {
                    "text": "        self.ideal_rect.height = self.ideal_height",
                    "type": "line"
                },
                {
                    "text": "        VBox.update(self, self.ideal_rect, elapsed_ms)",
                    "type": "line"
                },
                {
                    "text": "        self.ideal_height = self.SEARCH_FIELD_HEIHGT + self.VPADDING + self.search_results.wanted_height",
                    "type": "line"
                },
                {
                    "text": "        percent = self.animation.advance(elapsed_ms)",
                    "type": "line"
                },
                {
                    "text": "        self.update_height = self.get_height()",
                    "type": "line"
                },
                {
                    "text": "        if Widget.is_visible(self):",
                    "type": "line"
                },
                {
                    "text": "            self.alpha = int(255 * percent)",
                    "type": "line"
                },
                {
                    "text": "            self.resize(height=int(self.ideal_height * percent))",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            self.alpha = 255 - int(255 * percent)",
                    "type": "line"
                },
                {
                    "text": "            self.resize(height=self.ideal_height - int(self.ideal_height * percent))",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def draw(self, canvas):",
                    "type": "line"
                },
                {
                    "text": "        canvas.blit(",
                    "type": "line"
                },
                {
                    "text": "            canvas.create_image(self.ideal_rect.size, self._draw_search_bar_image),",
                    "type": "line"
                },
                {
                    "text": "            (0, -self.ideal_height+self.update_height),",
                    "type": "line"
                },
                {
                    "text": "            alpha=self.alpha",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _draw_search_bar_image(self, canvas):",
                    "type": "line"
                },
                {
                    "text": "        canvas.fill_rect(",
                    "type": "line"
                },
                {
                    "text": "            pygame.Rect(0, 0, self.ideal_rect.width, self.ideal_rect.height),",
                    "type": "line"
                },
                {
                    "text": "            color=COLOR_SEARCH_BAR",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "        VBox.draw(self, canvas)",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.621666",
            "type": "code"
        },
        "bff6c2de92c6405cb51883b79c03ba4b": {
            "links": [],
            "tags": [],
            "text": "Render styled text.\n",
            "timestamp_created": "2021-04-25T05:47:31.899827"
        },
        "c180b5ec4c2447009a4ac1a87d7dad40": {
            "text": "If a child widget in a `Box` is resized in the `update` method, the new size will not be used until the next game loop iteration.",
            "timestamp_created": "2021-06-19T07:27:53.314801"
        },
        "c29afb92aa7c4dd3849738e3158ec2b4": {
            "links": [],
            "tags": [],
            "text": "Feature idea: navigate to random idea for leisure browsing.\n",
            "timestamp_created": "2021-05-24T20:00:19.017775"
        },
        "c4426c34655c47b3b69dd416b4cd26fc": {
            "chunkpath": [
                "base classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class WindowFocusMixin(object):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self):",
                    "type": "line"
                },
                {
                    "text": "        self.focused_widget = None",
                    "type": "line"
                },
                {
                    "text": "        self.quick_focused_widget = None",
                    "type": "line"
                },
                {
                    "text": "        self.saved_focus = None",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def set_focus(self, widget):",
                    "type": "line"
                },
                {
                    "text": "        self.focused_widget = widget",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def set_quick_focus(self, widget):",
                    "type": "line"
                },
                {
                    "text": "        self.quick_focused_widget = widget",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def clear_quick_focus(self):",
                    "type": "line"
                },
                {
                    "text": "        if self.quick_focused_widget is not None:",
                    "type": "line"
                },
                {
                    "text": "            self.quick_focused_widget = None",
                    "type": "line"
                },
                {
                    "text": "            return True",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            return False",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def is_focused(self, widget):",
                    "type": "line"
                },
                {
                    "text": "        if self.quick_focused_widget is None:",
                    "type": "line"
                },
                {
                    "text": "            return widget is self.focused_widget",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            return widget is self.quick_focused_widget",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def save_focus(self):",
                    "type": "line"
                },
                {
                    "text": "        if self.saved_focus is None:",
                    "type": "line"
                },
                {
                    "text": "            self.saved_focus = (self.focused_widget, self.quick_focused_widget)",
                    "type": "line"
                },
                {
                    "text": "            self.focused_widget = None",
                    "type": "line"
                },
                {
                    "text": "            self.quick_focused_widget = None",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def restore_focus(self):",
                    "type": "line"
                },
                {
                    "text": "        if self.saved_focus is not None:",
                    "type": "line"
                },
                {
                    "text": "            self.focused_widget, self.quick_focused_widget = self.saved_focus",
                    "type": "line"
                },
                {
                    "text": "            self.saved_focus = None",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.200062",
            "type": "code"
        },
        "c4cb89fe89d04a5f8fa001eba0d7770d": {
            "links": [],
            "tags": [],
            "text": "The incoming arrow should be drawn by the Note so it is only drawn once.\n",
            "timestamp_created": "2021-04-25T05:44:22.948737"
        },
        "c54edb9b2d204a6b89d5faf2c51b13da": {
            "chunkpath": [
                "classes",
                "SearchResults"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def __init__(self, window, parent, db, overlay, note_settings, open_callback, hpadding):",
                    "type": "line"
                },
                {
                    "text": "    HBox.__init__(self, window, parent)",
                    "type": "line"
                },
                {
                    "text": "    self.db = db",
                    "type": "line"
                },
                {
                    "text": "    self.overlay = overlay",
                    "type": "line"
                },
                {
                    "text": "    self.note_settings = note_settings",
                    "type": "line"
                },
                {
                    "text": "    self.open_callback = open_callback",
                    "type": "line"
                },
                {
                    "text": "    self.hpadding = hpadding",
                    "type": "line"
                },
                {
                    "text": "    self.update_search_text(\"\")",
                    "type": "line"
                },
                {
                    "text": "    self.set_num_results(NUM_SEARCH_RESULTS)",
                    "type": "line"
                },
                {
                    "text": "    self.by_id = {}",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "def __init__(self, window, parent, db, overlay, note_settings, open_callback, hpadding):\n    HBox.__init__(self, window, parent)\n    self.db = db\n    self.overlay = overlay\n    self.note_settings = note_settings\n    self.open_callback = open_callback\n    self.hpadding = hpadding\n    self.update_search_text(\"\")\n    self.set_num_results(NUM_SEARCH_RESULTS)\n    self.by_id = {}\n\ndef inc_results(self):\n    self.set_num_results(self.num_results + 1)\n\ndef dec_results(self):\n    self.set_num_results(self.num_results - 1)\n\ndef set_num_results(self, num):\n    self.num_results = max(3, min(12, num))\n\ndef update_search_text(self, text):\n    self.text = text\n\ndef update(self, rect, elapsed_ms):\n    self.wanted_height = int(round(\n        (rect.width-self.hpadding) / self.num_results\n        *\n        self.note_settings.get_height_width_ratio()\n    ))\n    self._update_notes_list()\n    HBox.update(self, rect, elapsed_ms)\n\ndef _update_notes_list(self):\n    by_id = {}\n    self.clear()\n    self.add(self.instantiate(Widget, width=self.hpadding/2))\n    for note_id, note_data in self.db.get_notes(self.text)[:self.num_results]:\n        if note_id in self.by_id:\n            note = self.add(self.by_id[note_id])\n        else:\n            note = self.add(self.instantiate(Padding,\n                self.instantiate(SearchNote,\n                    self.db,\n                    self.overlay,\n                    self.note_settings,\n                    note_id,\n                    self.open_callback\n                ),\n                hpadding=lambda rect: self.hpadding/2\n            ))\n        by_id[note_id] = note\n    while len(self.children) <= self.num_results:\n        self.add(self.instantiate(Widget))\n    self.add(self.instantiate(Widget, width=self.hpadding/2))\n    self.by_id = by_id\n",
            "timestamp_created": "2021-06-20T12:13:16.558067",
            "type": "code"
        },
        "c55248cf1ef74c2a9df030ffab9ccf90": {
            "links": [],
            "tags": [
                "title"
            ],
            "text": "Architecture\n",
            "timestamp_created": "2021-04-25T05:30:25.221421"
        },
        "c5e2d7f312654d389e9e7042895f2192": {
            "chunkpath": [
                "imports"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "from collections import defaultdict",
                    "type": "line"
                },
                {
                    "text": "import difflib",
                    "type": "line"
                },
                {
                    "text": "import re",
                    "type": "line"
                },
                {
                    "text": "import datetime",
                    "type": "line"
                },
                {
                    "text": "import sys",
                    "type": "line"
                },
                {
                    "text": "import uuid",
                    "type": "line"
                },
                {
                    "text": "import webbrowser",
                    "type": "line"
                },
                {
                    "text": "import math",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.612579",
            "type": "code"
        },
        "c69d9bc1cb314c60a88e1051aa3bd326": {
            "chunkpath": [
                "functions"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def create_cairo_image(pygame_cairo_surface):",
                    "type": "line"
                },
                {
                    "text": "    return cairo.ImageSurface.create_for_data(",
                    "type": "line"
                },
                {
                    "text": "        pygame_cairo_surface.get_buffer(),",
                    "type": "line"
                },
                {
                    "text": "        cairo.FORMAT_ARGB32,",
                    "type": "line"
                },
                {
                    "text": "        *pygame_cairo_surface.get_size()",
                    "type": "line"
                },
                {
                    "text": "    )",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.925963",
            "type": "code"
        },
        "c79b278199e343e69d2dede9e8339a33": {
            "chunkpath": [
                "functions"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def pygame_main(root_widget_cls, *args, **kwargs):",
                    "type": "line"
                },
                {
                    "text": "    pygame.init()",
                    "type": "line"
                },
                {
                    "text": "    pygame.key.set_repeat(500, 30)",
                    "type": "line"
                },
                {
                    "text": "    root_widget = root_widget_cls(PygameWindow(), None, *args, **kwargs)",
                    "type": "line"
                },
                {
                    "text": "    screen = pygame.display.set_mode((1280, 720), pygame.RESIZABLE)",
                    "type": "line"
                },
                {
                    "text": "    clock = pygame.time.Clock()",
                    "type": "line"
                },
                {
                    "text": "    external_text_entries = ExternalTextEntries()",
                    "type": "line"
                },
                {
                    "text": "    pygame.time.set_timer(USER_EVENT_CHECK_EXTERNAL, 1000)",
                    "type": "line"
                },
                {
                    "text": "    pygame_cairo_surface = create_pygame_cairo_surface(screen)",
                    "type": "line"
                },
                {
                    "text": "    while True:",
                    "type": "line"
                },
                {
                    "text": "        for event in pygame.event.get():",
                    "type": "line"
                },
                {
                    "text": "            if event.type == pygame.QUIT:",
                    "type": "line"
                },
                {
                    "text": "                return",
                    "type": "line"
                },
                {
                    "text": "            elif event.type == pygame.VIDEORESIZE:",
                    "type": "line"
                },
                {
                    "text": "                pygame_cairo_surface = create_pygame_cairo_surface(screen)",
                    "type": "line"
                },
                {
                    "text": "            elif event.type == USER_EVENT_CHECK_EXTERNAL:",
                    "type": "line"
                },
                {
                    "text": "                external_text_entries.check()",
                    "type": "line"
                },
                {
                    "text": "            elif event.type == USER_EVENT_EXTERNAL_TEXT_ENTRY:",
                    "type": "line"
                },
                {
                    "text": "                external_text_entries.add(event.entry)",
                    "type": "line"
                },
                {
                    "text": "            else:",
                    "type": "line"
                },
                {
                    "text": "                root_widget.process_event(PygameEvent(event))",
                    "type": "line"
                },
                {
                    "text": "        root_widget.update(screen.get_rect(), clock.get_time())",
                    "type": "line"
                },
                {
                    "text": "        pygame_cairo_surface.lock()",
                    "type": "line"
                },
                {
                    "text": "        root_widget.draw(CairoCanvas(create_cairo_image(pygame_cairo_surface)))",
                    "type": "line"
                },
                {
                    "text": "        pygame_cairo_surface.unlock()",
                    "type": "line"
                },
                {
                    "text": "        screen.blit(pygame_cairo_surface, (0, 0))",
                    "type": "line"
                },
                {
                    "text": "        pygame.display.flip()",
                    "type": "line"
                },
                {
                    "text": "        clock.tick(60)",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.784784",
            "type": "code"
        },
        "c82b22fc526b4d92a1600c8a28c0a290": {
            "chunkpath": [
                "functions"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def format_title(name, path):",
                    "type": "line"
                },
                {
                    "text": "    return \"{} ({}) - {}\".format(",
                    "type": "line"
                },
                {
                    "text": "        os.path.basename(path),",
                    "type": "line"
                },
                {
                    "text": "        os.path.abspath(os.path.dirname(path)),",
                    "type": "line"
                },
                {
                    "text": "        name",
                    "type": "line"
                },
                {
                    "text": "    )",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:54.266785",
            "type": "code"
        },
        "cadbc90bb17945089ec28f4f4c1b18f3": {
            "chunkpath": [
                "functions"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def strip_last_word(text):",
                    "type": "line"
                },
                {
                    "text": "    remaining_parts = text.rstrip().split(\" \")[:-1]",
                    "type": "line"
                },
                {
                    "text": "    if remaining_parts:",
                    "type": "line"
                },
                {
                    "text": "        return \" \".join(remaining_parts) + \" \"",
                    "type": "line"
                },
                {
                    "text": "    else:",
                    "type": "line"
                },
                {
                    "text": "        return \"\"",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:54.321742",
            "type": "code"
        },
        "cafedea05fb241ce84413b7558c1c608": {
            "chunkpath": [
                "classes",
                "NoteDb"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def _sort_links(self, links):",
                    "type": "line"
                },
                {
                    "text": "    return sorted(",
                    "type": "line"
                },
                {
                    "text": "        links,",
                    "type": "line"
                },
                {
                    "text": "        key=lambda item: item[1][\"timestamp_created\"]",
                    "type": "line"
                },
                {
                    "text": "    )",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-20T12:22:06.076946",
            "type": "code"
        },
        "cc229c995b024d06a40873c636aab254": {
            "chunkpath": [
                "classes",
                "NoteDb"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def consolidate_files(self):",
                    "type": "line"
                },
                {
                    "text": "    with self.transaction():",
                    "type": "line"
                },
                {
                    "text": "        parts = self.collect_parts()",
                    "type": "line"
                },
                {
                    "text": "        notes = set()",
                    "type": "line"
                },
                {
                    "text": "        for (file, chunk) in parts.keys():",
                    "type": "line"
                },
                {
                    "text": "            if file != tuple() and chunk == tuple():",
                    "type": "line"
                },
                {
                    "text": "                notes.update(self.consolidate(os.path.join(*file), file, chunk, parts))",
                    "type": "line"
                },
                {
                    "text": "        if notes:",
                    "type": "line"
                },
                {
                    "text": "            parts = self.collect_parts()",
                    "type": "line"
                },
                {
                    "text": "            report = [",
                    "type": "line"
                },
                {
                    "text": "                \"Consolidation report:\",",
                    "type": "line"
                },
                {
                    "text": "                \"\",",
                    "type": "line"
                },
                {
                    "text": "            ]",
                    "type": "line"
                },
                {
                    "text": "            for (file, chunk) in parts.keys():",
                    "type": "line"
                },
                {
                    "text": "                if file != tuple() and chunk == tuple():",
                    "type": "line"
                },
                {
                    "text": "                    path = os.path.join(*file)",
                    "type": "line"
                },
                {
                    "text": "                    with open(path) as f:",
                    "type": "line"
                },
                {
                    "text": "                        file_on_disk = f.read()",
                    "type": "line"
                },
                {
                    "text": "                    file_in_memory = self.collect(file, chunk, parts)",
                    "type": "line"
                },
                {
                    "text": "                    if file_on_disk != file_in_memory:",
                    "type": "line"
                },
                {
                    "text": "                        report.append(f\"  FAIL: {path}\")",
                    "type": "line"
                },
                {
                    "text": "                        with open(f\"{path}.orig\", \"w\") as f:",
                    "type": "line"
                },
                {
                    "text": "                            f.write(file_on_disk)",
                    "type": "line"
                },
                {
                    "text": "                    else:",
                    "type": "line"
                },
                {
                    "text": "                        report.append(f\"  OK:   {path}\")",
                    "type": "line"
                },
                {
                    "text": "            report_id = self.create_note(**{",
                    "type": "line"
                },
                {
                    "text": "                \"type\": \"code\",",
                    "type": "line"
                },
                {
                    "text": "                \"text\": \"<code>\",",
                    "type": "line"
                },
                {
                    "text": "                \"filepath\": [],",
                    "type": "line"
                },
                {
                    "text": "                \"chunkpath\": [],",
                    "type": "line"
                },
                {
                    "text": "                \"fragments\": [{\"type\": \"line\", \"text\": x} for x in report]",
                    "type": "line"
                },
                {
                    "text": "            })",
                    "type": "line"
                },
                {
                    "text": "            for affected_note in notes:",
                    "type": "line"
                },
                {
                    "text": "                self.create_link(report_id, affected_note)",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-20T12:22:06.076617",
            "type": "code"
        },
        "cd1a983e9fc54e32b67bddd67b11d5a5": {
            "chunkpath": [],
            "filepath": [],
            "fragments": [
                {
                    "text": "+------------------------+",
                    "type": "line"
                },
                {
                    "text": "|  Application           |",
                    "type": "line"
                },
                {
                    "text": "+--------------------+-+-+",
                    "type": "line"
                },
                {
                    "text": "|  Widget Framework  | |",
                    "type": "line"
                },
                {
                    "text": "+----------------+-+-+ |",
                    "type": "line"
                },
                {
                    "text": "                   |   |",
                    "type": "line"
                },
                {
                    "text": "+----------------+ |   |",
                    "type": "line"
                },
                {
                    "text": "|  Pygame/Cairo  | |   |",
                    "type": "line"
                },
                {
                    "text": "+----------------+ |   |",
                    "type": "line"
                },
                {
                    "text": "         v         v   v",
                    "type": "line"
                },
                {
                    "text": "+------------------------+",
                    "type": "line"
                },
                {
                    "text": "|      Utilities         |",
                    "type": "line"
                },
                {
                    "text": "+------------------------+",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.609743",
            "type": "code"
        },
        "ceeadc4c09f64510bc4a1b9c646698aa": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class DebugBar(Widget):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    IDEAL_HEIGHT = 50",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, window, parent):",
                    "type": "line"
                },
                {
                    "text": "        Widget.__init__(self, window, parent, height=self.IDEAL_HEIGHT, visible=DEBUG)",
                    "type": "line"
                },
                {
                    "text": "        self.animation = Animation()",
                    "type": "line"
                },
                {
                    "text": "        self.average_elapsed = 0",
                    "type": "line"
                },
                {
                    "text": "        self.tot_elapsed_time = 0",
                    "type": "line"
                },
                {
                    "text": "        self.frame_count = 0",
                    "type": "line"
                },
                {
                    "text": "        self.fps = 0",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def is_visible(self):",
                    "type": "line"
                },
                {
                    "text": "        return Widget.is_visible(self) or self.animation.active()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def toggle(self):",
                    "type": "line"
                },
                {
                    "text": "        self.toggle_visible()",
                    "type": "line"
                },
                {
                    "text": "        self.animation.reverse(200)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def update(self, rect, elapsed_ms):",
                    "type": "line"
                },
                {
                    "text": "        Widget.update(self, rect, elapsed_ms)",
                    "type": "line"
                },
                {
                    "text": "        self.tot_elapsed_time += elapsed_ms",
                    "type": "line"
                },
                {
                    "text": "        self.frame_count += 1",
                    "type": "line"
                },
                {
                    "text": "        if self.tot_elapsed_time > 1000:",
                    "type": "line"
                },
                {
                    "text": "            self.average_elapsed = int(round(self.tot_elapsed_time / self.frame_count))",
                    "type": "line"
                },
                {
                    "text": "            self.fps = self.frame_count",
                    "type": "line"
                },
                {
                    "text": "            self.frame_count = 0",
                    "type": "line"
                },
                {
                    "text": "            self.tot_elapsed_time -= 1000",
                    "type": "line"
                },
                {
                    "text": "        percent = self.animation.advance(elapsed_ms)",
                    "type": "line"
                },
                {
                    "text": "        if Widget.is_visible(self):",
                    "type": "line"
                },
                {
                    "text": "            self.alpha = int(255 * percent)",
                    "type": "line"
                },
                {
                    "text": "            self.resize(height=int(self.IDEAL_HEIGHT * percent))",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            self.alpha = 255 - int(255 * percent)",
                    "type": "line"
                },
                {
                    "text": "            self.resize(height=self.IDEAL_HEIGHT - int(self.IDEAL_HEIGHT * percent))",
                    "type": "line"
                },
                {
                    "text": "        self.rect = rect",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def draw(self, canvas):",
                    "type": "line"
                },
                {
                    "text": "        canvas.blit(",
                    "type": "line"
                },
                {
                    "text": "            canvas.create_image((self.rect.width, self.IDEAL_HEIGHT), self._draw_bar),",
                    "type": "line"
                },
                {
                    "text": "            self.rect,",
                    "type": "line"
                },
                {
                    "text": "            alpha=self.alpha",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "        Widget.draw(self, canvas)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _draw_bar(self, canvas):",
                    "type": "line"
                },
                {
                    "text": "        rect = pygame.Rect((0, 0), (self.rect.width, self.IDEAL_HEIGHT))",
                    "type": "line"
                },
                {
                    "text": "        canvas.fill_rect(rect, color=(84, 106, 134))",
                    "type": "line"
                },
                {
                    "text": "        canvas.render_text(",
                    "type": "line"
                },
                {
                    "text": "            f\"elapsed_ms = {self.average_elapsed} | fps = {self.fps}\",",
                    "type": "line"
                },
                {
                    "text": "            rect.inflate(-20, -20),",
                    "type": "line"
                },
                {
                    "text": "            boxalign=\"midleft\",",
                    "type": "line"
                },
                {
                    "text": "            size=15,",
                    "type": "line"
                },
                {
                    "text": "            face=\"Monospace\"",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.736704",
            "type": "code"
        },
        "d06e4570dd5540be9f1b56f03c2574dd": {
            "chunkpath": [
                "classes",
                "NoteDb"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def consolidate(self, path, file, chunk, parts):",
                    "type": "line"
                },
                {
                    "text": "    old_lines = []",
                    "type": "line"
                },
                {
                    "text": "    self.collect_lines(old_lines, file, chunk, parts)",
                    "type": "line"
                },
                {
                    "text": "    with open(path) as f:",
                    "type": "line"
                },
                {
                    "text": "        new_lines = f.read().splitlines()",
                    "type": "line"
                },
                {
                    "text": "    sm = difflib.SequenceMatcher(a=[x[1] for x in old_lines], b=new_lines)",
                    "type": "line"
                },
                {
                    "text": "    note_actions = defaultdict(list)",
                    "type": "line"
                },
                {
                    "text": "    for tag, i1, i2, j1, j2 in sm.get_opcodes():",
                    "type": "line"
                },
                {
                    "text": "        if tag == \"replace\":",
                    "type": "line"
                },
                {
                    "text": "            first = None",
                    "type": "line"
                },
                {
                    "text": "            for tag, line in old_lines[i1:i2]:",
                    "type": "line"
                },
                {
                    "text": "                if tag is not None:",
                    "type": "line"
                },
                {
                    "text": "                    note_id, prefix, fragment_index = tag",
                    "type": "line"
                },
                {
                    "text": "                    if first is None:",
                    "type": "line"
                },
                {
                    "text": "                        first = tag",
                    "type": "line"
                },
                {
                    "text": "                    note_actions[note_id].append(('remove', fragment_index))",
                    "type": "line"
                },
                {
                    "text": "            if first:",
                    "type": "line"
                },
                {
                    "text": "                note_actions[first[0]].append((",
                    "type": "line"
                },
                {
                    "text": "                    'extend',",
                    "type": "line"
                },
                {
                    "text": "                    first[2],",
                    "type": "line"
                },
                {
                    "text": "                    [self.strip_prefix(first[1], x) for x in new_lines[j1:j2]]",
                    "type": "line"
                },
                {
                    "text": "                ))",
                    "type": "line"
                },
                {
                    "text": "        elif tag == \"delete\":",
                    "type": "line"
                },
                {
                    "text": "            for tag, line in old_lines[i1:i2]:",
                    "type": "line"
                },
                {
                    "text": "                if tag is not None:",
                    "type": "line"
                },
                {
                    "text": "                    note_id, prefix, fragment_index = tag",
                    "type": "line"
                },
                {
                    "text": "                    note_actions[note_id].append(('remove', fragment_index))",
                    "type": "line"
                },
                {
                    "text": "        elif tag == \"insert\":",
                    "type": "line"
                },
                {
                    "text": "            def indices(index, items):",
                    "type": "line"
                },
                {
                    "text": "                index_up = index - 1",
                    "type": "line"
                },
                {
                    "text": "                index_down = index",
                    "type": "line"
                },
                {
                    "text": "                while index_up >= 0 or index_down < len(items):",
                    "type": "line"
                },
                {
                    "text": "                    if index_up >= 0:",
                    "type": "line"
                },
                {
                    "text": "                        yield (index_up, 1)",
                    "type": "line"
                },
                {
                    "text": "                        index_up -= 1",
                    "type": "line"
                },
                {
                    "text": "                    if index_down < len(items):",
                    "type": "line"
                },
                {
                    "text": "                        yield (index_down, 0)",
                    "type": "line"
                },
                {
                    "text": "                        index_down += 1",
                    "type": "line"
                },
                {
                    "text": "                raise ValueError(\"ran out of indices to try\")",
                    "type": "line"
                },
                {
                    "text": "            for index, offset in indices(i1, old_lines):",
                    "type": "line"
                },
                {
                    "text": "                tag, line = old_lines[index]",
                    "type": "line"
                },
                {
                    "text": "                if tag:",
                    "type": "line"
                },
                {
                    "text": "                    note_id, prefix, fragment_index = tag",
                    "type": "line"
                },
                {
                    "text": "                    note_actions[note_id].append((",
                    "type": "line"
                },
                {
                    "text": "                        'extend',",
                    "type": "line"
                },
                {
                    "text": "                        fragment_index+offset,",
                    "type": "line"
                },
                {
                    "text": "                        [self.strip_prefix(prefix, x) for x in new_lines[j1:j2]]",
                    "type": "line"
                },
                {
                    "text": "                    ))",
                    "type": "line"
                },
                {
                    "text": "                    break",
                    "type": "line"
                },
                {
                    "text": "        elif tag == \"equal\":",
                    "type": "line"
                },
                {
                    "text": "            # Nothing to do",
                    "type": "line"
                },
                {
                    "text": "            pass",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            raise ValueError(f\"Unknown op_code tag {tag}\")",
                    "type": "line"
                },
                {
                    "text": "    notes = set()",
                    "type": "line"
                },
                {
                    "text": "    for note_id, actions in note_actions.items():",
                    "type": "line"
                },
                {
                    "text": "        note = self.get_note_data(note_id)",
                    "type": "line"
                },
                {
                    "text": "        self.update_note(",
                    "type": "line"
                },
                {
                    "text": "            note_id,",
                    "type": "line"
                },
                {
                    "text": "            fragments=self.consolidate_fragments(note[\"fragments\"], actions)",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "        notes.add(note_id)",
                    "type": "line"
                },
                {
                    "text": "    return notes",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-20T12:22:06.076669",
            "type": "code"
        },
        "d25059d661ca4f9fa6fc94c24c7969f3": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class ExternalTextEntries(object):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self):",
                    "type": "line"
                },
                {
                    "text": "        self.entries = []",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def add(self, entry):",
                    "type": "line"
                },
                {
                    "text": "        self.entries.append(entry)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def check(self):",
                    "type": "line"
                },
                {
                    "text": "        self.entries = [",
                    "type": "line"
                },
                {
                    "text": "            entry",
                    "type": "line"
                },
                {
                    "text": "            for entry in self.entries",
                    "type": "line"
                },
                {
                    "text": "            if entry.check()",
                    "type": "line"
                },
                {
                    "text": "        ]",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:54.080964",
            "type": "code"
        },
        "d520425e067a453ebd7d8c4e35a0d9ca": {
            "tags": [
                "title"
            ],
            "text": "Debug Bar",
            "timestamp_created": "2021-06-19T07:27:52.726691"
        },
        "d62438f0673249bf942eea26dd607d67": {
            "chunkpath": [
                "classes",
                "NoteDb"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def create_link(self, from_id, to_id):",
                    "type": "line"
                },
                {
                    "text": "    link_id = genid()",
                    "type": "line"
                },
                {
                    "text": "    self._replace(links=dict(",
                    "type": "line"
                },
                {
                    "text": "        self._get(\"links\"),",
                    "type": "line"
                },
                {
                    "text": "        **{link_id: {",
                    "type": "line"
                },
                {
                    "text": "            \"from\": from_id,",
                    "type": "line"
                },
                {
                    "text": "            \"to\": to_id,",
                    "type": "line"
                },
                {
                    "text": "            \"timestamp_created\": utcnow_timestamp_string(),",
                    "type": "line"
                },
                {
                    "text": "        }}",
                    "type": "line"
                },
                {
                    "text": "    ))",
                    "type": "line"
                },
                {
                    "text": "    return link_id",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-20T12:22:06.077040",
            "type": "code"
        },
        "d89ad9a23c64463b80cc41d4701d3dfb": {
            "links": [],
            "tags": [],
            "text": "Clicking table and search bar should give them focus.\n",
            "timestamp_created": "2021-05-23T09:40:05.453754"
        },
        "d8feaf1314404d3d8c3482aeb67b7625": {
            "chunkpath": [
                "end-to-end"
            ],
            "filepath": [
                "test_smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def test_main_screen(self):",
                    "type": "line"
                },
                {
                    "text": "    self.driver.iteration(elapsed_ms=300+1)",
                    "type": "line"
                },
                {
                    "text": "    self.assert_drawn_image_is(\"main_screen.png\")",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.998650",
            "type": "code"
        },
        "da9762c4ecec40f39459a1cadb195672": {
            "chunkpath": [
                "base base classes",
                "BaseWidget",
                "interaction"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def update(self, rect, elapsed_ms):",
                    "type": "line"
                },
                {
                    "text": "    self.allotted_rect = rect",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.449537",
            "type": "code"
        },
        "db2737780b294f7b91ed1083778d234b": {
            "chunkpath": [],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "#!/usr/bin/env python3",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "blank_lines_before": 0,
                    "path": [
                        "imports"
                    ],
                    "prefix": "",
                    "type": "chunk"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "blank_lines_before": 1,
                    "path": [
                        "constants"
                    ],
                    "prefix": "",
                    "type": "chunk"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "blank_lines_before": 1,
                    "path": [
                        "base base classes"
                    ],
                    "prefix": "",
                    "type": "chunk"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "blank_lines_before": 1,
                    "path": [
                        "base classes"
                    ],
                    "prefix": "",
                    "type": "chunk"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "blank_lines_before": 1,
                    "path": [
                        "classes"
                    ],
                    "prefix": "",
                    "type": "chunk"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "blank_lines_before": 1,
                    "path": [
                        "functions"
                    ],
                    "prefix": "",
                    "type": "chunk"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "if __name__ == \"__main__\":",
                    "type": "line"
                },
                {
                    "text": "    main()",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.610285",
            "type": "code"
        },
        "db953d9fabca4399beab08ef48ae1b3f": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class TableNote(NoteBaseWidget):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, window, parent, db, overlay, settings, note_id, open_callback):",
                    "type": "line"
                },
                {
                    "text": "        NoteBaseWidget.__init__(self, window, parent, db, overlay, note_id, settings)",
                    "type": "line"
                },
                {
                    "text": "        self.overlay = overlay",
                    "type": "line"
                },
                {
                    "text": "        self.open_callback = open_callback",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def open_me(self):",
                    "type": "line"
                },
                {
                    "text": "        self.open_callback(self.note_id)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def update(self, rect, elapsed_ms):",
                    "type": "line"
                },
                {
                    "text": "        NoteBaseWidget.update(self, rect, elapsed_ms)",
                    "type": "line"
                },
                {
                    "text": "        self.rect = self._get_target(rect, align=\"center\")",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.714632",
            "type": "code"
        },
        "dbae893ae6f04417a7306767f8d722ce": {
            "links": [],
            "tags": [],
            "text": "Call update on children/base first, then update me.\n",
            "timestamp_created": "2021-04-25T04:49:00.173188"
        },
        "dd14b09c919e48f2b13caed0256c7c18": {
            "links": [],
            "tags": [],
            "text": "Navigation history: back/forward with mouse/keyboard.\n",
            "timestamp_created": "2021-04-25T05:38:07.477747"
        },
        "dd45e68bd5c24d6f93e1c0d6e2f93cd6": {
            "chunkpath": [
                "end-to-end"
            ],
            "filepath": [
                "test_smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def test_create_link(self):",
                    "type": "line"
                },
                {
                    "text": "    self.driver.iteration(elapsed_ms=300+1)",
                    "type": "line"
                },
                {
                    "text": "    self.assert_drawn_image_is(\"main_screen.png\")",
                    "type": "line"
                },
                {
                    "text": "    self.driver.iteration(events=[",
                    "type": "line"
                },
                {
                    "text": "        MouseMotionEvent((400, 300)),",
                    "type": "line"
                },
                {
                    "text": "        LeftMouseDownEvent((400, 300)),",
                    "type": "line"
                },
                {
                    "text": "        MouseMotionEvent((200, 300)),",
                    "type": "line"
                },
                {
                    "text": "    ], elapsed_ms=MS_PER_FRAME+1)",
                    "type": "line"
                },
                {
                    "text": "    self.assert_drawn_image_is(\"link_to_target.png\")",
                    "type": "line"
                },
                {
                    "text": "    self.driver.iteration(events=[",
                    "type": "line"
                },
                {
                    "text": "        LeftMouseUpEvent((200, 300)),",
                    "type": "line"
                },
                {
                    "text": "    ], elapsed_ms=400+1)",
                    "type": "line"
                },
                {
                    "text": "    self.assert_drawn_image_is(\"link_created.png\")",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.077200",
            "type": "code"
        },
        "de4893d9140f4fc0b623a31c81af267c": {
            "chunkpath": [
                "classes",
                "NoteText"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def _new_text(self):",
                    "type": "line"
                },
                {
                    "text": "    with self.db.transaction():",
                    "type": "line"
                },
                {
                    "text": "        fields = self._text_to_note_fields()",
                    "type": "line"
                },
                {
                    "text": "        if \"splits\" in fields:",
                    "type": "line"
                },
                {
                    "text": "            splits = fields.pop(\"splits\")",
                    "type": "line"
                },
                {
                    "text": "            self.db.update_note(self.note_id, **dict(fields, fragments=splits[0]))",
                    "type": "line"
                },
                {
                    "text": "            for fragments in splits[1:]:",
                    "type": "line"
                },
                {
                    "text": "                self.db.create_note(**dict(fields, fragments=fragments, text=\"<code>\"))",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            self.db.update_note(self.note_id, **fields)",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-20T12:27:02.675514",
            "type": "code"
        },
        "dee94b78ca4f4adaa5ad786c7d1b671c": {
            "chunkpath": [
                "constants"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "COLOR_SELECTION          = (214, 138, 208)",
                    "type": "line"
                },
                {
                    "text": "COLOR_SEARCH_BAR         = (108, 138, 173)",
                    "type": "line"
                },
                {
                    "text": "COLOR_BACKGROUND         = (134, 169, 214)",
                    "type": "line"
                },
                {
                    "text": "COLOR_ACTIVE             = (25, 204, 25)",
                    "type": "line"
                },
                {
                    "text": "COLOR_INACTIVE           = (204, 204, 204)",
                    "type": "line"
                },
                {
                    "text": "COLOR_LINE               = (114, 127, 178)",
                    "type": "line"
                },
                {
                    "text": "COLOR_VIRTUAL_LINE       = (185, 118, 169)",
                    "type": "line"
                },
                {
                    "text": "COLOR_NOTE_BG            = (250, 250, 250)",
                    "type": "line"
                },
                {
                    "text": "COLOR_NOTE_TEXT          = (20, 20, 20)",
                    "type": "line"
                },
                {
                    "text": "COLOR_NOTE_DATE_TEXT     = (100, 100, 100)",
                    "type": "line"
                },
                {
                    "text": "COLOR_NOTE_TAG_TEXT      = (100, 100, 255)",
                    "type": "line"
                },
                {
                    "text": "FONT_MONOSPACE           = \"Monospace\"",
                    "type": "line"
                },
                {
                    "text": "FONT_TEXT                = \"San-Serif\"",
                    "type": "line"
                },
                {
                    "text": "EDITOR_COMMAND           = [\"gvim\", \"--nofork\", None]",
                    "type": "line"
                },
                {
                    "text": "NUM_SEARCH_RESULTS       = 6",
                    "type": "line"
                },
                {
                    "text": "NEW_NOTE_TEXT            = \"Enter note text...\\n\"",
                    "type": "line"
                },
                {
                    "text": "KEY_QUIT                 = \"ctrl+q\"",
                    "type": "line"
                },
                {
                    "text": "KEY_UNDO                 = \"ctrl+z\"",
                    "type": "line"
                },
                {
                    "text": "KEY_REDO                 = \"ctrl+y\"",
                    "type": "line"
                },
                {
                    "text": "KEY_TOGGLE_DEBUG_BAR     = \"f1\"",
                    "type": "line"
                },
                {
                    "text": "KEY_CLEAR_FOCUS          = \"escape\"",
                    "type": "line"
                },
                {
                    "text": "KEY_DISMISS              = \"ctrl+g\"",
                    "type": "line"
                },
                {
                    "text": "KEY_INCREASE             = \"ctrl+shift+=\"",
                    "type": "line"
                },
                {
                    "text": "KEY_DECREASE             = \"ctrl+-\"",
                    "type": "line"
                },
                {
                    "text": "KEY_OPEN_SEARCH          = \"/\"",
                    "type": "line"
                },
                {
                    "text": "KEY_CREATE_NOTE          = \"c\"",
                    "type": "line"
                },
                {
                    "text": "KEY_EDIT_NOTE            = \"e\"",
                    "type": "line"
                },
                {
                    "text": "KEY_DELETE_NOTE          = \"d\"",
                    "type": "line"
                },
                {
                    "text": "KEY_UNLINK_NOTE          = \"u\"",
                    "type": "line"
                },
                {
                    "text": "KEY_OPEN_LINKS           = \"g\"",
                    "type": "line"
                },
                {
                    "text": "KEY_TOGGLE_TABLE_NETWORK = \"t\"",
                    "type": "line"
                },
                {
                    "text": "TAG_ATTRIBUTES           = [",
                    "type": "line"
                },
                {
                    "text": "    {\"name\": \"title\", \"textalign\": \"center\"},",
                    "type": "line"
                },
                {
                    "text": "]",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.967716",
            "type": "code"
        },
        "df59f68052454e8b8d648c503d0139ff": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class PygameWindow(WindowFocusMixin):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def set_title(self, title):",
                    "type": "line"
                },
                {
                    "text": "        pygame.display.set_caption(title)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def close(self):",
                    "type": "line"
                },
                {
                    "text": "        pygame.event.post(pygame.event.Event(pygame.QUIT))",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.806706",
            "type": "code"
        },
        "dfc61c882af9400c9501db2e1a5ee306": {
            "text": "`Box.update` gets passed a rect.",
            "timestamp_created": "2021-06-19T07:27:53.353145"
        },
        "e0d03a4a4ec0439fbea92d4625623a2c": {
            "chunkpath": [
                "classes",
                "SearchResults"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def dec_results(self):",
                    "type": "line"
                },
                {
                    "text": "    self.set_num_results(self.num_results - 1)",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-20T12:14:33.776704",
            "type": "code"
        },
        "e12a127c468640ac8711bf9d401cfd80": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class SearchResults(HBox):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "blank_lines_before": 1,
                    "path": [
                        "SearchResults"
                    ],
                    "prefix": "    ",
                    "type": "chunk"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.636280",
            "type": "code"
        },
        "e1c773d06f6947108931b33d87f75610": {
            "text": "I'm not sure if the game loop pattern is the ideal one. I'm also not sure if the division into the three methods are ideal. Another way to look at it is that it is all events. `update` and `draw` could be passed as events instead. But this is what we've got for now.",
            "timestamp_created": "2021-06-19T07:27:53.410411"
        },
        "e2921f12daf8427196865d7c7f11b732": {
            "chunkpath": [
                "base classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class ExternalTextEntry(object):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, text, editor_command):",
                    "type": "line"
                },
                {
                    "text": "        self.text = text",
                    "type": "line"
                },
                {
                    "text": "        self.f = tempfile.NamedTemporaryFile(suffix=\"-smartnotes-external-\")",
                    "type": "line"
                },
                {
                    "text": "        self.f.write(self.text.encode(\"utf-8\"))",
                    "type": "line"
                },
                {
                    "text": "        self.f.flush()",
                    "type": "line"
                },
                {
                    "text": "        self.p = subprocess.Popen([",
                    "type": "line"
                },
                {
                    "text": "            self.f.name if part is None else part",
                    "type": "line"
                },
                {
                    "text": "            for part",
                    "type": "line"
                },
                {
                    "text": "            in editor_command",
                    "type": "line"
                },
                {
                    "text": "        ])",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def check(self):",
                    "type": "line"
                },
                {
                    "text": "        self.f.seek(0)",
                    "type": "line"
                },
                {
                    "text": "        text = self.f.read().decode(\"utf-8\")",
                    "type": "line"
                },
                {
                    "text": "        if text != self.text:",
                    "type": "line"
                },
                {
                    "text": "            self.text = text",
                    "type": "line"
                },
                {
                    "text": "            self._new_text()",
                    "type": "line"
                },
                {
                    "text": "        if self.p.poll() is not None:",
                    "type": "line"
                },
                {
                    "text": "            self.f.close()",
                    "type": "line"
                },
                {
                    "text": "            return False",
                    "type": "line"
                },
                {
                    "text": "        return True",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _new_text(self):",
                    "type": "line"
                },
                {
                    "text": "        pass",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:54.107447",
            "type": "code"
        },
        "e34e1d945517490780c5740d84167d26": {
            "chunkpath": [
                "classes",
                "SearchResults"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def inc_results(self):",
                    "type": "line"
                },
                {
                    "text": "    self.set_num_results(self.num_results + 1)",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-20T12:14:33.776664",
            "type": "code"
        },
        "e4178f58125741c88e14bc1f690f539e": {
            "tags": [
                "title"
            ],
            "text": "Framework",
            "timestamp_created": "2021-06-19T07:27:53.110320"
        },
        "e7276002eaa14dca9e0fbac392e715b4": {
            "links": [],
            "tags": [],
            "text": "Better datetime representation? Perhaps string sorting is ok?\n",
            "timestamp_created": "2021-04-25T05:37:32.884018"
        },
        "e7e53e916a904371a3cba0851ee65a2a": {
            "links": [],
            "tags": [],
            "text": "Why does not test fail when Widget.allotted_rect is not set?\n",
            "timestamp_created": "2021-04-25T04:54:35.659994"
        },
        "e85f5881242b472e95e2d665ab98b94c": {
            "chunkpath": [
                "classes",
                "SearchResults"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def update(self, rect, elapsed_ms):",
                    "type": "line"
                },
                {
                    "text": "    self.wanted_height = int(round(",
                    "type": "line"
                },
                {
                    "text": "        (rect.width-self.hpadding) / self.num_results",
                    "type": "line"
                },
                {
                    "text": "        *",
                    "type": "line"
                },
                {
                    "text": "        self.note_settings.get_height_width_ratio()",
                    "type": "line"
                },
                {
                    "text": "    ))",
                    "type": "line"
                },
                {
                    "text": "    self._update_notes_list()",
                    "type": "line"
                },
                {
                    "text": "    HBox.update(self, rect, elapsed_ms)",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-20T12:14:33.776785",
            "type": "code"
        },
        "e862f0d963a546ae84c44f5c4577b9d7": {
            "chunkpath": [
                "classes",
                "NoteText"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def _note_to_text(self):",
                    "type": "line"
                },
                {
                    "text": "    data = self.db.get_note_data(self.note_id)",
                    "type": "line"
                },
                {
                    "text": "    links = data.get(\"links\", [])",
                    "type": "line"
                },
                {
                    "text": "    tags = data.get(\"tags\", [])",
                    "type": "line"
                },
                {
                    "text": "    extra = []",
                    "type": "line"
                },
                {
                    "text": "    extra.append(\"\\n\")",
                    "type": "line"
                },
                {
                    "text": "    extra.append(\"--\\n\")",
                    "type": "line"
                },
                {
                    "text": "    for link in links:",
                    "type": "line"
                },
                {
                    "text": "        extra.append(\"{}{}\\n\".format(self.LINK_PREFIX, link))",
                    "type": "line"
                },
                {
                    "text": "    for tag in tags:",
                    "type": "line"
                },
                {
                    "text": "        extra.append(\"{}{}\\n\".format(self.TAG_PREFIX, tag))",
                    "type": "line"
                },
                {
                    "text": "    if data.get(\"type\", \"text\") == \"code\":",
                    "type": "line"
                },
                {
                    "text": "        extra.append(\"{}{}\\n\".format(self.FILEPATH_PREFIX, \"/\".join(data[\"filepath\"])))",
                    "type": "line"
                },
                {
                    "text": "        extra.append(\"{}{}\\n\".format(self.CHUNKPATH_PREFIX, \"/\".join(data[\"chunkpath\"])))",
                    "type": "line"
                },
                {
                    "text": "    extra.append(\"# Usage:\\n\")",
                    "type": "line"
                },
                {
                    "text": "    extra.append(\"# {}http://...\\n\".format(self.LINK_PREFIX))",
                    "type": "line"
                },
                {
                    "text": "    extra.append(\"# {}name\\n\".format(self.TAG_PREFIX))",
                    "type": "line"
                },
                {
                    "text": "    extra.append(\"# {}foo/bar.py\\n\".format(self.FILEPATH_PREFIX))",
                    "type": "line"
                },
                {
                    "text": "    extra.append(\"# {}classes/Foo\\n\".format(self.CHUNKPATH_PREFIX))",
                    "type": "line"
                },
                {
                    "text": "    extra.append(\"#\\n\")",
                    "type": "line"
                },
                {
                    "text": "    extra.append(\"# Code Syntax:\\n\")",
                    "type": "line"
                },
                {
                    "text": "    extra.append(\"# <<foo, blank_lines_before=1>>\\n\")",
                    "type": "line"
                },
                {
                    "text": "    extra.append(\"# {}\\n\".format(self.SPLIT_SYNAX))",
                    "type": "line"
                },
                {
                    "text": "    extra.append(\"#\\n\")",
                    "type": "line"
                },
                {
                    "text": "    extra.append(\"# Tags with special formatting:\\n\")",
                    "type": "line"
                },
                {
                    "text": "    for tag in TAG_ATTRIBUTES:",
                    "type": "line"
                },
                {
                    "text": "        extra.append(\"# {}{}\\n\".format(self.TAG_PREFIX, tag[\"name\"]))",
                    "type": "line"
                },
                {
                    "text": "    extra.append(\"--\\n\")",
                    "type": "line"
                },
                {
                    "text": "    if data.get(\"type\", \"text\") == \"code\":",
                    "type": "line"
                },
                {
                    "text": "        return self._code_fragments_to_text(data[\"fragments\"]) + \"\".join(extra)",
                    "type": "line"
                },
                {
                    "text": "    else:",
                    "type": "line"
                },
                {
                    "text": "        return data[\"text\"] + \"\".join(extra)",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-20T12:27:02.675472",
            "type": "code"
        },
        "e86e435137dc469188e80c3579924929": {
            "links": [],
            "tags": [
                "title"
            ],
            "text": "Refactorings for Clarity\n",
            "timestamp_created": "2021-04-25T04:44:51.698765"
        },
        "e883456fca884d17b24ac86d11fb2846": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class NetworkWidget(Widget):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, window, parent, db, overlay, note_settings):",
                    "type": "line"
                },
                {
                    "text": "        Widget.__init__(self, window, parent)",
                    "type": "line"
                },
                {
                    "text": "        self.navigation_history = parent",
                    "type": "line"
                },
                {
                    "text": "        self.db = db",
                    "type": "line"
                },
                {
                    "text": "        self.overlay = overlay",
                    "type": "line"
                },
                {
                    "text": "        self.note_settings = note_settings",
                    "type": "line"
                },
                {
                    "text": "        self.pos = (-1, -1)",
                    "type": "line"
                },
                {
                    "text": "        self.notes = []",
                    "type": "line"
                },
                {
                    "text": "        self.open_last_note()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def open_last_note(self):",
                    "type": "line"
                },
                {
                    "text": "        self.root_note = None",
                    "type": "line"
                },
                {
                    "text": "        for note_id, note_data in self.db.get_notes():",
                    "type": "line"
                },
                {
                    "text": "            self.open_note(note_id)",
                    "type": "line"
                },
                {
                    "text": "            break",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def process_event(self, event):",
                    "type": "line"
                },
                {
                    "text": "        if event.mouse_motion():",
                    "type": "line"
                },
                {
                    "text": "            self.pos = event.mouse_pos()",
                    "type": "line"
                },
                {
                    "text": "        if event.left_mouse_up(rect=self.rect):",
                    "type": "line"
                },
                {
                    "text": "            self.focus()",
                    "type": "line"
                },
                {
                    "text": "        if event.key_down(KEY_CREATE_NOTE) and self.has_focus():",
                    "type": "line"
                },
                {
                    "text": "            note_id = self.db.create_note(text=NEW_NOTE_TEXT)",
                    "type": "line"
                },
                {
                    "text": "            self.open_note(note_id)",
                    "type": "line"
                },
                {
                    "text": "            self.post_event(",
                    "type": "line"
                },
                {
                    "text": "                USER_EVENT_EXTERNAL_TEXT_ENTRY,",
                    "type": "line"
                },
                {
                    "text": "                entry=NoteText(self.db, note_id)",
                    "type": "line"
                },
                {
                    "text": "            )",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            Widget.process_event(self, event)",
                    "type": "line"
                },
                {
                    "text": "            for note in self.notes:",
                    "type": "line"
                },
                {
                    "text": "                note.process_event(event)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def open_note(self, note_id):",
                    "type": "line"
                },
                {
                    "text": "        if self.root_note is None or self.root_note.note_id != note_id:",
                    "type": "line"
                },
                {
                    "text": "            self.make_root(self.instantiate(",
                    "type": "line"
                },
                {
                    "text": "                NetworkNote,",
                    "type": "line"
                },
                {
                    "text": "                self,",
                    "type": "line"
                },
                {
                    "text": "                self.db,",
                    "type": "line"
                },
                {
                    "text": "                self.overlay,",
                    "type": "line"
                },
                {
                    "text": "                note_id,",
                    "type": "line"
                },
                {
                    "text": "                self.note_settings",
                    "type": "line"
                },
                {
                    "text": "            ))",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def make_root(self, note):",
                    "type": "line"
                },
                {
                    "text": "        if note is not self.root_note:",
                    "type": "line"
                },
                {
                    "text": "            self.root_note = note",
                    "type": "line"
                },
                {
                    "text": "            self.clear_quick_focus()",
                    "type": "line"
                },
                {
                    "text": "            self.navigation_history.register_note_opened(note.note_id)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def update(self, rect, elapsed_ms):",
                    "type": "line"
                },
                {
                    "text": "        Widget.update(self, rect, elapsed_ms)",
                    "type": "line"
                },
                {
                    "text": "        self.rect = rect",
                    "type": "line"
                },
                {
                    "text": "        self.stripe_rects = []",
                    "type": "line"
                },
                {
                    "text": "        padding = 8",
                    "type": "line"
                },
                {
                    "text": "        self.old_notes = self.notes",
                    "type": "line"
                },
                {
                    "text": "        self.notes = []",
                    "type": "line"
                },
                {
                    "text": "        self.links = []",
                    "type": "line"
                },
                {
                    "text": "        middle_stripe = self._stripe(rect, 0.3)",
                    "type": "line"
                },
                {
                    "text": "        if self.root_note and self.root_note.is_deleted():",
                    "type": "line"
                },
                {
                    "text": "            self.open_last_note()",
                    "type": "line"
                },
                {
                    "text": "        if self.root_note is None:",
                    "type": "line"
                },
                {
                    "text": "            return",
                    "type": "line"
                },
                {
                    "text": "        self.root_note.update(",
                    "type": "line"
                },
                {
                    "text": "            middle_stripe,",
                    "type": "line"
                },
                {
                    "text": "            elapsed_ms,",
                    "type": "line"
                },
                {
                    "text": "            \"center\",",
                    "type": "line"
                },
                {
                    "text": "            None",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "        self.notes.append(self.root_note)",
                    "type": "line"
                },
                {
                    "text": "        sizes = [",
                    "type": "line"
                },
                {
                    "text": "            (rect.width*0.05, rect.width*0.15),",
                    "type": "line"
                },
                {
                    "text": "            (rect.width*0.03, rect.width*0.1),",
                    "type": "line"
                },
                {
                    "text": "        ]",
                    "type": "line"
                },
                {
                    "text": "        self._stripe_recursive(",
                    "type": "line"
                },
                {
                    "text": "            self.root_note,",
                    "type": "line"
                },
                {
                    "text": "            middle_stripe,",
                    "type": "line"
                },
                {
                    "text": "            sizes,",
                    "type": "line"
                },
                {
                    "text": "            elapsed_ms,",
                    "type": "line"
                },
                {
                    "text": "            padding,",
                    "type": "line"
                },
                {
                    "text": "            \"left\"",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "        self._stripe_recursive(",
                    "type": "line"
                },
                {
                    "text": "            self.root_note,",
                    "type": "line"
                },
                {
                    "text": "            middle_stripe,",
                    "type": "line"
                },
                {
                    "text": "            sizes,",
                    "type": "line"
                },
                {
                    "text": "            elapsed_ms,",
                    "type": "line"
                },
                {
                    "text": "            padding,",
                    "type": "line"
                },
                {
                    "text": "            \"right\"",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "        for link in self.links:",
                    "type": "line"
                },
                {
                    "text": "            link.update(None, elapsed_ms)",
                    "type": "line"
                },
                {
                    "text": "        for note in self.notes:",
                    "type": "line"
                },
                {
                    "text": "            note.clear_hidden_links(self.links)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _stripe_recursive(self, note, parent_rect, widths, elapsed_ms, padding, direction):",
                    "type": "line"
                },
                {
                    "text": "        if not widths:",
                    "type": "line"
                },
                {
                    "text": "            return",
                    "type": "line"
                },
                {
                    "text": "        parent_rect = parent_rect.inflate(0, -padding)",
                    "type": "line"
                },
                {
                    "text": "        if direction == \"left\":",
                    "type": "line"
                },
                {
                    "text": "            links = note.update_incoming()",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            links = note.update_outgoing()",
                    "type": "line"
                },
                {
                    "text": "        if links:",
                    "type": "line"
                },
                {
                    "text": "            space_width, stripe_width = widths[0]",
                    "type": "line"
                },
                {
                    "text": "            if direction == \"left\":",
                    "type": "line"
                },
                {
                    "text": "                rect = parent_rect.move(-space_width-stripe_width, 0)",
                    "type": "line"
                },
                {
                    "text": "                rect.width = stripe_width",
                    "type": "line"
                },
                {
                    "text": "            else:",
                    "type": "line"
                },
                {
                    "text": "                rect = parent_rect.move(parent_rect.width+space_width, 0)",
                    "type": "line"
                },
                {
                    "text": "                rect.width = stripe_width",
                    "type": "line"
                },
                {
                    "text": "            self.stripe_rects.append(rect)",
                    "type": "line"
                },
                {
                    "text": "            for link, y_center, height in self._vertical_stripes(rect, links):",
                    "type": "line"
                },
                {
                    "text": "                if direction == \"left\":",
                    "type": "line"
                },
                {
                    "text": "                    stripe = pygame.Rect(rect.x, 0, stripe_width, height)",
                    "type": "line"
                },
                {
                    "text": "                    linked = link.start",
                    "type": "line"
                },
                {
                    "text": "                else:",
                    "type": "line"
                },
                {
                    "text": "                    stripe = pygame.Rect(rect.x, 0, stripe_width, height)",
                    "type": "line"
                },
                {
                    "text": "                    linked = link.end",
                    "type": "line"
                },
                {
                    "text": "                stripe.centery = y_center",
                    "type": "line"
                },
                {
                    "text": "                linked.update(",
                    "type": "line"
                },
                {
                    "text": "                    stripe.inflate(0, -padding),",
                    "type": "line"
                },
                {
                    "text": "                    elapsed_ms,",
                    "type": "line"
                },
                {
                    "text": "                    direction,",
                    "type": "line"
                },
                {
                    "text": "                    note.get_center() if linked not in self.old_notes else None",
                    "type": "line"
                },
                {
                    "text": "                )",
                    "type": "line"
                },
                {
                    "text": "                self.notes.insert(0, linked)",
                    "type": "line"
                },
                {
                    "text": "                self.links.append(link)",
                    "type": "line"
                },
                {
                    "text": "                self._stripe_recursive(linked, stripe, widths[1:], elapsed_ms, int(padding*0.8), direction)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _vertical_stripes(self, rect, links):",
                    "type": "line"
                },
                {
                    "text": "        if rect.collidepoint(self.pos):",
                    "type": "line"
                },
                {
                    "text": "            even_height = rect.height / len(links)",
                    "type": "line"
                },
                {
                    "text": "            even_width = even_height * 5/3",
                    "type": "line"
                },
                {
                    "text": "            if rect.width < even_width:",
                    "type": "line"
                },
                {
                    "text": "                yield from self._vertical_stripes_even(rect, links)",
                    "type": "line"
                },
                {
                    "text": "            else:",
                    "type": "line"
                },
                {
                    "text": "                yield from self._vertical_stripes_fish_eye(rect, links)",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            yield from self._vertical_stripes_even(rect, links)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _vertical_stripes_fish_eye(self, rect, links):",
                    "type": "line"
                },
                {
                    "text": "        fractions = []",
                    "type": "line"
                },
                {
                    "text": "        even_height = rect.height / len(links)",
                    "type": "line"
                },
                {
                    "text": "        for index, link in enumerate(links):",
                    "type": "line"
                },
                {
                    "text": "            center_y = rect.y+index*even_height+even_height/2",
                    "type": "line"
                },
                {
                    "text": "            y_diff = abs(center_y - self.pos[1])",
                    "type": "line"
                },
                {
                    "text": "            fractions.append(max(even_height*3-y_diff, even_height))",
                    "type": "line"
                },
                {
                    "text": "        one_fraction_h = rect.height / sum(fractions)",
                    "type": "line"
                },
                {
                    "text": "        y = 0",
                    "type": "line"
                },
                {
                    "text": "        for fraction, link in zip(fractions, links):",
                    "type": "line"
                },
                {
                    "text": "            h = one_fraction_h * fraction",
                    "type": "line"
                },
                {
                    "text": "            yield (link, rect.y+y+h/2, h)",
                    "type": "line"
                },
                {
                    "text": "            y += h",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _vertical_stripes_even(self, rect, links):",
                    "type": "line"
                },
                {
                    "text": "        even_height = rect.height / len(links)",
                    "type": "line"
                },
                {
                    "text": "        y = 0",
                    "type": "line"
                },
                {
                    "text": "        for link in links:",
                    "type": "line"
                },
                {
                    "text": "            yield (link, rect.y+y+even_height/2, even_height)",
                    "type": "line"
                },
                {
                    "text": "            y += even_height",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _stripe(self, rect, factor=0.2):",
                    "type": "line"
                },
                {
                    "text": "        stripe = rect.copy()",
                    "type": "line"
                },
                {
                    "text": "        stripe.width *= factor",
                    "type": "line"
                },
                {
                    "text": "        stripe.centerx = rect.centerx",
                    "type": "line"
                },
                {
                    "text": "        return stripe",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def draw(self, canvas):",
                    "type": "line"
                },
                {
                    "text": "        if DEBUG_NOTE_BORDER:",
                    "type": "line"
                },
                {
                    "text": "            for rect in self.stripe_rects:",
                    "type": "line"
                },
                {
                    "text": "                canvas.draw_rect(rect, (255, 255, 0), 2)",
                    "type": "line"
                },
                {
                    "text": "        for link in self.links:",
                    "type": "line"
                },
                {
                    "text": "            link.draw(canvas)",
                    "type": "line"
                },
                {
                    "text": "        for note in self.notes:",
                    "type": "line"
                },
                {
                    "text": "            note.draw(canvas)",
                    "type": "line"
                },
                {
                    "text": "        Widget.draw(self, canvas)",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.658627",
            "type": "code"
        },
        "e88bdaa18f3f4c74a320ee0ffb89269c": {
            "chunkpath": [
                "classes",
                "NoteText"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def _code_fragments_to_text(self, fragments):",
                    "type": "line"
                },
                {
                    "text": "    lines = []",
                    "type": "line"
                },
                {
                    "text": "    for fragment in fragments:",
                    "type": "line"
                },
                {
                    "text": "        if fragment[\"type\"] == \"chunk\":",
                    "type": "line"
                },
                {
                    "text": "            lines.append(\"{}<<{}, blank_lines_before={}>>\".format(",
                    "type": "line"
                },
                {
                    "text": "                fragment[\"prefix\"],",
                    "type": "line"
                },
                {
                    "text": "                \"/\".join(fragment[\"path\"]),",
                    "type": "line"
                },
                {
                    "text": "                fragment[\"blank_lines_before\"]",
                    "type": "line"
                },
                {
                    "text": "            ))",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            lines.append(\"{}\".format(",
                    "type": "line"
                },
                {
                    "text": "                fragment[\"text\"],",
                    "type": "line"
                },
                {
                    "text": "            ))",
                    "type": "line"
                },
                {
                    "text": "    return \"\\n\".join(lines) + \"\\n\"",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-20T12:27:02.675570",
            "type": "code"
        },
        "e8fff187417d4e4d850f5663a8b3fb0a": {
            "chunkpath": [
                "end-to-end"
            ],
            "filepath": [
                "test_smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def test_search_bar(self):",
                    "type": "line"
                },
                {
                    "text": "    self.driver.iteration(events=[KeyEvent(\"/\")], elapsed_ms=100)",
                    "type": "line"
                },
                {
                    "text": "    self.assert_drawn_image_is(\"search_bar_half_way.png\")",
                    "type": "line"
                },
                {
                    "text": "    self.driver.iteration(elapsed_ms=100+MS_PER_FRAME+1)",
                    "type": "line"
                },
                {
                    "text": "    self.assert_drawn_image_is(\"search_bar_animation_completed.png\")",
                    "type": "line"
                },
                {
                    "text": "    self.driver.iteration(events=[KeyEvent(\"ctrl+g\")], elapsed_ms=100)",
                    "type": "line"
                },
                {
                    "text": "    self.assert_drawn_image_is(\"search_bar_half_way_hide.png\")",
                    "type": "line"
                },
                {
                    "text": "    self.driver.iteration(elapsed_ms=500)",
                    "type": "line"
                },
                {
                    "text": "    self.assert_drawn_image_is(\"main_screen.png\")",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.045458",
            "type": "code"
        },
        "e9202b7c4ada48afb2cc0ae453165209": {
            "tags": [
                "title"
            ],
            "text": "Automated Tests",
            "timestamp_created": "2021-06-19T07:27:52.983072"
        },
        "e93c1a192b0349c69178e5163045e8a8": {
            "links": [],
            "tags": [],
            "text": "Add a file view.\n",
            "timestamp_created": "2021-06-21T05:45:41.349527",
            "type": "text"
        },
        "ecb1efa5b4a44970928ac9a69160769f": {
            "links": [],
            "tags": [
                "title"
            ],
            "text": "Design Principles\n",
            "timestamp_created": "2021-04-25T05:28:57.958075"
        },
        "ed2e79daa3aa48d6ada3fc176dddce56": {
            "links": [],
            "tags": [],
            "text": "Add a new type of note that is a search note. Body is expression and links are automatically calculated.\n",
            "timestamp_created": "2021-04-25T05:41:47.326028"
        },
        "ee8e6fa26d14437490223461461e9fb4": {
            "tags": [
                "title"
            ],
            "text": "Interaction",
            "timestamp_created": "2021-06-19T07:27:53.219292"
        },
        "ef7d45347aca40338d1449c81de2b2c1": {
            "chunkpath": [
                "functions"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def genid():",
                    "type": "line"
                },
                {
                    "text": "    return uuid.uuid4().hex",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.880110",
            "type": "code"
        },
        "f079bc508f69432a815b8cea0fb52319": {
            "chunkpath": [
                "constants"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "DEBUG_NOTE_BORDER = os.environ.get(\"DEBUG_NOTE_BORDER\") == \"yes\"",
                    "type": "line"
                },
                {
                    "text": "DEBUG_TEXT_BORDER = os.environ.get(\"DEBUG_TEXT_BORDER\") == \"yes\"",
                    "type": "line"
                },
                {
                    "text": "DEBUG_ANIMATIONS = os.environ.get(\"DEBUG_ANIMATIONS\") == \"yes\"",
                    "type": "line"
                },
                {
                    "text": "DEBUG = DEBUG_NOTE_BORDER or DEBUG_TEXT_BORDER or DEBUG_ANIMATIONS",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "USER_EVENT_CHECK_EXTERNAL      = pygame.USEREVENT",
                    "type": "line"
                },
                {
                    "text": "USER_EVENT_EXTERNAL_TEXT_ENTRY = pygame.USEREVENT + 1",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.613418",
            "type": "code"
        },
        "f1074c3a654540e19be2076e664e8c25": {
            "chunkpath": [
                "classes",
                "NoteDb"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def get_outgoing_links(self, note_id):",
                    "type": "line"
                },
                {
                    "text": "    return self._sort_links([",
                    "type": "line"
                },
                {
                    "text": "        (link_id, link)",
                    "type": "line"
                },
                {
                    "text": "        for link_id, link in self._links()",
                    "type": "line"
                },
                {
                    "text": "        if link[\"from\"] == note_id",
                    "type": "line"
                },
                {
                    "text": "    ])",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-20T12:22:06.076877",
            "type": "code"
        },
        "f2b1415b9cbb451a877ce3cb5785d01d": {
            "text": "This architecture has a few consequences documented below.",
            "timestamp_created": "2021-06-19T07:27:53.257464"
        },
        "f36e601cd1e64e2cb6ae34ae24831c84": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class Animation(object):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self):",
                    "type": "line"
                },
                {
                    "text": "        self.duration_ms = 1",
                    "type": "line"
                },
                {
                    "text": "        self.progress = 1",
                    "type": "line"
                },
                {
                    "text": "        self.last_consumed = True",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def start(self, duration_ms):",
                    "type": "line"
                },
                {
                    "text": "        if DEBUG_ANIMATIONS:",
                    "type": "line"
                },
                {
                    "text": "            duration_ms = duration_ms * 10",
                    "type": "line"
                },
                {
                    "text": "        self.duration_ms = duration_ms",
                    "type": "line"
                },
                {
                    "text": "        self.progress = 0",
                    "type": "line"
                },
                {
                    "text": "        self.last_consumed = False",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def reverse(self, duration_ms):",
                    "type": "line"
                },
                {
                    "text": "        if self.active():",
                    "type": "line"
                },
                {
                    "text": "            self.progress = self.duration_ms - self.progress",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            self.start(duration_ms)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def advance(self, elapsed_ms):",
                    "type": "line"
                },
                {
                    "text": "        percent = float(self.progress) / float(self.duration_ms)",
                    "type": "line"
                },
                {
                    "text": "        if self.progress == self.duration_ms:",
                    "type": "line"
                },
                {
                    "text": "            self.last_consumed = True",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            self.progress = min(self.duration_ms, self.progress+elapsed_ms)",
                    "type": "line"
                },
                {
                    "text": "        return percent",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def active(self):",
                    "type": "line"
                },
                {
                    "text": "        return self.progress < self.duration_ms or not self.last_consumed",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.695927",
            "type": "code"
        },
        "f4c44595fce34de389e14cdd4a1c91ab": {
            "links": [],
            "tags": [],
            "text": "Show tooltips for links?\n",
            "timestamp_created": "2021-04-25T05:31:37.658960"
        },
        "f67879ddcfe746b1b3f4fd9b4d460dbc": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class OverlayAbort(ValueError):",
                    "type": "line"
                },
                {
                    "text": "    pass",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.768285",
            "type": "code"
        },
        "f67f7af3474d431f9994be06dbb1bd61": {
            "tags": [
                "title"
            ],
            "text": "Search Bar",
            "timestamp_created": "2021-06-19T07:27:52.619575"
        },
        "f72d5c244592499caeb7d9671f33b554": {
            "links": [],
            "tags": [],
            "text": "Canvas API for line drawing to not expose Cairo.\n",
            "timestamp_created": "2021-04-25T04:57:57.842512"
        },
        "f8c7cfbfa46b4e88b4a046bd51f2e3af": {
            "links": [],
            "tags": [],
            "text": "Search for `!age<7` for weekly review.\n",
            "timestamp_created": "2021-04-25T05:42:34.665562"
        },
        "f93fa1b9bae3438d937c03f4b2c98346": {
            "links": [],
            "tags": [],
            "text": "What is a good mechanism for register_note_opened?\n",
            "timestamp_created": "2021-04-25T15:46:41.825832"
        },
        "fa07efa79a8e4b58b8a826bfbc628a5c": {
            "tags": [
                "title"
            ],
            "text": "Text Field",
            "timestamp_created": "2021-06-19T07:27:53.631955"
        },
        "fbfdbf74e6d9470c8f74bfec3d7c6ef7": {
            "chunkpath": [
                "classes",
                "NoteDb"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def delete_link(self, link_id):",
                    "type": "line"
                },
                {
                    "text": "    self._ensure_link_id(link_id)",
                    "type": "line"
                },
                {
                    "text": "    new_links = dict(self._get(\"links\"))",
                    "type": "line"
                },
                {
                    "text": "    new_links.pop(link_id)",
                    "type": "line"
                },
                {
                    "text": "    self._replace(links=new_links)",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-20T12:22:06.077070",
            "type": "code"
        },
        "fd5643308b3b4e00b07082d1aa948ed9": {
            "chunkpath": [
                "base base classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class Widget(object):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, window, parent, width=-1, height=-1, visible=True):",
                    "type": "line"
                },
                {
                    "text": "        self._window = window",
                    "type": "line"
                },
                {
                    "text": "        self._parent = parent",
                    "type": "line"
                },
                {
                    "text": "        self._width = width",
                    "type": "line"
                },
                {
                    "text": "        self._height = height",
                    "type": "line"
                },
                {
                    "text": "        self._visible = visible",
                    "type": "line"
                },
                {
                    "text": "        self.rect = pygame.Rect(0, 0, 0, 0)",
                    "type": "line"
                },
                {
                    "text": "        self.allotted_rect = pygame.Rect(0, 0, 0, 0)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def set_title(self, title):",
                    "type": "line"
                },
                {
                    "text": "        self._window.set_title(title)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def instantiate(self, cls, *args, **kwargs):",
                    "type": "line"
                },
                {
                    "text": "        return cls(self._window, self, *args, **kwargs)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def focus(self):",
                    "type": "line"
                },
                {
                    "text": "        self._window.set_focus(self)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def quick_focus(self):",
                    "type": "line"
                },
                {
                    "text": "        self._window.set_quick_focus(self)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def clear_quick_focus(self):",
                    "type": "line"
                },
                {
                    "text": "        return self._window.clear_quick_focus()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def has_focus(self):",
                    "type": "line"
                },
                {
                    "text": "        return self._window.is_focused(self)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def save_focus(self):",
                    "type": "line"
                },
                {
                    "text": "        self._window.save_focus()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def restore_focus(self):",
                    "type": "line"
                },
                {
                    "text": "        self._window.restore_focus()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def resize(self, width=None, height=None):",
                    "type": "line"
                },
                {
                    "text": "        if width is not None:",
                    "type": "line"
                },
                {
                    "text": "            self._width = width",
                    "type": "line"
                },
                {
                    "text": "        if height is not None:",
                    "type": "line"
                },
                {
                    "text": "            self._height = height",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_width(self):",
                    "type": "line"
                },
                {
                    "text": "        return self._width",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_height(self):",
                    "type": "line"
                },
                {
                    "text": "        return self._height",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def is_visible(self):",
                    "type": "line"
                },
                {
                    "text": "        return self._visible",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def toggle_visible(self):",
                    "type": "line"
                },
                {
                    "text": "        self._visible = not self._visible",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def quit(self):",
                    "type": "line"
                },
                {
                    "text": "        self._window.close()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def post_event(self, event_type, **kwargs):",
                    "type": "line"
                },
                {
                    "text": "        pygame.event.post(pygame.event.Event(event_type, **kwargs))",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "blank_lines_before": 1,
                    "path": [
                        "BaseWidget",
                        "interaction"
                    ],
                    "prefix": "    ",
                    "type": "chunk"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.181465",
            "type": "code"
        },
        "ffb4f91f871f473c9bf19c90c543cbe3": {
            "chunkpath": [
                "classes",
                "NoteDb"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def __init__(self, path):",
                    "type": "line"
                },
                {
                    "text": "    Immutable.__init__(self, read_json_file(path, {",
                    "type": "line"
                },
                {
                    "text": "        \"version\": 1,",
                    "type": "line"
                },
                {
                    "text": "        \"notes\": {},",
                    "type": "line"
                },
                {
                    "text": "        \"links\": {},",
                    "type": "line"
                },
                {
                    "text": "    }))",
                    "type": "line"
                },
                {
                    "text": "    self.path = path",
                    "type": "line"
                },
                {
                    "text": "    self.virtual_links = {}",
                    "type": "line"
                },
                {
                    "text": "    self.consolidate_files()",
                    "type": "line"
                },
                {
                    "text": "    self._create_virtual_links()",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "Enter note text...\n",
            "timestamp_created": "2021-06-20T12:19:36.810701",
            "type": "code"
        }
    },
    "version": 1
}