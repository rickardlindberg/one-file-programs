{
    "links": {
        "00748abcbd15496f9574b7cba56dbf44": {
            "from": "79b1ae3dad3c44a285b57fb88b01e561",
            "timestamp_created": "2021-06-19T07:27:53.381747",
            "to": "58b1b56e5208481a8732c664d989bfe8"
        },
        "04395e2c558e493ebaa493e55174a558": {
            "from": "e9202b7c4ada48afb2cc0ae453165209",
            "timestamp_created": "2021-06-19T07:27:53.053448",
            "to": "e8fff187417d4e4d850f5663a8b3fb0a"
        },
        "058c0c8a7e194fbc8822103332be148e": {
            "from": "af88ba59057c45338350bc42a0001adb",
            "timestamp_created": "2021-06-19T07:27:52.610017",
            "to": "cd1a983e9fc54e32b67bddd67b11d5a5"
        },
        "095c71285ef143d19bd653cf1f4afdf1": {
            "from": "11b1c0c63fb446ddb348d60f48f8c943",
            "timestamp_created": "2021-06-19T07:27:54.253568",
            "to": "663b1555bdd643f6a873ee3d75c0fa1f"
        },
        "0b953dfb7d20458f8d1ab8c57754a873": {
            "from": "25ce5b2877d94c10b54dcad84500c9f9",
            "timestamp_created": "2021-06-19T07:27:53.817920",
            "to": "df59f68052454e8b8d648c503d0139ff"
        },
        "0c46624cf0ea4f0e9c7931636168ecb2": {
            "from": "af88ba59057c45338350bc42a0001adb",
            "timestamp_created": "2021-06-19T07:27:52.612189",
            "to": "0307b3ea3c4a4d3b9216ab7b9e2e0bbd"
        },
        "0f12f6b1f68f4b729e452285c09369de": {
            "from": "05a9b0cd9f80404793e93b7906713700",
            "timestamp_created": "2021-06-19T07:27:52.795202",
            "to": "9dea2f6390954d3fa2de99e0eb6457ca"
        },
        "0fd31f764c3a463986f72d6bdbb85e73": {
            "from": "5d02a07589c84bb6a913b5d99708c603",
            "timestamp_created": "2021-06-19T07:27:54.200221",
            "to": "3630311283704b878fd1b9ca4d3453f9"
        },
        "1112dfed4c294bb7903ec371c4b735e7": {
            "from": "01bd457b2d52424da9a9f2fd914133c3",
            "timestamp_created": "2021-06-19T07:27:53.559847",
            "to": "915b1755daf440958f7806c9927ccb50"
        },
        "116b62599ed94e12a3a9489272e05583": {
            "from": "9dea2f6390954d3fa2de99e0eb6457ca",
            "timestamp_created": "2021-06-19T07:27:52.806786",
            "to": "42bff83e87e6458b90cae3be48449b9e"
        },
        "12ab896a3b83422cb6d9dac6b2579dfa": {
            "from": "0307b3ea3c4a4d3b9216ab7b9e2e0bbd",
            "timestamp_created": "2021-06-19T07:27:52.616756",
            "to": "42fc6bb887984f2780bacd47e8fb3e08"
        },
        "14b31f20ba9a478088ad854299ae7f5c": {
            "from": "5d81e13c3cb9476da21aac3f66c239f7",
            "timestamp_created": "2021-06-19T07:27:52.683722",
            "to": "03b9695f2aeb409ca19e899c73715bcb"
        },
        "17dc6fc831b041cf913ac22883d59d54": {
            "from": "915b1755daf440958f7806c9927ccb50",
            "timestamp_created": "2021-06-19T07:27:53.579951",
            "to": "1c384abda79d4c0b8f117c6b293e2dc5"
        },
        "1c5747a77f3246d1b0e2e385efbcba32": {
            "from": "378ad330e3104287820d0abc9669577b",
            "timestamp_created": "2021-06-19T07:27:53.209628",
            "to": "c4426c34655c47b3b69dd416b4cd26fc"
        },
        "23f3c0c39ca14b0eabd33e3c55b80408": {
            "from": "ee8e6fa26d14437490223461461e9fb4",
            "timestamp_created": "2021-06-19T07:27:53.420039",
            "to": "e1c773d06f6947108931b33d87f75610"
        },
        "24c3f6bb51334c4cbe348541751ff2cf": {
            "from": "5d81e13c3cb9476da21aac3f66c239f7",
            "timestamp_created": "2021-06-19T07:27:52.662041",
            "to": "e883456fca884d17b24ac86d11fb2846"
        },
        "24db432de7fa4eaaa2e804c5ecbeb257": {
            "from": "030878e06ca3461fb0110428917bcfc2",
            "timestamp_created": "2021-06-19T07:27:53.863788",
            "to": "2ee004f1e26a4e6bafcf5e9fd1e4e874"
        },
        "28afc7c1142240268e448fc89b114348": {
            "from": "ee8e6fa26d14437490223461461e9fb4",
            "timestamp_created": "2021-06-19T07:27:53.286316",
            "to": "2e71ca7444654d178322a9f276f4f2f5"
        },
        "30444fa8571f42efb42e059376a2eed5": {
            "from": "2e71ca7444654d178322a9f276f4f2f5",
            "timestamp_created": "2021-06-19T07:27:53.324515",
            "to": "c180b5ec4c2447009a4ac1a87d7dad40"
        },
        "333f82ad4137405daf3b46ef330cc922": {
            "from": "378ad330e3104287820d0abc9669577b",
            "timestamp_created": "2021-06-19T07:27:53.190773",
            "to": "fd5643308b3b4e00b07082d1aa948ed9"
        },
        "3361deed919849a88c931fe1f6bf0c70": {
            "from": "663b1555bdd643f6a873ee3d75c0fa1f",
            "timestamp_created": "2021-06-19T07:27:54.280031",
            "to": "c82b22fc526b4d92a1600c8a28c0a290"
        },
        "3a1839a44a7c45cd886e363a6a44b223": {
            "from": "9dea2f6390954d3fa2de99e0eb6457ca",
            "timestamp_created": "2021-06-19T07:27:52.819348",
            "to": "5115170d4f7747c2a4fb0a20eab851aa"
        },
        "3c7b1fb70233437da9af6c5a509c7d75": {
            "from": "af88ba59057c45338350bc42a0001adb",
            "timestamp_created": "2021-06-19T07:27:53.729598",
            "to": "030878e06ca3461fb0110428917bcfc2"
        },
        "3d90193820cd4f85828484b9b20a70ce": {
            "from": "0307b3ea3c4a4d3b9216ab7b9e2e0bbd",
            "timestamp_created": "2021-06-19T07:27:52.990716",
            "to": "e9202b7c4ada48afb2cc0ae453165209"
        },
        "3e7b0ae095804f84bb75a3dc1f9ff204": {
            "from": "0307b3ea3c4a4d3b9216ab7b9e2e0bbd",
            "timestamp_created": "2021-06-19T07:27:52.915526",
            "to": "a555b9e3b8a84bdbb662786cf96773ac"
        },
        "3eb4f71ccb0d4452ae564d9984d64a5d": {
            "from": "f67f7af3474d431f9994be06dbb1bd61",
            "timestamp_created": "2021-06-19T07:27:52.623074",
            "to": "bf2aabce618349f69ec6b3c43ce03382"
        },
        "40a1929ce1e0453ca3434fcb816e1cb7": {
            "from": "0307b3ea3c4a4d3b9216ab7b9e2e0bbd",
            "timestamp_created": "2021-06-19T07:27:52.831917",
            "to": "51b4a680f3b741b7ae3d407bcbfaa6a4"
        },
        "4215f18e09bf423e9f82a6178a214ca2": {
            "from": "a555b9e3b8a84bdbb662786cf96773ac",
            "timestamp_created": "2021-06-19T07:27:52.945137",
            "to": "5dd5dd9cd98245af954272bc602f395f"
        },
        "43894081ac0e4895bad9caace370362a": {
            "from": "11b1c0c63fb446ddb348d60f48f8c943",
            "timestamp_created": "2021-06-19T07:27:54.067670",
            "to": "9373b6fe256a4eee9478e30d701ddc90"
        },
        "46a35000e3d14c85b066b10c7f853804": {
            "from": "51b4a680f3b741b7ae3d407bcbfaa6a4",
            "timestamp_created": "2021-06-19T07:27:52.858993",
            "to": "5055f50fea9241ffaf34adf03f78ae34"
        },
        "4bfaaa7eaa5544549e55b31bc0dfe088": {
            "from": "51b4a680f3b741b7ae3d407bcbfaa6a4",
            "timestamp_created": "2021-06-19T07:27:52.887406",
            "to": "ef7d45347aca40338d1449c81de2b2c1"
        },
        "50a0e79a4bc2420d8f9ecd58654e2608": {
            "from": "e9202b7c4ada48afb2cc0ae453165209",
            "timestamp_created": "2021-06-19T07:27:53.101586",
            "to": "bdda899e7d3d4501a5a3bf817aea2cbe"
        },
        "59d6f5fb00524245875434cabbf83420": {
            "from": "e9202b7c4ada48afb2cc0ae453165209",
            "timestamp_created": "2021-06-19T07:27:53.118631",
            "to": "e4178f58125741c88e14bc1f690f539e"
        },
        "5a363ad9af6f4bc3b8f9cce7f1def5e0": {
            "from": "79b1ae3dad3c44a285b57fb88b01e561",
            "timestamp_created": "2021-06-19T07:27:53.400802",
            "to": "06ac8f7d9aee44658310cfbd877dd8b9"
        },
        "5a3efcd8ef664d3382d3b017a27edd63": {
            "from": "030878e06ca3461fb0110428917bcfc2",
            "timestamp_created": "2021-06-19T07:27:53.773803",
            "to": "25ce5b2877d94c10b54dcad84500c9f9"
        },
        "5d72f642173e462387f11920cfeb0192": {
            "from": "21228dea83a648c0a3c698b8f9e50b30",
            "timestamp_created": "2021-06-19T07:27:54.335273",
            "to": "cadbc90bb17945089ec28f4f4c1b18f3"
        },
        "5dc69214bae24890b647f0879ff4ddd7": {
            "from": "ee8e6fa26d14437490223461461e9fb4",
            "timestamp_created": "2021-06-19T07:27:53.499559",
            "to": "4c0302cbb5774082aa8f7929378dc999"
        },
        "5e264e322eff41df88ae58a327e4570b": {
            "from": "a555b9e3b8a84bdbb662786cf96773ac",
            "timestamp_created": "2021-06-19T07:27:52.930073",
            "to": "81f4feec6d454ca2a2a12ff427db17dc"
        },
        "5e442e5cddc949389f9472bd1ee1e49f": {
            "from": "915b1755daf440958f7806c9927ccb50",
            "timestamp_created": "2021-06-19T07:27:53.621646",
            "to": "8e84748c392b4e72adbe4aa48bd30888"
        },
        "5e9018c6150e474bbb4e492f2d3fe9e0": {
            "from": "0307b3ea3c4a4d3b9216ab7b9e2e0bbd",
            "timestamp_created": "2021-06-19T07:27:52.612998",
            "to": "c5e2d7f312654d389e9e7042895f2192"
        },
        "60129736acc449e3ab5f2cad1b76a8bc": {
            "from": "915b1755daf440958f7806c9927ccb50",
            "timestamp_created": "2021-06-19T07:27:53.600865",
            "to": "af2967da19aa441ca600cffe29aae955"
        },
        "604cf1fbca2e4e3caf91377b739243a2": {
            "from": "94df86b13b0a46039880954fcd6f2c43",
            "timestamp_created": "2021-06-19T07:27:52.638245",
            "to": "e12a127c468640ac8711bf9d401cfd80"
        },
        "626527bb560d4a30b7329f6c0df31e47": {
            "from": "ee8e6fa26d14437490223461461e9fb4",
            "timestamp_created": "2021-06-19T07:27:53.439572",
            "to": "3d9747ab26b64a78a40915de14abec3c"
        },
        "652ee23bd42e4618991745fc073b40cd": {
            "from": "01bd457b2d52424da9a9f2fd914133c3",
            "timestamp_created": "2021-06-19T07:27:53.685183",
            "to": "7d91624b3a4a4e77bd07f15eca46c8bf"
        },
        "6672f2bce49b4a778933137c6b83fb28": {
            "from": "378ad330e3104287820d0abc9669577b",
            "timestamp_created": "2021-06-19T07:27:53.228732",
            "to": "ee8e6fa26d14437490223461461e9fb4"
        },
        "67bb0edd586f4fb1b5044226752a3a7f": {
            "from": "2e71ca7444654d178322a9f276f4f2f5",
            "timestamp_created": "2021-06-19T07:27:53.343592",
            "to": "79b1ae3dad3c44a285b57fb88b01e561"
        },
        "68f9086b383e4a0eb65b53675a23de87": {
            "from": "0307b3ea3c4a4d3b9216ab7b9e2e0bbd",
            "timestamp_created": "2021-06-19T07:27:52.752072",
            "to": "5e9dea2ec8a14dea8d0c4cee558101bf"
        },
        "6bd67f490b42416da1926bb99c7e1961": {
            "from": "7d91624b3a4a4e77bd07f15eca46c8bf",
            "timestamp_created": "2021-06-19T07:27:53.706828",
            "to": "f36e601cd1e64e2cb6ae34ae24831c84"
        },
        "6da75677188c4582b9a9ce99edf9cc83": {
            "from": "ee8e6fa26d14437490223461461e9fb4",
            "timestamp_created": "2021-06-19T07:27:53.459337",
            "to": "da9762c4ecec40f39459a1cadb195672"
        },
        "729128adf4504a2fb3f0ea450c44d82a": {
            "from": "bb1078db928c4a689b896659d62e5e4c",
            "timestamp_created": "2021-06-19T07:27:52.700614",
            "to": "3c0c8700f3df48f993020e420ec4b125"
        },
        "73818dc85acc480ebb6e58510d46d666": {
            "from": "94df86b13b0a46039880954fcd6f2c43",
            "timestamp_created": "2021-06-19T07:27:52.642353",
            "to": "0869381f43fa488b9b8aabb1f1777e19"
        },
        "7671dbf6aa6c4b76a84ad0e637ded8fa": {
            "from": "11b1c0c63fb446ddb348d60f48f8c943",
            "timestamp_created": "2021-06-19T07:27:54.147289",
            "to": "5d02a07589c84bb6a913b5d99708c603"
        },
        "79ab0d6c93ec46358947bfcd59bc7eb7": {
            "from": "d520425e067a453ebd7d8c4e35a0d9ca",
            "timestamp_created": "2021-06-19T07:27:52.741880",
            "to": "ceeadc4c09f64510bc4a1b9c646698aa"
        },
        "79ee908ad5e1464294f4f4469e243886": {
            "from": "42fc6bb887984f2780bacd47e8fb3e08",
            "timestamp_created": "2021-06-19T07:27:52.618373",
            "to": "0ee427a47e9e4eeeb4fbbe487f1440c1"
        },
        "7f3f88123bb042e591bf6e0739bd47e8": {
            "from": "0307b3ea3c4a4d3b9216ab7b9e2e0bbd",
            "timestamp_created": "2021-06-19T07:27:52.614231",
            "to": "f079bc508f69432a815b8cea0fb52319"
        },
        "7f8b29133b264d4b805aeb3a85ae33b3": {
            "from": "2ee004f1e26a4e6bafcf5e9fd1e4e874",
            "timestamp_created": "2021-06-19T07:27:53.938867",
            "to": "c69d9bc1cb314c60a88e1051aa3bd326"
        },
        "80f9c9c1f8d64114a24f3f1e79a08db9": {
            "from": "28bb50737b9843fea003e2659b62a1cb",
            "timestamp_created": "2021-06-19T07:27:52.629169",
            "to": "11126df08c334d5592ccc9d288e1be87"
        },
        "85f890d8ce3942309bfb2f55b11f6943": {
            "from": "3c0c8700f3df48f993020e420ec4b125",
            "timestamp_created": "2021-06-19T07:27:52.720293",
            "to": "db953d9fabca4399beab08ef48ae1b3f"
        },
        "88fddb1936e64b47893e99ca54c95f11": {
            "from": "af88ba59057c45338350bc42a0001adb",
            "timestamp_created": "2021-06-19T07:27:53.154464",
            "to": "01bd457b2d52424da9a9f2fd914133c3"
        },
        "8b4384d5f6e8456fb09f3d5a2341581c": {
            "from": "2e71ca7444654d178322a9f276f4f2f5",
            "timestamp_created": "2021-06-19T07:27:53.305242",
            "to": "05a20094744b470f987e5c67947f8c30"
        },
        "8c0da397f11045bfa262cac782287450": {
            "from": "11b1c0c63fb446ddb348d60f48f8c943",
            "timestamp_created": "2021-06-19T07:27:53.989810",
            "to": "13d328224b304432a206a3a27a27a443"
        },
        "8d5ceb93051d4ceb93b6cd795ae5d7d3": {
            "from": "af88ba59057c45338350bc42a0001adb",
            "timestamp_created": "2021-06-19T07:27:52.609530",
            "to": "0137eb98a2b946d885411da919412185"
        },
        "95a2ebcd723d413092c53a1c38c1c082": {
            "from": "25ce5b2877d94c10b54dcad84500c9f9",
            "timestamp_created": "2021-06-19T07:27:53.840700",
            "to": "08933303ef594af0a3858672b67f2df9"
        },
        "97b9c6db9cf246bba593a8ec861abc1a": {
            "from": "42fc6bb887984f2780bacd47e8fb3e08",
            "timestamp_created": "2021-06-19T07:27:52.731654",
            "to": "d520425e067a453ebd7d8c4e35a0d9ca"
        },
        "97e5173018f14be1ab735eaf0974937d": {
            "from": "51b4a680f3b741b7ae3d407bcbfaa6a4",
            "timestamp_created": "2021-06-19T07:27:52.873033",
            "to": "398ad55085fc451383e54a64291de937"
        },
        "9c0ea64633894b62845b84badd00010d": {
            "from": "e9202b7c4ada48afb2cc0ae453165209",
            "timestamp_created": "2021-06-19T07:27:53.037800",
            "to": "382b92a71e654628ad4c1b51bc4fe471"
        },
        "a02b5496c40045d6b951961cbed0f0b4": {
            "from": "51b4a680f3b741b7ae3d407bcbfaa6a4",
            "timestamp_created": "2021-06-19T07:27:52.845163",
            "to": "a5661264b360480a954ca02a4998c3c3"
        },
        "a1d450a4285b4e1da9283b4c1d3633ba": {
            "from": "0307b3ea3c4a4d3b9216ab7b9e2e0bbd",
            "timestamp_created": "2021-06-19T07:27:52.960123",
            "to": "98765de5e17b468ebd5d7bb7b229cc0c"
        },
        "a226c8129a5d4ded800adf9cb8088378": {
            "from": "9373b6fe256a4eee9478e30d701ddc90",
            "timestamp_created": "2021-06-19T07:27:54.094195",
            "to": "d25059d661ca4f9fa6fc94c24c7969f3"
        },
        "a38db49c97aa400fb560b4a29e5bce6e": {
            "from": "42fc6bb887984f2780bacd47e8fb3e08",
            "timestamp_created": "2021-06-19T07:27:52.646587",
            "to": "bb1078db928c4a689b896659d62e5e4c"
        },
        "a5ac1191cdf14c3da390628a728080c7": {
            "from": "0307b3ea3c4a4d3b9216ab7b9e2e0bbd",
            "timestamp_created": "2021-06-19T07:27:52.615573",
            "to": "43249a90aee8449d8161c78c17088563"
        },
        "a5af8bad9abc42e9845e334e39d60d24": {
            "from": "030878e06ca3461fb0110428917bcfc2",
            "timestamp_created": "2021-06-19T07:27:53.751769",
            "to": "b571359f968a4e2b8b2cb97f1d35c5f1"
        },
        "ab13986f5dd84b75a47f34dbd7fc5524": {
            "from": "e9202b7c4ada48afb2cc0ae453165209",
            "timestamp_created": "2021-06-19T07:27:53.085360",
            "to": "dd45e68bd5c24d6f93e1c0d6e2f93cd6"
        },
        "abceb8263eba4175949a49520e76652b": {
            "from": "5e9dea2ec8a14dea8d0c4cee558101bf",
            "timestamp_created": "2021-06-19T07:27:52.773621",
            "to": "f67879ddcfe746b1b3f4fd9b4d460dbc"
        },
        "b9973ef3e17e45449e116d2b3da3935c": {
            "from": "0307b3ea3c4a4d3b9216ab7b9e2e0bbd",
            "timestamp_created": "2021-06-19T07:27:52.784228",
            "to": "05a9b0cd9f80404793e93b7906713700"
        },
        "be1684cd130340ceafb747e6df974735": {
            "from": "8e8d2b99b72c4be9a46637d9688c1cf1",
            "timestamp_created": "2021-06-19T07:27:54.041427",
            "to": "bef0e90db2fd4445973a9afd8b0cf636"
        },
        "c14a12e4da324845ba8439b8673d9151": {
            "from": "25ce5b2877d94c10b54dcad84500c9f9",
            "timestamp_created": "2021-06-19T07:27:53.795779",
            "to": "c79b278199e343e69d2dede9e8339a33"
        },
        "c15e8001283844d18622d1001f9b4b3c": {
            "from": "5d02a07589c84bb6a913b5d99708c603",
            "timestamp_created": "2021-06-19T07:27:54.226867",
            "to": "6d564d8cb2fa425381dfc90108774372"
        },
        "c161ac73fe3c488c8ead3bd422b023e2": {
            "from": "03b9695f2aeb409ca19e899c73715bcb",
            "timestamp_created": "2021-06-19T07:27:52.691831",
            "to": "8a68350969694fc3b66f97d0a704da94"
        },
        "c6961fa530294ba3b0624a3628e30178": {
            "from": "9b67b722e8aa4a2a913fe18905e369af",
            "timestamp_created": "2021-06-19T07:27:52.675710",
            "to": "21f583aa5a32443fbad72db20a181f03"
        },
        "c6a7c68fcbbd4363966f8c0601748397": {
            "from": "29bce2bdc6844ce1bd962cd144359aaa",
            "timestamp_created": "2021-06-19T07:27:53.539709",
            "to": "05bb59abb936423489c2a74b974cd769"
        },
        "c99dd3283d4247caa84bf53c2ee81940": {
            "from": "bb1078db928c4a689b896659d62e5e4c",
            "timestamp_created": "2021-06-19T07:27:52.655916",
            "to": "5d81e13c3cb9476da21aac3f66c239f7"
        },
        "caef4d82f13d468286051a3d96b7dc6c": {
            "from": "e9202b7c4ada48afb2cc0ae453165209",
            "timestamp_created": "2021-06-19T07:27:53.006462",
            "to": "d8feaf1314404d3d8c3482aeb67b7625"
        },
        "cb89280a4bee43d581e3e932aac4eab6": {
            "from": "01bd457b2d52424da9a9f2fd914133c3",
            "timestamp_created": "2021-06-19T07:27:53.172332",
            "to": "378ad330e3104287820d0abc9669577b"
        },
        "cc2e547d519f4da99c6a5184048eebe9": {
            "from": "2ee004f1e26a4e6bafcf5e9fd1e4e874",
            "timestamp_created": "2021-06-19T07:27:53.888144",
            "to": "291e4cbb8ca049998afaa567b1749d9b"
        },
        "ce01545ed996400b92155992555b6dab": {
            "from": "2d9ff066dc6d428593815e2735918279",
            "timestamp_created": "2021-06-19T07:27:54.348963",
            "to": "25ce5b2877d94c10b54dcad84500c9f9"
        },
        "ce83c4c096d5429a9cf57942dd6ccf69": {
            "from": "af88ba59057c45338350bc42a0001adb",
            "timestamp_created": "2021-06-19T07:27:52.610656",
            "to": "db2737780b294f7b91ed1083778d234b"
        },
        "cef4000a233d406281dd0bd1f1e9c3cd": {
            "from": "e4178f58125741c88e14bc1f690f539e",
            "timestamp_created": "2021-06-19T07:27:53.136177",
            "to": "a0fe67b02bfd42c9adca92215cbf88b1"
        },
        "d3f4949a1f284808ae6d8929535e9ed6": {
            "from": "9373b6fe256a4eee9478e30d701ddc90",
            "timestamp_created": "2021-06-19T07:27:54.120474",
            "to": "e2921f12daf8427196865d7c7f11b732"
        },
        "d6c9f14f54774ff299da74cafd12c8ed": {
            "from": "5d81e13c3cb9476da21aac3f66c239f7",
            "timestamp_created": "2021-06-19T07:27:52.668556",
            "to": "9b67b722e8aa4a2a913fe18905e369af"
        },
        "daa5062fa11a49d0ad02b600c02bc0f8": {
            "from": "01bd457b2d52424da9a9f2fd914133c3",
            "timestamp_created": "2021-06-19T07:27:53.519552",
            "to": "29bce2bdc6844ce1bd962cd144359aaa"
        },
        "dc839e68e2464d90a83594dcefb4d531": {
            "from": "3c0c8700f3df48f993020e420ec4b125",
            "timestamp_created": "2021-06-19T07:27:52.709889",
            "to": "649a10bfa42a46a8b72a14a20dbf700d"
        },
        "e0af55781df94d3482b7ccfddf18ba54": {
            "from": "f67f7af3474d431f9994be06dbb1bd61",
            "timestamp_created": "2021-06-19T07:27:52.626162",
            "to": "28bb50737b9843fea003e2659b62a1cb"
        },
        "e23cce12e270436696f0e17dad2f07b6": {
            "from": "af88ba59057c45338350bc42a0001adb",
            "timestamp_created": "2021-06-19T07:27:53.964334",
            "to": "11b1c0c63fb446ddb348d60f48f8c943"
        },
        "e34440c285394c47a0ed06ebcf431d46": {
            "from": "11b1c0c63fb446ddb348d60f48f8c943",
            "timestamp_created": "2021-06-19T07:27:54.015544",
            "to": "8e8d2b99b72c4be9a46637d9688c1cf1"
        },
        "e4216cc5c9264c6c9d74be0335ac9427": {
            "from": "5d02a07589c84bb6a913b5d99708c603",
            "timestamp_created": "2021-06-19T07:27:54.173804",
            "to": "b4922ecf5d984d408bcdaab9fdeeb064"
        },
        "e495a069947445e89fb1dc8e31698173": {
            "from": "ee8e6fa26d14437490223461461e9fb4",
            "timestamp_created": "2021-06-19T07:27:53.247811",
            "to": "2d9ff066dc6d428593815e2735918279"
        },
        "e93c5c3d396d47f1a247d3a3479a96ff": {
            "from": "fa07efa79a8e4b58b8a826bfbc628a5c",
            "timestamp_created": "2021-06-19T07:27:53.663594",
            "to": "7d7f4a4f4b894086ace8287b083ab4f1"
        },
        "e9460d922ef74a6dad20955edc19c32c": {
            "from": "e9202b7c4ada48afb2cc0ae453165209",
            "timestamp_created": "2021-06-19T07:27:53.069396",
            "to": "7304d987b32245018eb1ad58d0685c89"
        },
        "e957486fe361413bb430600aa70f80cf": {
            "from": "98765de5e17b468ebd5d7bb7b229cc0c",
            "timestamp_created": "2021-06-19T07:27:52.975231",
            "to": "dee94b78ca4f4adaa5ad786c7d1b671c"
        },
        "ea6a0838be874755b38114ff8c18ac12": {
            "from": "bb1078db928c4a689b896659d62e5e4c",
            "timestamp_created": "2021-06-19T07:27:52.651076",
            "to": "ba04a2b92b7f49a99a25a0af26d3b3aa"
        },
        "eab333e6fa97471cb8932dc8db863970": {
            "from": "f67f7af3474d431f9994be06dbb1bd61",
            "timestamp_created": "2021-06-19T07:27:52.634309",
            "to": "94df86b13b0a46039880954fcd6f2c43"
        },
        "eb36c2e2b8d14e019f597f348384e730": {
            "from": "e9202b7c4ada48afb2cc0ae453165209",
            "timestamp_created": "2021-06-19T07:27:53.022332",
            "to": "2161885ac39948218c2dbe0f23e91c5e"
        },
        "ebb82489730b4bea9f2a763eec18bccf": {
            "from": "79b1ae3dad3c44a285b57fb88b01e561",
            "timestamp_created": "2021-06-19T07:27:53.362644",
            "to": "dfc61c882af9400c9501db2e1a5ee306"
        },
        "ed9bbc7060e94290b123c86d9d1e17d4": {
            "from": "51b4a680f3b741b7ae3d407bcbfaa6a4",
            "timestamp_created": "2021-06-19T07:27:52.901448",
            "to": "7d0dd1cbe8174b6a9be503e9206c25bb"
        },
        "f17d5c033f37451cbf8c98f6779da46e": {
            "from": "ee8e6fa26d14437490223461461e9fb4",
            "timestamp_created": "2021-06-19T07:27:53.267180",
            "to": "f2b1415b9cbb451a877ce3cb5785d01d"
        },
        "f3b69a026a6446979995025cc2e89727": {
            "from": "2ee004f1e26a4e6bafcf5e9fd1e4e874",
            "timestamp_created": "2021-06-19T07:27:53.913321",
            "to": "5ad55d51dad84960bda16db55ffb5115"
        },
        "fa899ad2e40e4fa1a2e607db9d1a4a29": {
            "from": "5e9dea2ec8a14dea8d0c4cee558101bf",
            "timestamp_created": "2021-06-19T07:27:52.762695",
            "to": "9914cb6c8dbf4a6b8859d68e94ce1bef"
        },
        "fc4f3ec2448c4ea2ae79530241b54bfd": {
            "from": "11b1c0c63fb446ddb348d60f48f8c943",
            "timestamp_created": "2021-06-19T07:27:54.307223",
            "to": "21228dea83a648c0a3c698b8f9e50b30"
        },
        "fee65ebafa3045458a93905e71cefe15": {
            "from": "42fc6bb887984f2780bacd47e8fb3e08",
            "timestamp_created": "2021-06-19T07:27:52.620607",
            "to": "f67f7af3474d431f9994be06dbb1bd61"
        },
        "fef25f1d74a144b18ce211e94695e0fc": {
            "from": "01bd457b2d52424da9a9f2fd914133c3",
            "timestamp_created": "2021-06-19T07:27:53.642438",
            "to": "fa07efa79a8e4b58b8a826bfbc628a5c"
        },
        "ff749947592642129681e99f56bb9035": {
            "from": "ee8e6fa26d14437490223461461e9fb4",
            "timestamp_created": "2021-06-19T07:27:53.479284",
            "to": "ba947625790e456a8e4824e9fda0d8e9"
        }
    },
    "notes": {
        "0137eb98a2b946d885411da919412185": {
            "text": "Smart Notes is implemented in layers. The application itself is written using a widget framework. The widget framework is designed to meet only the needs of the application, although it might be usable as a base for other projects as well. The widget framework is realized using pygame and Cairo. Neither the application nor the widget framework knows about pygame or Cairo. All layers might use utility functions. Utilities are considered fairly generic.",
            "timestamp_created": "2021-06-19T07:27:52.609286"
        },
        "01bd457b2d52424da9a9f2fd914133c3": {
            "tags": [
                "title"
            ],
            "text": "Widget Framework",
            "timestamp_created": "2021-06-19T07:27:53.145402"
        },
        "0307b3ea3c4a4d3b9216ab7b9e2e0bbd": {
            "tags": [
                "title"
            ],
            "text": "Application",
            "timestamp_created": "2021-06-19T07:27:52.611062"
        },
        "030878e06ca3461fb0110428917bcfc2": {
            "tags": [
                "title"
            ],
            "text": "Pygame/Cairo",
            "timestamp_created": "2021-06-19T07:27:53.718238"
        },
        "03b9695f2aeb409ca19e899c73715bcb": {
            "tags": [
                "title"
            ],
            "text": "Link",
            "timestamp_created": "2021-06-19T07:27:52.679680"
        },
        "05a20094744b470f987e5c67947f8c30": {
            "text": "`process_event` should not call methods that change focus or any other attributes that affects `process_event` calls in other widgets. To solve a situation like this, you can set a flag in the `process_event` call and act on that flag in the `update` call.",
            "timestamp_created": "2021-06-19T07:27:53.295747"
        },
        "05a9b0cd9f80404793e93b7906713700": {
            "tags": [
                "title"
            ],
            "text": "Widgets",
            "timestamp_created": "2021-06-19T07:27:52.778805"
        },
        "05bb59abb936423489c2a74b974cd769": {
            "chunkpath": [
                "base base classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class Padding(Widget):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, window, parent, widget, hpadding=None, vpadding=None, **kwargs):",
                    "type": "line"
                },
                {
                    "text": "        Widget.__init__(self, window, parent, **kwargs)",
                    "type": "line"
                },
                {
                    "text": "        self.widget = widget",
                    "type": "line"
                },
                {
                    "text": "        self.hpadding = (lambda rect: 0) if hpadding is None else hpadding",
                    "type": "line"
                },
                {
                    "text": "        self.vpadding = (lambda rect: 0) if vpadding is None else vpadding",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def process_event(self, event):",
                    "type": "line"
                },
                {
                    "text": "        Widget.process_event(self, event)",
                    "type": "line"
                },
                {
                    "text": "        self.widget.process_event(event)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def update(self, rect, elapsed_ms):",
                    "type": "line"
                },
                {
                    "text": "        Widget.update(self, rect, elapsed_ms)",
                    "type": "line"
                },
                {
                    "text": "        self.widget.update(",
                    "type": "line"
                },
                {
                    "text": "            rect.inflate(-self.hpadding(rect)*2, -self.vpadding(rect)*2),",
                    "type": "line"
                },
                {
                    "text": "            elapsed_ms",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def draw(self, canvas):",
                    "type": "line"
                },
                {
                    "text": "        self.widget.draw(canvas)",
                    "type": "line"
                },
                {
                    "text": "        Widget.draw(self, canvas)",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.529461",
            "type": "code"
        },
        "06ac8f7d9aee44658310cfbd877dd8b9": {
            "text": "The child resizes itself causing it to possibly get a different rect in the next `update` call.",
            "timestamp_created": "2021-06-19T07:27:53.391355"
        },
        "0869381f43fa488b9b8aabb1f1777e19": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class SearchNote(NoteBaseWidget):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, window, parent, db, overlay, settings, note_id, open_callback):",
                    "type": "line"
                },
                {
                    "text": "        NoteBaseWidget.__init__(self, window, parent, db, overlay, note_id, settings)",
                    "type": "line"
                },
                {
                    "text": "        self.overlay = overlay",
                    "type": "line"
                },
                {
                    "text": "        self.open_callback = open_callback",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def open_me(self):",
                    "type": "line"
                },
                {
                    "text": "        self.open_callback(self.note_id)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def update(self, rect, elapsed_ms):",
                    "type": "line"
                },
                {
                    "text": "        NoteBaseWidget.update(self, rect, elapsed_ms)",
                    "type": "line"
                },
                {
                    "text": "        self.rect = self._get_target(rect, align=\"center\")",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.640157",
            "type": "code"
        },
        "08933303ef594af0a3858672b67f2df9": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class PygameEvent(object):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, event):",
                    "type": "line"
                },
                {
                    "text": "        self.event = event",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def mouse_motion(self, rect=None):",
                    "type": "line"
                },
                {
                    "text": "        return (",
                    "type": "line"
                },
                {
                    "text": "            self.event.type == pygame.MOUSEMOTION and",
                    "type": "line"
                },
                {
                    "text": "            (rect is None or rect.collidepoint(self.event.pos))",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def left_mouse_down(self, rect=None):",
                    "type": "line"
                },
                {
                    "text": "        return (",
                    "type": "line"
                },
                {
                    "text": "            self.event.type == pygame.MOUSEBUTTONDOWN and",
                    "type": "line"
                },
                {
                    "text": "            self.event.button == 1 and",
                    "type": "line"
                },
                {
                    "text": "            (rect is None or rect.collidepoint(self.event.pos))",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def left_mouse_up(self, rect=None):",
                    "type": "line"
                },
                {
                    "text": "        return (",
                    "type": "line"
                },
                {
                    "text": "            self.event.type == pygame.MOUSEBUTTONUP and",
                    "type": "line"
                },
                {
                    "text": "            self.event.button == 1 and",
                    "type": "line"
                },
                {
                    "text": "            (rect is None or rect.collidepoint(self.event.pos))",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def mouse_pos(self):",
                    "type": "line"
                },
                {
                    "text": "        return self.event.pos",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def key_down_text(self):",
                    "type": "line"
                },
                {
                    "text": "        return (",
                    "type": "line"
                },
                {
                    "text": "            self.event.type == pygame.KEYDOWN and",
                    "type": "line"
                },
                {
                    "text": "            self.event.unicode",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def key_down(self, description=None):",
                    "type": "line"
                },
                {
                    "text": "        if description is None:",
                    "type": "line"
                },
                {
                    "text": "            return self.event.type == pygame.KEYDOWN",
                    "type": "line"
                },
                {
                    "text": "        parts = description.split(\"+\")",
                    "type": "line"
                },
                {
                    "text": "        ctrl = False",
                    "type": "line"
                },
                {
                    "text": "        shift = False",
                    "type": "line"
                },
                {
                    "text": "        alt = False",
                    "type": "line"
                },
                {
                    "text": "        while parts:",
                    "type": "line"
                },
                {
                    "text": "            part = parts.pop(0)",
                    "type": "line"
                },
                {
                    "text": "            if part == \"ctrl\":",
                    "type": "line"
                },
                {
                    "text": "                ctrl = True",
                    "type": "line"
                },
                {
                    "text": "            elif part == \"shift\":",
                    "type": "line"
                },
                {
                    "text": "                shift = True",
                    "type": "line"
                },
                {
                    "text": "            elif part == \"alt\":",
                    "type": "line"
                },
                {
                    "text": "                alt = True",
                    "type": "line"
                },
                {
                    "text": "            elif not parts:",
                    "type": "line"
                },
                {
                    "text": "                key = pygame.key.key_code(part)",
                    "type": "line"
                },
                {
                    "text": "            else:",
                    "type": "line"
                },
                {
                    "text": "                raise ValueError(\"unknown part {}\".format(part))",
                    "type": "line"
                },
                {
                    "text": "        return (",
                    "type": "line"
                },
                {
                    "text": "            self.event.type == pygame.KEYDOWN and",
                    "type": "line"
                },
                {
                    "text": "            self.event.key == key and",
                    "type": "line"
                },
                {
                    "text": "            bool(self.event.mod & pygame.KMOD_CTRL) == ctrl and",
                    "type": "line"
                },
                {
                    "text": "            bool(self.event.mod & pygame.KMOD_SHIFT) == shift and",
                    "type": "line"
                },
                {
                    "text": "            bool(self.event.mod & pygame.KMOD_ALT) == alt",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def window_gained_focus(self):",
                    "type": "line"
                },
                {
                    "text": "        return (",
                    "type": "line"
                },
                {
                    "text": "            self.event.type == pygame.ACTIVEEVENT and",
                    "type": "line"
                },
                {
                    "text": "            self.event.state == 1 and",
                    "type": "line"
                },
                {
                    "text": "            self.event.gain",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def window_lost_focus(self):",
                    "type": "line"
                },
                {
                    "text": "        return (",
                    "type": "line"
                },
                {
                    "text": "            self.event.type == pygame.ACTIVEEVENT and",
                    "type": "line"
                },
                {
                    "text": "            self.event.state == 1 and",
                    "type": "line"
                },
                {
                    "text": "            not self.event.gain",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.829135",
            "type": "code"
        },
        "0ee427a47e9e4eeeb4fbbe487f1440c1": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class SmartNotesWidget(VBox):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, window, parent, path):",
                    "type": "line"
                },
                {
                    "text": "        VBox.__init__(self, window, parent)",
                    "type": "line"
                },
                {
                    "text": "        self.note_settings = NoteSettings()",
                    "type": "line"
                },
                {
                    "text": "        self.set_title(format_title(\"Smart Notes\", path))",
                    "type": "line"
                },
                {
                    "text": "        self.toggle_table_network_after_event_processing = False",
                    "type": "line"
                },
                {
                    "text": "        self.db = NoteDb(path)",
                    "type": "line"
                },
                {
                    "text": "        self.overlay = self.instantiate(OverlayWidget, self.db)",
                    "type": "line"
                },
                {
                    "text": "        self.note_browser = self.instantiate(NoteBrowserWidget,",
                    "type": "line"
                },
                {
                    "text": "            self.db,",
                    "type": "line"
                },
                {
                    "text": "            self.overlay,",
                    "type": "line"
                },
                {
                    "text": "            self.note_settings",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "        self.search_bar = self.add(self.instantiate(SearchBar,",
                    "type": "line"
                },
                {
                    "text": "            self.db,",
                    "type": "line"
                },
                {
                    "text": "            self.overlay,",
                    "type": "line"
                },
                {
                    "text": "            self.note_settings,",
                    "type": "line"
                },
                {
                    "text": "            open_callback=self._on_search_note_open,",
                    "type": "line"
                },
                {
                    "text": "            dismiss_callback=self._on_search_dismiss",
                    "type": "line"
                },
                {
                    "text": "        ))",
                    "type": "line"
                },
                {
                    "text": "        self.add(self.note_browser)",
                    "type": "line"
                },
                {
                    "text": "        self.debug_bar = self.add(self.instantiate(DebugBar))",
                    "type": "line"
                },
                {
                    "text": "        self.note_browser.focus()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def bubble_event(self, event):",
                    "type": "line"
                },
                {
                    "text": "        if event.key_down(KEY_TOGGLE_TABLE_NETWORK):",
                    "type": "line"
                },
                {
                    "text": "            self.toggle_table_network()",
                    "type": "line"
                },
                {
                    "text": "        elif event.key_down(KEY_OPEN_SEARCH):",
                    "type": "line"
                },
                {
                    "text": "            self.clear_quick_focus()",
                    "type": "line"
                },
                {
                    "text": "            self.search_bar.start_search()",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            VBox.bubble_event(self, event)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def toggle_table_network(self):",
                    "type": "line"
                },
                {
                    "text": "        self.toggle_table_network_after_event_processing = True",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def process_event(self, event):",
                    "type": "line"
                },
                {
                    "text": "        try:",
                    "type": "line"
                },
                {
                    "text": "            self.overlay.process_event(event)",
                    "type": "line"
                },
                {
                    "text": "        except OverlayAbort:",
                    "type": "line"
                },
                {
                    "text": "            pass",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            if event.mouse_motion():",
                    "type": "line"
                },
                {
                    "text": "                self.overlay.set_link_target(None)",
                    "type": "line"
                },
                {
                    "text": "                self.clear_quick_focus()",
                    "type": "line"
                },
                {
                    "text": "            if event.key_down(KEY_QUIT):",
                    "type": "line"
                },
                {
                    "text": "                self.quit()",
                    "type": "line"
                },
                {
                    "text": "            elif event.key_down(KEY_UNDO):",
                    "type": "line"
                },
                {
                    "text": "                self.db.undo()",
                    "type": "line"
                },
                {
                    "text": "            elif event.key_down(KEY_REDO):",
                    "type": "line"
                },
                {
                    "text": "                self.db.redo()",
                    "type": "line"
                },
                {
                    "text": "            elif event.key_down(KEY_TOGGLE_DEBUG_BAR):",
                    "type": "line"
                },
                {
                    "text": "                self.debug_bar.toggle()",
                    "type": "line"
                },
                {
                    "text": "            elif event.key_down(KEY_CLEAR_FOCUS) and self.clear_quick_focus():",
                    "type": "line"
                },
                {
                    "text": "                pass",
                    "type": "line"
                },
                {
                    "text": "            elif event.window_gained_focus():",
                    "type": "line"
                },
                {
                    "text": "                self.restore_focus()",
                    "type": "line"
                },
                {
                    "text": "            elif event.window_lost_focus():",
                    "type": "line"
                },
                {
                    "text": "                self.save_focus()",
                    "type": "line"
                },
                {
                    "text": "            else:",
                    "type": "line"
                },
                {
                    "text": "                VBox.process_event(self, event)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _on_search_note_open(self, note_id):",
                    "type": "line"
                },
                {
                    "text": "        self.note_browser.open_note(note_id)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _on_search_dismiss(self, close):",
                    "type": "line"
                },
                {
                    "text": "        if close:",
                    "type": "line"
                },
                {
                    "text": "            self.search_bar.hide()",
                    "type": "line"
                },
                {
                    "text": "        self.note_browser.focus()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def update(self, rect, elapsed_ms):",
                    "type": "line"
                },
                {
                    "text": "        self.overlay.update(rect, elapsed_ms)",
                    "type": "line"
                },
                {
                    "text": "        VBox.update(self, rect, elapsed_ms)",
                    "type": "line"
                },
                {
                    "text": "        self.rect = rect",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def draw(self, canvas):",
                    "type": "line"
                },
                {
                    "text": "        canvas.fill_rect(self.rect, color=COLOR_BACKGROUND)",
                    "type": "line"
                },
                {
                    "text": "        VBox.draw(self, canvas)",
                    "type": "line"
                },
                {
                    "text": "        self.overlay.draw(canvas)",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.617358",
            "type": "code"
        },
        "11126df08c334d5592ccc9d288e1be87": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class SearchField(TextField):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, window, parent, search_results, dismiss_callback, **kwargs):",
                    "type": "line"
                },
                {
                    "text": "        TextField.__init__(self, window, parent, search_results.update_search_text, **kwargs)",
                    "type": "line"
                },
                {
                    "text": "        self.search_results = search_results",
                    "type": "line"
                },
                {
                    "text": "        self.dismiss_callback = dismiss_callback",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def process_event(self, event):",
                    "type": "line"
                },
                {
                    "text": "        if self.has_focus() and self.process_event_when_in_focus(event):",
                    "type": "line"
                },
                {
                    "text": "            return",
                    "type": "line"
                },
                {
                    "text": "        TextField.process_event(self, event)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def process_event_when_in_focus(self, event):",
                    "type": "line"
                },
                {
                    "text": "        if event.key_down(\"ctrl+w\"):",
                    "type": "line"
                },
                {
                    "text": "            self.set_text(strip_last_word(self.text))",
                    "type": "line"
                },
                {
                    "text": "        elif event.key_down(\"backspace\"):",
                    "type": "line"
                },
                {
                    "text": "            self.set_text(self.text[:-1])",
                    "type": "line"
                },
                {
                    "text": "        elif event.key_down(KEY_DISMISS):",
                    "type": "line"
                },
                {
                    "text": "            self.dismiss_callback(close=True)",
                    "type": "line"
                },
                {
                    "text": "        elif event.key_down(KEY_INCREASE):",
                    "type": "line"
                },
                {
                    "text": "            self.search_results.inc_results()",
                    "type": "line"
                },
                {
                    "text": "        elif event.key_down(KEY_DECREASE):",
                    "type": "line"
                },
                {
                    "text": "            self.search_results.dec_results()",
                    "type": "line"
                },
                {
                    "text": "        elif event.key_down(KEY_CLEAR_FOCUS):",
                    "type": "line"
                },
                {
                    "text": "            self.dismiss_callback(close=False)",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            return False",
                    "type": "line"
                },
                {
                    "text": "        return True",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.627580",
            "type": "code"
        },
        "11b1c0c63fb446ddb348d60f48f8c943": {
            "tags": [
                "title"
            ],
            "text": "Utilities",
            "timestamp_created": "2021-06-19T07:27:53.951476"
        },
        "13d328224b304432a206a3a27a27a443": {
            "chunkpath": [
                "imports"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "import contextlib",
                    "type": "line"
                },
                {
                    "text": "import json",
                    "type": "line"
                },
                {
                    "text": "import os",
                    "type": "line"
                },
                {
                    "text": "import subprocess",
                    "type": "line"
                },
                {
                    "text": "import tempfile",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.977137",
            "type": "code"
        },
        "1c384abda79d4c0b8f117c6b293e2dc5": {
            "chunkpath": [
                "base classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class Box(Widget):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, window, parent, **kwargs):",
                    "type": "line"
                },
                {
                    "text": "        Widget.__init__(self, window, parent, **kwargs)",
                    "type": "line"
                },
                {
                    "text": "        self.clear()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def clear(self):",
                    "type": "line"
                },
                {
                    "text": "        self.children = []",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def add(self, child):",
                    "type": "line"
                },
                {
                    "text": "        self.children.append(child)",
                    "type": "line"
                },
                {
                    "text": "        return child",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def process_event(self, event):",
                    "type": "line"
                },
                {
                    "text": "        Widget.process_event(self, event)",
                    "type": "line"
                },
                {
                    "text": "        for child in self.visible_children():",
                    "type": "line"
                },
                {
                    "text": "            child.process_event(event)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def update(self, rect, elapsed_ms):",
                    "type": "line"
                },
                {
                    "text": "        Widget.update(self, rect, elapsed_ms)",
                    "type": "line"
                },
                {
                    "text": "        sizes = []",
                    "type": "line"
                },
                {
                    "text": "        divide_indices = []",
                    "type": "line"
                },
                {
                    "text": "        for child in self.visible_children():",
                    "type": "line"
                },
                {
                    "text": "            if self.get_widget_size(child) == -1:",
                    "type": "line"
                },
                {
                    "text": "                divide_indices.append(len(sizes))",
                    "type": "line"
                },
                {
                    "text": "                sizes.append(0)",
                    "type": "line"
                },
                {
                    "text": "            else:",
                    "type": "line"
                },
                {
                    "text": "                sizes.append(self.get_widget_size(child))",
                    "type": "line"
                },
                {
                    "text": "        if divide_indices:",
                    "type": "line"
                },
                {
                    "text": "            divide_size = int(round((self.get_rect_size(rect) - sum(sizes)) / len(divide_indices)))",
                    "type": "line"
                },
                {
                    "text": "            for divide_index in divide_indices:",
                    "type": "line"
                },
                {
                    "text": "                sizes[divide_index] = divide_size",
                    "type": "line"
                },
                {
                    "text": "        for child, size in zip(self.visible_children(), sizes):",
                    "type": "line"
                },
                {
                    "text": "            rect = self.set_rect_size(rect, size)",
                    "type": "line"
                },
                {
                    "text": "            child.update(rect, elapsed_ms)",
                    "type": "line"
                },
                {
                    "text": "            rect = self.move_rect(rect, size)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def draw(self, canvas):",
                    "type": "line"
                },
                {
                    "text": "        for child in self.visible_children():",
                    "type": "line"
                },
                {
                    "text": "            child.draw(canvas)",
                    "type": "line"
                },
                {
                    "text": "        Widget.draw(self, canvas)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def visible_children(self):",
                    "type": "line"
                },
                {
                    "text": "        for child in self.children:",
                    "type": "line"
                },
                {
                    "text": "            if child.is_visible():",
                    "type": "line"
                },
                {
                    "text": "                yield child",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.569826",
            "type": "code"
        },
        "21228dea83a648c0a3c698b8f9e50b30": {
            "tags": [
                "title"
            ],
            "text": "Text Manipulation",
            "timestamp_created": "2021-06-19T07:27:54.293639"
        },
        "2161885ac39948218c2dbe0f23e91c5e": {
            "chunkpath": [
                "end-to-end"
            ],
            "filepath": [
                "test_smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def test_table_view(self):",
                    "type": "line"
                },
                {
                    "text": "    self.driver.iteration(events=[KeyEvent(\"t\")], elapsed_ms=300+1)",
                    "type": "line"
                },
                {
                    "text": "    self.assert_drawn_image_is(\"table_view.png\")",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.014429",
            "type": "code"
        },
        "21f583aa5a32443fbad72db20a181f03": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class NetworkNote(NoteBaseWidget):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, window, parent, network, db, overlay, note_id, settings):",
                    "type": "line"
                },
                {
                    "text": "        NoteBaseWidget.__init__(self, window, parent, db, overlay, note_id, settings)",
                    "type": "line"
                },
                {
                    "text": "        self.overlay = overlay",
                    "type": "line"
                },
                {
                    "text": "        self.network = network",
                    "type": "line"
                },
                {
                    "text": "        self.incoming = []",
                    "type": "line"
                },
                {
                    "text": "        self.outgoing = []",
                    "type": "line"
                },
                {
                    "text": "        self.animation = Animation()",
                    "type": "line"
                },
                {
                    "text": "        self.rect = None",
                    "type": "line"
                },
                {
                    "text": "        self.target = None",
                    "type": "line"
                },
                {
                    "text": "        self.previous = None",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def clear_hidden_links(self, visible_links):",
                    "type": "line"
                },
                {
                    "text": "        self.incoming = [x for x in self.incoming if x in visible_links]",
                    "type": "line"
                },
                {
                    "text": "        self.outgoing = [x for x in self.outgoing if x in visible_links]",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def open_me(self):",
                    "type": "line"
                },
                {
                    "text": "        self.network.make_root(self)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def process_event(self, event):",
                    "type": "line"
                },
                {
                    "text": "        if self.has_focus() and event.key_down(KEY_UNLINK_NOTE):",
                    "type": "line"
                },
                {
                    "text": "            link_id = self.get_link_id()",
                    "type": "line"
                },
                {
                    "text": "            if link_id:",
                    "type": "line"
                },
                {
                    "text": "                self.db.delete_link(link_id)",
                    "type": "line"
                },
                {
                    "text": "                self.clear_quick_focus()",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            NoteBaseWidget.process_event(self, event)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def update_incoming(self):",
                    "type": "line"
                },
                {
                    "text": "        by_id = {",
                    "type": "line"
                },
                {
                    "text": "            link.link_id: link",
                    "type": "line"
                },
                {
                    "text": "            for link in self.incoming",
                    "type": "line"
                },
                {
                    "text": "        }",
                    "type": "line"
                },
                {
                    "text": "        self.incoming = []",
                    "type": "line"
                },
                {
                    "text": "        for link_id, link_data in self.db.get_incoming_links(self.note_id):",
                    "type": "line"
                },
                {
                    "text": "            if link_id in by_id:",
                    "type": "line"
                },
                {
                    "text": "                self.incoming.append(by_id.pop(link_id))",
                    "type": "line"
                },
                {
                    "text": "            else:",
                    "type": "line"
                },
                {
                    "text": "                self.instantiate(LinkWidget,",
                    "type": "line"
                },
                {
                    "text": "                    self.db,",
                    "type": "line"
                },
                {
                    "text": "                    link_id,",
                    "type": "line"
                },
                {
                    "text": "                    self.instantiate(",
                    "type": "line"
                },
                {
                    "text": "                        NetworkNote,",
                    "type": "line"
                },
                {
                    "text": "                        self.network,",
                    "type": "line"
                },
                {
                    "text": "                        self.db,",
                    "type": "line"
                },
                {
                    "text": "                        self.overlay,",
                    "type": "line"
                },
                {
                    "text": "                        link_data[\"from\"],",
                    "type": "line"
                },
                {
                    "text": "                        self.settings",
                    "type": "line"
                },
                {
                    "text": "                    ),",
                    "type": "line"
                },
                {
                    "text": "                    self",
                    "type": "line"
                },
                {
                    "text": "                )",
                    "type": "line"
                },
                {
                    "text": "        return self.incoming",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def update_outgoing(self):",
                    "type": "line"
                },
                {
                    "text": "        by_id = {",
                    "type": "line"
                },
                {
                    "text": "            link.link_id: link",
                    "type": "line"
                },
                {
                    "text": "            for link in self.outgoing",
                    "type": "line"
                },
                {
                    "text": "        }",
                    "type": "line"
                },
                {
                    "text": "        self.outgoing = []",
                    "type": "line"
                },
                {
                    "text": "        for link_id, link_data in self.db.get_outgoing_links(self.note_id):",
                    "type": "line"
                },
                {
                    "text": "            if link_id in by_id:",
                    "type": "line"
                },
                {
                    "text": "                self.outgoing.append(by_id.pop(link_id))",
                    "type": "line"
                },
                {
                    "text": "            else:",
                    "type": "line"
                },
                {
                    "text": "                self.instantiate(LinkWidget,",
                    "type": "line"
                },
                {
                    "text": "                    self.db,",
                    "type": "line"
                },
                {
                    "text": "                    link_id,",
                    "type": "line"
                },
                {
                    "text": "                    self,",
                    "type": "line"
                },
                {
                    "text": "                    self.instantiate(",
                    "type": "line"
                },
                {
                    "text": "                        NetworkNote,",
                    "type": "line"
                },
                {
                    "text": "                        self.network,",
                    "type": "line"
                },
                {
                    "text": "                        self.db,",
                    "type": "line"
                },
                {
                    "text": "                        self.overlay,",
                    "type": "line"
                },
                {
                    "text": "                        link_data[\"to\"],",
                    "type": "line"
                },
                {
                    "text": "                        self.settings",
                    "type": "line"
                },
                {
                    "text": "                    )",
                    "type": "line"
                },
                {
                    "text": "                )",
                    "type": "line"
                },
                {
                    "text": "        return self.outgoing",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_link_id(self):",
                    "type": "line"
                },
                {
                    "text": "        if self.side == \"left\" and len(self.outgoing) == 1:",
                    "type": "line"
                },
                {
                    "text": "            return self.outgoing[0].link_id",
                    "type": "line"
                },
                {
                    "text": "        if self.side == \"right\" and len(self.incoming) == 1:",
                    "type": "line"
                },
                {
                    "text": "            return self.incoming[0].link_id",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_center(self):",
                    "type": "line"
                },
                {
                    "text": "        return self.rect.center",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_link_in_point(self):",
                    "type": "line"
                },
                {
                    "text": "        return self.rect.midleft",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_link_out_point(self):",
                    "type": "line"
                },
                {
                    "text": "        return self.rect.midright",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def update(self, rect, elapsed_ms, side, center_position):",
                    "type": "line"
                },
                {
                    "text": "        NoteBaseWidget.update(self, rect, elapsed_ms)",
                    "type": "line"
                },
                {
                    "text": "        self.side = side",
                    "type": "line"
                },
                {
                    "text": "        self.true_rect = rect",
                    "type": "line"
                },
                {
                    "text": "        target = self._get_target(rect, side)",
                    "type": "line"
                },
                {
                    "text": "        if center_position:",
                    "type": "line"
                },
                {
                    "text": "            x = target.copy()",
                    "type": "line"
                },
                {
                    "text": "            x.center = center_position",
                    "type": "line"
                },
                {
                    "text": "            self.rect = self.target = self.previous = x",
                    "type": "line"
                },
                {
                    "text": "        if self.rect is None:",
                    "type": "line"
                },
                {
                    "text": "            self.rect = self.target = self.previous = target",
                    "type": "line"
                },
                {
                    "text": "        if target != self.target:",
                    "type": "line"
                },
                {
                    "text": "            if self.animation.active():",
                    "type": "line"
                },
                {
                    "text": "                self.rect = self.target",
                    "type": "line"
                },
                {
                    "text": "            self.target = target",
                    "type": "line"
                },
                {
                    "text": "            self.previous = self.rect",
                    "type": "line"
                },
                {
                    "text": "            self.animation.start(300)",
                    "type": "line"
                },
                {
                    "text": "        if self.animation.active():",
                    "type": "line"
                },
                {
                    "text": "            x_diff = self.target.width - self.previous.width",
                    "type": "line"
                },
                {
                    "text": "            y_diff = self.target.height - self.previous.height",
                    "type": "line"
                },
                {
                    "text": "            percent = self.animation.advance(elapsed_ms)",
                    "type": "line"
                },
                {
                    "text": "            self.rect = self.previous.inflate(x_diff*percent, y_diff*percent).move(",
                    "type": "line"
                },
                {
                    "text": "                (",
                    "type": "line"
                },
                {
                    "text": "                    pygame.math.Vector2(self.target.center)-",
                    "type": "line"
                },
                {
                    "text": "                    pygame.math.Vector2(self.previous.center)",
                    "type": "line"
                },
                {
                    "text": "                )*percent",
                    "type": "line"
                },
                {
                    "text": "            )",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def draw(self, canvas):",
                    "type": "line"
                },
                {
                    "text": "        NoteBaseWidget.draw(self, canvas)",
                    "type": "line"
                },
                {
                    "text": "        if DEBUG_NOTE_BORDER:",
                    "type": "line"
                },
                {
                    "text": "            canvas.draw_rect(self.true_rect, (255, 0, 0), 1)",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.671796",
            "type": "code"
        },
        "25ce5b2877d94c10b54dcad84500c9f9": {
            "tags": [
                "title"
            ],
            "text": "Pygame",
            "timestamp_created": "2021-06-19T07:27:53.762854"
        },
        "28bb50737b9843fea003e2659b62a1cb": {
            "tags": [
                "title"
            ],
            "text": "Search Field",
            "timestamp_created": "2021-06-19T07:27:52.624705"
        },
        "291e4cbb8ca049998afaa567b1749d9b": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class CairoCanvas(object):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, surface):",
                    "type": "line"
                },
                {
                    "text": "        self.surface = surface",
                    "type": "line"
                },
                {
                    "text": "        self.ctx = cairo.Context(self.surface)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def create_image(self, size, fn):",
                    "type": "line"
                },
                {
                    "text": "        surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, size[0], size[1])",
                    "type": "line"
                },
                {
                    "text": "        fn(CairoCanvas(surface))",
                    "type": "line"
                },
                {
                    "text": "        return surface",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def blit(self, image, pos, alpha=255, scale_to_fit=None):",
                    "type": "line"
                },
                {
                    "text": "        self.ctx.save()",
                    "type": "line"
                },
                {
                    "text": "        self.ctx.translate(pos[0], pos[1])",
                    "type": "line"
                },
                {
                    "text": "        if scale_to_fit:",
                    "type": "line"
                },
                {
                    "text": "            self.ctx.scale(",
                    "type": "line"
                },
                {
                    "text": "                max(0.001, scale_to_fit[0] / image.get_width()),",
                    "type": "line"
                },
                {
                    "text": "                max(0.001, scale_to_fit[1] / image.get_height())",
                    "type": "line"
                },
                {
                    "text": "            )",
                    "type": "line"
                },
                {
                    "text": "        self.ctx.set_source_surface(image, 0, 0)",
                    "type": "line"
                },
                {
                    "text": "        self.ctx.paint_with_alpha(alpha/255)",
                    "type": "line"
                },
                {
                    "text": "        self.ctx.restore()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def fill_rect(self, rect, color=(0, 0, 0)):",
                    "type": "line"
                },
                {
                    "text": "        self._set_color(color)",
                    "type": "line"
                },
                {
                    "text": "        self.ctx.rectangle(rect.x, rect.y, rect.width, rect.height)",
                    "type": "line"
                },
                {
                    "text": "        self.ctx.fill()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def draw_rect(self, rect, color, width):",
                    "type": "line"
                },
                {
                    "text": "        if width % 2 == 0:",
                    "type": "line"
                },
                {
                    "text": "            offset = 0",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            offset = 0.5",
                    "type": "line"
                },
                {
                    "text": "        self._set_color(color)",
                    "type": "line"
                },
                {
                    "text": "        self.ctx.rectangle(rect.x+offset, rect.y+offset, rect.width, rect.height)",
                    "type": "line"
                },
                {
                    "text": "        self.ctx.set_line_width(width)",
                    "type": "line"
                },
                {
                    "text": "        self.ctx.stroke()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _set_color(self, color):",
                    "type": "line"
                },
                {
                    "text": "        if len(color) == 4:",
                    "type": "line"
                },
                {
                    "text": "            self.ctx.set_source_rgba(color[0]/255, color[1]/255, color[2]/255, color[3]/255)",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            self.ctx.set_source_rgb(color[0]/255, color[1]/255, color[2]/255)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def render_text(self, text, box,",
                    "type": "line"
                },
                {
                    "text": "        size=40,",
                    "type": "line"
                },
                {
                    "text": "        boxalign=\"center\",",
                    "type": "line"
                },
                {
                    "text": "        face=None,",
                    "type": "line"
                },
                {
                    "text": "        textalign=\"left\",",
                    "type": "line"
                },
                {
                    "text": "        split=True,",
                    "type": "line"
                },
                {
                    "text": "        color=(0, 0, 0)",
                    "type": "line"
                },
                {
                    "text": "    ):",
                    "type": "line"
                },
                {
                    "text": "        if box.height <= 0:",
                    "type": "line"
                },
                {
                    "text": "            return",
                    "type": "line"
                },
                {
                    "text": "        if split:",
                    "type": "line"
                },
                {
                    "text": "            text = text.strip().replace(\"\\n\", \" \")",
                    "type": "line"
                },
                {
                    "text": "        if not text:",
                    "type": "line"
                },
                {
                    "text": "            return",
                    "type": "line"
                },
                {
                    "text": "        if DEBUG_TEXT_BORDER:",
                    "type": "line"
                },
                {
                    "text": "            self.ctx.set_source_rgb(1, 0.1, 0.1)",
                    "type": "line"
                },
                {
                    "text": "            self.ctx.rectangle(box[0], box[1], box[2], box[3])",
                    "type": "line"
                },
                {
                    "text": "            self.ctx.set_line_width(1)",
                    "type": "line"
                },
                {
                    "text": "            self.ctx.stroke()",
                    "type": "line"
                },
                {
                    "text": "        if face is not None:",
                    "type": "line"
                },
                {
                    "text": "            self.ctx.select_font_face(face)",
                    "type": "line"
                },
                {
                    "text": "        self._set_color(color)",
                    "type": "line"
                },
                {
                    "text": "        metrics, scale_factor = self._find_best_fit(text, box, split, size)",
                    "type": "line"
                },
                {
                    "text": "        self.ctx.save()",
                    "type": "line"
                },
                {
                    "text": "        xoffset = 0",
                    "type": "line"
                },
                {
                    "text": "        yoffset = 0",
                    "type": "line"
                },
                {
                    "text": "        self._translate_box(box, metrics[\"width\"]*scale_factor, metrics[\"height\"]*scale_factor, boxalign)",
                    "type": "line"
                },
                {
                    "text": "        self.ctx.scale(scale_factor, scale_factor)",
                    "type": "line"
                },
                {
                    "text": "        for x, y, width, part in metrics[\"parts\"]:",
                    "type": "line"
                },
                {
                    "text": "            if not split:",
                    "type": "line"
                },
                {
                    "text": "                x = 0",
                    "type": "line"
                },
                {
                    "text": "            if textalign == \"center\":",
                    "type": "line"
                },
                {
                    "text": "                x_align_offset = (metrics[\"width\"]-width)/2",
                    "type": "line"
                },
                {
                    "text": "            elif textalign == \"right\":",
                    "type": "line"
                },
                {
                    "text": "                x_align_offset = metrics[\"width\"]-width",
                    "type": "line"
                },
                {
                    "text": "            else:",
                    "type": "line"
                },
                {
                    "text": "                x_align_offset = 0",
                    "type": "line"
                },
                {
                    "text": "            self.ctx.move_to(x+x_align_offset, y)",
                    "type": "line"
                },
                {
                    "text": "            self.ctx.show_text(part)",
                    "type": "line"
                },
                {
                    "text": "        if DEBUG_TEXT_BORDER:",
                    "type": "line"
                },
                {
                    "text": "            self.ctx.set_source_rgb(0.1, 1, 0.1)",
                    "type": "line"
                },
                {
                    "text": "            self.ctx.rectangle(0, 0, metrics[\"width\"], metrics[\"height\"])",
                    "type": "line"
                },
                {
                    "text": "            self.ctx.set_line_width(2/scale_factor)",
                    "type": "line"
                },
                {
                    "text": "            self.ctx.stroke()",
                    "type": "line"
                },
                {
                    "text": "        self.ctx.restore()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _find_best_fit(self, text, box, split, size):",
                    "type": "line"
                },
                {
                    "text": "        self.ctx.set_font_size(size)",
                    "type": "line"
                },
                {
                    "text": "        if split:",
                    "type": "line"
                },
                {
                    "text": "            metrics = self._find_best_split(text, box)",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            metrics = self._get_metrics(text.splitlines())",
                    "type": "line"
                },
                {
                    "text": "        scale_factor = box.width / metrics[\"width\"]",
                    "type": "line"
                },
                {
                    "text": "        if metrics[\"height\"] * scale_factor > box.height:",
                    "type": "line"
                },
                {
                    "text": "            scale_factor = box.height / metrics[\"height\"]",
                    "type": "line"
                },
                {
                    "text": "        scale_factor = min(scale_factor, 1)",
                    "type": "line"
                },
                {
                    "text": "        size = int(size*scale_factor)",
                    "type": "line"
                },
                {
                    "text": "        if scale_factor < 1:",
                    "type": "line"
                },
                {
                    "text": "            while True:",
                    "type": "line"
                },
                {
                    "text": "                self.ctx.set_font_size(size)",
                    "type": "line"
                },
                {
                    "text": "                metrics = self._get_metrics([x[-1] for x in metrics[\"parts\"]])",
                    "type": "line"
                },
                {
                    "text": "                if size < 2:",
                    "type": "line"
                },
                {
                    "text": "                    break",
                    "type": "line"
                },
                {
                    "text": "                if metrics[\"width\"] <= box.width and metrics[\"height\"] <= box.height:",
                    "type": "line"
                },
                {
                    "text": "                    break",
                    "type": "line"
                },
                {
                    "text": "                size -= 1",
                    "type": "line"
                },
                {
                    "text": "        return metrics, 1",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _find_best_split(self, text, box):",
                    "type": "line"
                },
                {
                    "text": "        split_times = 1",
                    "type": "line"
                },
                {
                    "text": "        target_ratio = box.width / box.height",
                    "type": "line"
                },
                {
                    "text": "        metrics = self._get_metrics(self._split_text(text, split_times))",
                    "type": "line"
                },
                {
                    "text": "        diff = abs(metrics[\"ratio\"] - target_ratio)",
                    "type": "line"
                },
                {
                    "text": "        while True:",
                    "type": "line"
                },
                {
                    "text": "            split_times += 1",
                    "type": "line"
                },
                {
                    "text": "            new_metrics = self._get_metrics(self._split_text(text, split_times))",
                    "type": "line"
                },
                {
                    "text": "            new_diff = abs(new_metrics[\"ratio\"] - target_ratio)",
                    "type": "line"
                },
                {
                    "text": "            if new_metrics == metrics or new_diff > diff:",
                    "type": "line"
                },
                {
                    "text": "                return metrics",
                    "type": "line"
                },
                {
                    "text": "            else:",
                    "type": "line"
                },
                {
                    "text": "                diff = new_diff",
                    "type": "line"
                },
                {
                    "text": "                metrics = new_metrics",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _split_text(self, text, times):",
                    "type": "line"
                },
                {
                    "text": "        words = text.split(\" \")",
                    "type": "line"
                },
                {
                    "text": "        words_per_part = max(1, int(round(len(words) / times)))",
                    "type": "line"
                },
                {
                    "text": "        parts = []",
                    "type": "line"
                },
                {
                    "text": "        start = 0",
                    "type": "line"
                },
                {
                    "text": "        while start < len(words):",
                    "type": "line"
                },
                {
                    "text": "            parts.append(\" \".join(words[start:start+words_per_part]))",
                    "type": "line"
                },
                {
                    "text": "            start += words_per_part",
                    "type": "line"
                },
                {
                    "text": "        return parts",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _get_metrics(self, splits):",
                    "type": "line"
                },
                {
                    "text": "        width = 0",
                    "type": "line"
                },
                {
                    "text": "        height = 0",
                    "type": "line"
                },
                {
                    "text": "        start_y = None",
                    "type": "line"
                },
                {
                    "text": "        parts = []",
                    "type": "line"
                },
                {
                    "text": "        font_ascent, font_descent = self.ctx.font_extents()[0:2]",
                    "type": "line"
                },
                {
                    "text": "        extra = font_descent*0.9",
                    "type": "line"
                },
                {
                    "text": "        for text in splits:",
                    "type": "line"
                },
                {
                    "text": "            extents = self.ctx.text_extents(text)",
                    "type": "line"
                },
                {
                    "text": "            height += font_ascent",
                    "type": "line"
                },
                {
                    "text": "            parts.append((-extents.x_bearing, height, extents.width, text))",
                    "type": "line"
                },
                {
                    "text": "            width = max(width, extents.width)",
                    "type": "line"
                },
                {
                    "text": "            height += font_descent",
                    "type": "line"
                },
                {
                    "text": "            height += extra",
                    "type": "line"
                },
                {
                    "text": "        height -= extra",
                    "type": "line"
                },
                {
                    "text": "        if height == 0:",
                    "type": "line"
                },
                {
                    "text": "            height = 0.1",
                    "type": "line"
                },
                {
                    "text": "        return {",
                    "type": "line"
                },
                {
                    "text": "            \"parts\": parts,",
                    "type": "line"
                },
                {
                    "text": "            \"width\": width,",
                    "type": "line"
                },
                {
                    "text": "            \"height\": height,",
                    "type": "line"
                },
                {
                    "text": "            \"ratio\": width / height,",
                    "type": "line"
                },
                {
                    "text": "        }",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _translate_box(self, box, text_width, text_height, boxalign):",
                    "type": "line"
                },
                {
                    "text": "        # topleft      topcenter     topright",
                    "type": "line"
                },
                {
                    "text": "        # midleft        center      midright",
                    "type": "line"
                },
                {
                    "text": "        # bottomleft  bottomcenter  bottomright",
                    "type": "line"
                },
                {
                    "text": "        if boxalign in [\"topright\", \"midright\", \"bottomright\"]:",
                    "type": "line"
                },
                {
                    "text": "            xoffset = box[2]-text_width",
                    "type": "line"
                },
                {
                    "text": "        elif boxalign in [\"topcenter\", \"center\", \"bottomcenter\"]:",
                    "type": "line"
                },
                {
                    "text": "            xoffset = box[2]/2-text_width/2",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            xoffset = 0",
                    "type": "line"
                },
                {
                    "text": "        if boxalign in [\"bottomleft\", \"bottomcenter\", \"bottomright\"]:",
                    "type": "line"
                },
                {
                    "text": "            yoffset = box[3]-text_height",
                    "type": "line"
                },
                {
                    "text": "        elif boxalign in [\"midleft\", \"center\", \"midright\"]:",
                    "type": "line"
                },
                {
                    "text": "            yoffset = box[3]/2-text_height/2",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            yoffset = 0",
                    "type": "line"
                },
                {
                    "text": "        self.ctx.translate(box[0]+xoffset, box[1]+yoffset)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def move_to(self, x, y):",
                    "type": "line"
                },
                {
                    "text": "        self.ctx.move_to(x, y)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def line_to(self, x, y):",
                    "type": "line"
                },
                {
                    "text": "        self.ctx.line_to(x, y)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def curve_to(self, *args):",
                    "type": "line"
                },
                {
                    "text": "        self.ctx.curve_to(*args)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def set_source_rgb(self, *args):",
                    "type": "line"
                },
                {
                    "text": "        self.ctx.set_source_rgb(*args)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def set_line_width(self, *args):",
                    "type": "line"
                },
                {
                    "text": "        self.ctx.set_line_width(*args)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def stroke(self, *args):",
                    "type": "line"
                },
                {
                    "text": "        self.ctx.stroke(*args)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_rect(self):",
                    "type": "line"
                },
                {
                    "text": "        return pygame.Rect(",
                    "type": "line"
                },
                {
                    "text": "            0,",
                    "type": "line"
                },
                {
                    "text": "            0,",
                    "type": "line"
                },
                {
                    "text": "            self.surface.get_width(),",
                    "type": "line"
                },
                {
                    "text": "            self.surface.get_height()",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.875564",
            "type": "code"
        },
        "29bce2bdc6844ce1bd962cd144359aaa": {
            "tags": [
                "title"
            ],
            "text": "Padding",
            "timestamp_created": "2021-06-19T07:27:53.509600"
        },
        "2d9ff066dc6d428593815e2735918279": {
            "text": "The main interaction with widgets happen in three method calls: `process_event`, `update`, and `draw`. You can see in Pygame how they are invoked. This architecture is inspired by a game loop.",
            "timestamp_created": "2021-06-19T07:27:53.238486"
        },
        "2e71ca7444654d178322a9f276f4f2f5": {
            "text": "<unordered list>",
            "timestamp_created": "2021-06-19T07:27:53.276814"
        },
        "2ee004f1e26a4e6bafcf5e9fd1e4e874": {
            "tags": [
                "title"
            ],
            "text": "Canvas",
            "timestamp_created": "2021-06-19T07:27:53.852281"
        },
        "3630311283704b878fd1b9ca4d3453f9": {
            "chunkpath": [
                "functions"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def write_json_file(path, value):",
                    "type": "line"
                },
                {
                    "text": "    with safe_write(path) as f:",
                    "type": "line"
                },
                {
                    "text": "        json.dump(value, f, indent=4, sort_keys=True)",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:54.186814",
            "type": "code"
        },
        "378ad330e3104287820d0abc9669577b": {
            "tags": [
                "title"
            ],
            "text": "Widget",
            "timestamp_created": "2021-06-19T07:27:53.163429"
        },
        "382b92a71e654628ad4c1b51bc4fe471": {
            "chunkpath": [
                "end-to-end"
            ],
            "filepath": [
                "test_smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def test_note_focused(self):",
                    "type": "line"
                },
                {
                    "text": "    self.driver.iteration(elapsed_ms=300+1)",
                    "type": "line"
                },
                {
                    "text": "    self.driver.iteration(events=[MouseMotionEvent((400, 300))], elapsed_ms=1)",
                    "type": "line"
                },
                {
                    "text": "    self.assert_drawn_image_is(\"network_note_focused.png\")",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.030085",
            "type": "code"
        },
        "398ad55085fc451383e54a64291de937": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class LinkNotFound(ValueError):",
                    "type": "line"
                },
                {
                    "text": "    pass",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.866026",
            "type": "code"
        },
        "3c0c8700f3df48f993020e420ec4b125": {
            "tags": [
                "title"
            ],
            "text": "Table",
            "timestamp_created": "2021-06-19T07:27:52.696232"
        },
        "3d9747ab26b64a78a40915de14abec3c": {
            "chunkpath": [
                "base base classes",
                "BaseWidget",
                "interaction"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def process_event(self, event):",
                    "type": "line"
                },
                {
                    "text": "    if self.has_focus() and event.key_down():",
                    "type": "line"
                },
                {
                    "text": "        self.bubble_event(event)",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.429749",
            "type": "code"
        },
        "42bff83e87e6458b90cae3be48449b9e": {
            "chunkpath": [
                "base classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class NoteBaseWidget(Widget):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, window, parent, db, overlay, note_id, settings):",
                    "type": "line"
                },
                {
                    "text": "        Widget.__init__(self, window, parent)",
                    "type": "line"
                },
                {
                    "text": "        self.db = db",
                    "type": "line"
                },
                {
                    "text": "        self.overlay = overlay",
                    "type": "line"
                },
                {
                    "text": "        self.note_id = note_id",
                    "type": "line"
                },
                {
                    "text": "        self.settings = settings",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def is_deleted(self):",
                    "type": "line"
                },
                {
                    "text": "        try:",
                    "type": "line"
                },
                {
                    "text": "            self.db.get_note_data(self.note_id)",
                    "type": "line"
                },
                {
                    "text": "            return False",
                    "type": "line"
                },
                {
                    "text": "        except NoteNotFound:",
                    "type": "line"
                },
                {
                    "text": "            return True",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def bubble_event(self, event):",
                    "type": "line"
                },
                {
                    "text": "        if event.key_down(KEY_EDIT_NOTE):",
                    "type": "line"
                },
                {
                    "text": "            self.clear_quick_focus()",
                    "type": "line"
                },
                {
                    "text": "            self.post_event(",
                    "type": "line"
                },
                {
                    "text": "                USER_EVENT_EXTERNAL_TEXT_ENTRY,",
                    "type": "line"
                },
                {
                    "text": "                entry=NoteText(self.db, self.note_id)",
                    "type": "line"
                },
                {
                    "text": "            )",
                    "type": "line"
                },
                {
                    "text": "        elif event.key_down(KEY_DELETE_NOTE):",
                    "type": "line"
                },
                {
                    "text": "            self.clear_quick_focus()",
                    "type": "line"
                },
                {
                    "text": "            self.db.delete_note(self.note_id)",
                    "type": "line"
                },
                {
                    "text": "        elif event.key_down(KEY_OPEN_LINKS):",
                    "type": "line"
                },
                {
                    "text": "            for link in self.db.get_note_data(self.note_id).get(\"links\", []):",
                    "type": "line"
                },
                {
                    "text": "                webbrowser.open(link)",
                    "type": "line"
                },
                {
                    "text": "        elif event.key_down(KEY_CREATE_NOTE):",
                    "type": "line"
                },
                {
                    "text": "            self.clear_quick_focus()",
                    "type": "line"
                },
                {
                    "text": "            with self.db.transaction():",
                    "type": "line"
                },
                {
                    "text": "                child_note_id = self.db.create_note(text=NEW_NOTE_TEXT)",
                    "type": "line"
                },
                {
                    "text": "                self.db.create_link(self.note_id, child_note_id)",
                    "type": "line"
                },
                {
                    "text": "            self.post_event(",
                    "type": "line"
                },
                {
                    "text": "                USER_EVENT_EXTERNAL_TEXT_ENTRY,",
                    "type": "line"
                },
                {
                    "text": "                entry=NoteText(self.db, child_note_id)",
                    "type": "line"
                },
                {
                    "text": "            )",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            Widget.bubble_event(self, event)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def process_event(self, event):",
                    "type": "line"
                },
                {
                    "text": "        if event.mouse_motion(rect=self.rect):",
                    "type": "line"
                },
                {
                    "text": "            self.overlay.set_link_target(self)",
                    "type": "line"
                },
                {
                    "text": "            self.quick_focus()",
                    "type": "line"
                },
                {
                    "text": "        if self.has_focus() and event.left_mouse_down(self.rect):",
                    "type": "line"
                },
                {
                    "text": "            self.overlay.set_link_source(self)",
                    "type": "line"
                },
                {
                    "text": "        elif self.has_focus() and event.left_mouse_up(self.rect):",
                    "type": "line"
                },
                {
                    "text": "            self.open_me()",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            Widget.process_event(self, event)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def update(self, rect, elapsed_ms):",
                    "type": "line"
                },
                {
                    "text": "        Widget.update(self, rect, elapsed_ms)",
                    "type": "line"
                },
                {
                    "text": "        self.data = self.db.get_note_data(self.note_id)",
                    "type": "line"
                },
                {
                    "text": "        self.full_width = self.settings.get_full_width()",
                    "type": "line"
                },
                {
                    "text": "        self.full_height = int(",
                    "type": "line"
                },
                {
                    "text": "            self.full_width * self.settings.get_height_width_ratio()",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "        self.card_full_size = (self.full_width, self.full_height)",
                    "type": "line"
                },
                {
                    "text": "        self.card_full_rect = pygame.Rect((0, 0), self.card_full_size)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def draw(self, canvas):",
                    "type": "line"
                },
                {
                    "text": "        border_size = 3",
                    "type": "line"
                },
                {
                    "text": "        border = self.rect.copy()",
                    "type": "line"
                },
                {
                    "text": "        border.width -= border_size",
                    "type": "line"
                },
                {
                    "text": "        border.height -= border_size",
                    "type": "line"
                },
                {
                    "text": "        border.x += border_size",
                    "type": "line"
                },
                {
                    "text": "        border.y += border_size",
                    "type": "line"
                },
                {
                    "text": "        canvas.fill_rect(border, color=(0, 0, 0, 50))",
                    "type": "line"
                },
                {
                    "text": "        border.x -= border_size",
                    "type": "line"
                },
                {
                    "text": "        border.y -= border_size",
                    "type": "line"
                },
                {
                    "text": "        canvas.fill_rect(border, color=COLOR_NOTE_BG)",
                    "type": "line"
                },
                {
                    "text": "        canvas.draw_rect(border, (0, 0, 0, 120), 1)",
                    "type": "line"
                },
                {
                    "text": "        canvas.blit(",
                    "type": "line"
                },
                {
                    "text": "            canvas.create_image(",
                    "type": "line"
                },
                {
                    "text": "                self.card_full_size,",
                    "type": "line"
                },
                {
                    "text": "                self._draw_card",
                    "type": "line"
                },
                {
                    "text": "            ),",
                    "type": "line"
                },
                {
                    "text": "            self.rect,",
                    "type": "line"
                },
                {
                    "text": "            scale_to_fit=self.rect.size",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "        Widget.draw(self, canvas)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_focus_rect(self):",
                    "type": "line"
                },
                {
                    "text": "        border_size = 3",
                    "type": "line"
                },
                {
                    "text": "        border = self.rect.copy()",
                    "type": "line"
                },
                {
                    "text": "        border.width -= border_size",
                    "type": "line"
                },
                {
                    "text": "        border.height -= border_size",
                    "type": "line"
                },
                {
                    "text": "        return border.inflate(-7, -7).move(1, 1).inflate(2, 2)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _draw_card(self, canvas):",
                    "type": "line"
                },
                {
                    "text": "        border = 8",
                    "type": "line"
                },
                {
                    "text": "        status_height = self.full_width/20",
                    "type": "line"
                },
                {
                    "text": "        rect = self.card_full_rect",
                    "type": "line"
                },
                {
                    "text": "        rect = rect.inflate(-border*4, -border*3-status_height)",
                    "type": "line"
                },
                {
                    "text": "        rect.top = border",
                    "type": "line"
                },
                {
                    "text": "        if DEBUG_NOTE_BORDER:",
                    "type": "line"
                },
                {
                    "text": "            canvas.draw_rect(rect, (200, 50, 50), 1)",
                    "type": "line"
                },
                {
                    "text": "        attributes = {",
                    "type": "line"
                },
                {
                    "text": "            \"textalign\": \"left\",",
                    "type": "line"
                },
                {
                    "text": "        }",
                    "type": "line"
                },
                {
                    "text": "        for tag in TAG_ATTRIBUTES:",
                    "type": "line"
                },
                {
                    "text": "            if tag[\"name\"] in self.data.get(\"tags\", []):",
                    "type": "line"
                },
                {
                    "text": "                for key in list(attributes.keys()):",
                    "type": "line"
                },
                {
                    "text": "                    if key in tag:",
                    "type": "line"
                },
                {
                    "text": "                        attributes[key] = tag[key]",
                    "type": "line"
                },
                {
                    "text": "        if self.data.get(\"type\", \"text\") == \"code\":",
                    "type": "line"
                },
                {
                    "text": "            header = rect.copy()",
                    "type": "line"
                },
                {
                    "text": "            header.height = status_height",
                    "type": "line"
                },
                {
                    "text": "            body = rect.copy()",
                    "type": "line"
                },
                {
                    "text": "            body.y += (header.height*1.5)",
                    "type": "line"
                },
                {
                    "text": "            body.height -= (header.height*1.5)",
                    "type": "line"
                },
                {
                    "text": "            canvas.render_text(",
                    "type": "line"
                },
                {
                    "text": "                \"{} - {}\".format(",
                    "type": "line"
                },
                {
                    "text": "                    \"/\".join(self.data[\"filepath\"]),",
                    "type": "line"
                },
                {
                    "text": "                    \"/\".join(self.data[\"chunkpath\"])",
                    "type": "line"
                },
                {
                    "text": "                ),",
                    "type": "line"
                },
                {
                    "text": "                header,",
                    "type": "line"
                },
                {
                    "text": "                size=self.full_width/12,",
                    "type": "line"
                },
                {
                    "text": "                textalign=\"left\",",
                    "type": "line"
                },
                {
                    "text": "                boxalign=\"topright\",",
                    "type": "line"
                },
                {
                    "text": "                color=COLOR_NOTE_TAG_TEXT,",
                    "type": "line"
                },
                {
                    "text": "                face=FONT_MONOSPACE,",
                    "type": "line"
                },
                {
                    "text": "                split=False",
                    "type": "line"
                },
                {
                    "text": "            )",
                    "type": "line"
                },
                {
                    "text": "            canvas.render_text(",
                    "type": "line"
                },
                {
                    "text": "                self._code_lines(self.data[\"fragments\"]),",
                    "type": "line"
                },
                {
                    "text": "                body,",
                    "type": "line"
                },
                {
                    "text": "                size=self.full_width/12,",
                    "type": "line"
                },
                {
                    "text": "                textalign=\"left\",",
                    "type": "line"
                },
                {
                    "text": "                boxalign=\"left\",",
                    "type": "line"
                },
                {
                    "text": "                color=COLOR_NOTE_TEXT,",
                    "type": "line"
                },
                {
                    "text": "                face=FONT_MONOSPACE,",
                    "type": "line"
                },
                {
                    "text": "                split=False",
                    "type": "line"
                },
                {
                    "text": "            )",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            canvas.render_text(",
                    "type": "line"
                },
                {
                    "text": "                self.data[\"text\"],",
                    "type": "line"
                },
                {
                    "text": "                rect,",
                    "type": "line"
                },
                {
                    "text": "                size=self.full_width/10,",
                    "type": "line"
                },
                {
                    "text": "                textalign=attributes[\"textalign\"],",
                    "type": "line"
                },
                {
                    "text": "                boxalign=\"center\",",
                    "type": "line"
                },
                {
                    "text": "                color=COLOR_NOTE_TEXT,",
                    "type": "line"
                },
                {
                    "text": "                face=FONT_TEXT",
                    "type": "line"
                },
                {
                    "text": "            )",
                    "type": "line"
                },
                {
                    "text": "        rect = rect.inflate(border*2, 0)",
                    "type": "line"
                },
                {
                    "text": "        rect.height = status_height",
                    "type": "line"
                },
                {
                    "text": "        rect.bottom = self.card_full_rect.bottom - border",
                    "type": "line"
                },
                {
                    "text": "        if DEBUG_NOTE_BORDER:",
                    "type": "line"
                },
                {
                    "text": "            canvas.draw_rect(rect, (200, 50, 50), 1)",
                    "type": "line"
                },
                {
                    "text": "        canvas.render_text(",
                    "type": "line"
                },
                {
                    "text": "            self.data[\"timestamp_created\"][:10],",
                    "type": "line"
                },
                {
                    "text": "            rect,",
                    "type": "line"
                },
                {
                    "text": "            size=status_height,",
                    "type": "line"
                },
                {
                    "text": "            face=FONT_MONOSPACE,",
                    "type": "line"
                },
                {
                    "text": "            boxalign=\"bottomleft\",",
                    "type": "line"
                },
                {
                    "text": "            split=False,",
                    "type": "line"
                },
                {
                    "text": "            color=COLOR_NOTE_DATE_TEXT",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "        tags = self.data.get(\"tags\", [])",
                    "type": "line"
                },
                {
                    "text": "        links = self.data.get(\"links\", [])",
                    "type": "line"
                },
                {
                    "text": "        if tags or links:",
                    "type": "line"
                },
                {
                    "text": "            right = rect.right",
                    "type": "line"
                },
                {
                    "text": "            rect.width -= (rect.height*1.3) * len(links)",
                    "type": "line"
                },
                {
                    "text": "            canvas.render_text(",
                    "type": "line"
                },
                {
                    "text": "                \" \".join(\"#{}\".format(tag) for tag in self.data[\"tags\"]),",
                    "type": "line"
                },
                {
                    "text": "                rect,",
                    "type": "line"
                },
                {
                    "text": "                size=status_height,",
                    "type": "line"
                },
                {
                    "text": "                face=FONT_MONOSPACE,",
                    "type": "line"
                },
                {
                    "text": "                boxalign=\"bottomright\",",
                    "type": "line"
                },
                {
                    "text": "                split=False,",
                    "type": "line"
                },
                {
                    "text": "                color=COLOR_NOTE_TAG_TEXT",
                    "type": "line"
                },
                {
                    "text": "            )",
                    "type": "line"
                },
                {
                    "text": "            rect.width = rect.height",
                    "type": "line"
                },
                {
                    "text": "            rect.right = right",
                    "type": "line"
                },
                {
                    "text": "            for link in links:",
                    "type": "line"
                },
                {
                    "text": "                canvas.draw_rect(",
                    "type": "line"
                },
                {
                    "text": "                    rect,",
                    "type": "line"
                },
                {
                    "text": "                    (50, 150, 50),",
                    "type": "line"
                },
                {
                    "text": "                    1",
                    "type": "line"
                },
                {
                    "text": "                )",
                    "type": "line"
                },
                {
                    "text": "                rect = rect.move(-rect.height*1.3, 0)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _code_lines(self, fragments):",
                    "type": "line"
                },
                {
                    "text": "        lines = []",
                    "type": "line"
                },
                {
                    "text": "        for fragment in fragments:",
                    "type": "line"
                },
                {
                    "text": "            if fragment[\"type\"] == \"chunk\":",
                    "type": "line"
                },
                {
                    "text": "                lines.append(\"{}<<{}>>\".format(",
                    "type": "line"
                },
                {
                    "text": "                    fragment[\"prefix\"],",
                    "type": "line"
                },
                {
                    "text": "                    \"/\".join(fragment[\"path\"])",
                    "type": "line"
                },
                {
                    "text": "                ))",
                    "type": "line"
                },
                {
                    "text": "            else:",
                    "type": "line"
                },
                {
                    "text": "                lines.append(\"{}\".format(",
                    "type": "line"
                },
                {
                    "text": "                    fragment[\"text\"],",
                    "type": "line"
                },
                {
                    "text": "                ))",
                    "type": "line"
                },
                {
                    "text": "        return \"\\n\".join(lines)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _get_target(self, alotted_rect, align=\"center\"):",
                    "type": "line"
                },
                {
                    "text": "        target = self.card_full_rect",
                    "type": "line"
                },
                {
                    "text": "        target = target.fit(alotted_rect)",
                    "type": "line"
                },
                {
                    "text": "        if align == \"left\":",
                    "type": "line"
                },
                {
                    "text": "            target.midright = alotted_rect.midright",
                    "type": "line"
                },
                {
                    "text": "        elif align == \"right\":",
                    "type": "line"
                },
                {
                    "text": "            target.midleft = alotted_rect.midleft",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            target.center = alotted_rect.center",
                    "type": "line"
                },
                {
                    "text": "        return target",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_link_source_point(self):",
                    "type": "line"
                },
                {
                    "text": "        return self.rect.center",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def hit_test(self, pos):",
                    "type": "line"
                },
                {
                    "text": "        return self.rect.collidepoint(pos)",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.800620",
            "type": "code"
        },
        "42fc6bb887984f2780bacd47e8fb3e08": {
            "tags": [
                "title"
            ],
            "text": "Smart Notes Widget",
            "timestamp_created": "2021-06-19T07:27:52.616173"
        },
        "43249a90aee8449d8161c78c17088563": {
            "chunkpath": [
                "functions"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def main():",
                    "type": "line"
                },
                {
                    "text": "    if len(sys.argv) < 2:",
                    "type": "line"
                },
                {
                    "text": "        sys.exit(\"Usage: smartnotes.py <file>\")",
                    "type": "line"
                },
                {
                    "text": "    pygame_main(",
                    "type": "line"
                },
                {
                    "text": "        SmartNotesWidget,",
                    "type": "line"
                },
                {
                    "text": "        sys.argv[1]",
                    "type": "line"
                },
                {
                    "text": "    )",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.614969",
            "type": "code"
        },
        "4c0302cbb5774082aa8f7929378dc999": {
            "chunkpath": [
                "base base classes",
                "BaseWidget",
                "interaction"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def bubble_event(self, event):",
                    "type": "line"
                },
                {
                    "text": "    if self._parent:",
                    "type": "line"
                },
                {
                    "text": "        self._parent.bubble_event(event)",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.489523",
            "type": "code"
        },
        "5055f50fea9241ffaf34adf03f78ae34": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class NoteNotFound(ValueError):",
                    "type": "line"
                },
                {
                    "text": "    pass",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.852081",
            "type": "code"
        },
        "5115170d4f7747c2a4fb0a20eab851aa": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class NoteSettings:",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, **kwargs):",
                    "type": "line"
                },
                {
                    "text": "        self.set_full_width(kwargs.get(\"full_width\", 200))",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_full_width(self):",
                    "type": "line"
                },
                {
                    "text": "        return max(100, self.full_width)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def set_full_width(self, full_width):",
                    "type": "line"
                },
                {
                    "text": "        self.full_width = full_width",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_height_width_ratio(self):",
                    "type": "line"
                },
                {
                    "text": "        return 3/5",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.813153",
            "type": "code"
        },
        "51b4a680f3b741b7ae3d407bcbfaa6a4": {
            "tags": [
                "title"
            ],
            "text": "Note Database",
            "timestamp_created": "2021-06-19T07:27:52.825734"
        },
        "58b1b56e5208481a8732c664d989bfe8": {
            "text": "It calculates a rect for each child and calls `child.update` with the new rect.",
            "timestamp_created": "2021-06-19T07:27:53.372159"
        },
        "5ad55d51dad84960bda16db55ffb5115": {
            "chunkpath": [
                "functions"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def create_pygame_cairo_surface(screen):",
                    "type": "line"
                },
                {
                    "text": "    return pygame.Surface(",
                    "type": "line"
                },
                {
                    "text": "        screen.get_size(),",
                    "type": "line"
                },
                {
                    "text": "        depth=32,",
                    "type": "line"
                },
                {
                    "text": "        masks=(",
                    "type": "line"
                },
                {
                    "text": "            0x00FF0000,",
                    "type": "line"
                },
                {
                    "text": "            0x0000FF00,",
                    "type": "line"
                },
                {
                    "text": "            0x000000FF,",
                    "type": "line"
                },
                {
                    "text": "            0x00000000,",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "    )",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.900624",
            "type": "code"
        },
        "5d02a07589c84bb6a913b5d99708c603": {
            "tags": [
                "title"
            ],
            "text": "JSON",
            "timestamp_created": "2021-06-19T07:27:54.133922"
        },
        "5d81e13c3cb9476da21aac3f66c239f7": {
            "tags": [
                "title"
            ],
            "text": "Network",
            "timestamp_created": "2021-06-19T07:27:52.653421"
        },
        "5dd5dd9cd98245af954272bc602f395f": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class ParseError(ValueError):",
                    "type": "line"
                },
                {
                    "text": "    pass",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.937426",
            "type": "code"
        },
        "5e9dea2ec8a14dea8d0c4cee558101bf": {
            "tags": [
                "title"
            ],
            "text": "Overlay Widget",
            "timestamp_created": "2021-06-19T07:27:52.746989"
        },
        "649a10bfa42a46a8b72a14a20dbf700d": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class TableWidget(Widget):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, window, parent, db, overlay, note_settings):",
                    "type": "line"
                },
                {
                    "text": "        Widget.__init__(self, window, parent)",
                    "type": "line"
                },
                {
                    "text": "        self.db = db",
                    "type": "line"
                },
                {
                    "text": "        self.overlay = overlay",
                    "type": "line"
                },
                {
                    "text": "        self.note_settings = note_settings",
                    "type": "line"
                },
                {
                    "text": "        self.notes = []",
                    "type": "line"
                },
                {
                    "text": "        self.by_id = {}",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def process_event(self, event):",
                    "type": "line"
                },
                {
                    "text": "        for note in self.notes:",
                    "type": "line"
                },
                {
                    "text": "            note.process_event(event)",
                    "type": "line"
                },
                {
                    "text": "        Widget.process_event(self, event)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def open_note(self, note_id):",
                    "type": "line"
                },
                {
                    "text": "        self.note_id = note_id",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def update(self, rect, elapsed_ms):",
                    "type": "line"
                },
                {
                    "text": "        self._update_notes_list()",
                    "type": "line"
                },
                {
                    "text": "        self._layout(rect, elapsed_ms)",
                    "type": "line"
                },
                {
                    "text": "        Widget.update(self, rect, elapsed_ms)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def draw(self, canvas):",
                    "type": "line"
                },
                {
                    "text": "        for note in self.notes:",
                    "type": "line"
                },
                {
                    "text": "            note.draw(canvas)",
                    "type": "line"
                },
                {
                    "text": "        Widget.draw(self, canvas)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _update_notes_list(self):",
                    "type": "line"
                },
                {
                    "text": "        by_id = {}",
                    "type": "line"
                },
                {
                    "text": "        self.notes.clear()",
                    "type": "line"
                },
                {
                    "text": "        for note_id in self.db.get_children(self.note_id):",
                    "type": "line"
                },
                {
                    "text": "            if note_id in self.by_id:",
                    "type": "line"
                },
                {
                    "text": "                note = self.by_id[note_id]",
                    "type": "line"
                },
                {
                    "text": "            else:",
                    "type": "line"
                },
                {
                    "text": "                note = self.instantiate(",
                    "type": "line"
                },
                {
                    "text": "                    TableNote,",
                    "type": "line"
                },
                {
                    "text": "                    self.db,",
                    "type": "line"
                },
                {
                    "text": "                    self.overlay,",
                    "type": "line"
                },
                {
                    "text": "                    self.note_settings,",
                    "type": "line"
                },
                {
                    "text": "                    note_id,",
                    "type": "line"
                },
                {
                    "text": "                    self.open_note",
                    "type": "line"
                },
                {
                    "text": "                )",
                    "type": "line"
                },
                {
                    "text": "            self.notes.append(note)",
                    "type": "line"
                },
                {
                    "text": "            by_id[note_id] = note",
                    "type": "line"
                },
                {
                    "text": "        self.by_id = by_id",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _layout(self, rect, elapsed_ms):",
                    "type": "line"
                },
                {
                    "text": "        if not self.notes:",
                    "type": "line"
                },
                {
                    "text": "            return",
                    "type": "line"
                },
                {
                    "text": "        rows = 1",
                    "type": "line"
                },
                {
                    "text": "        ratio = None",
                    "type": "line"
                },
                {
                    "text": "        fit_box = None",
                    "type": "line"
                },
                {
                    "text": "        notes_per_row = None",
                    "type": "line"
                },
                {
                    "text": "        while True:",
                    "type": "line"
                },
                {
                    "text": "            new_notes_per_row = math.ceil(len(self.notes) / rows)",
                    "type": "line"
                },
                {
                    "text": "            ideal_box = pygame.Rect(",
                    "type": "line"
                },
                {
                    "text": "                0,",
                    "type": "line"
                },
                {
                    "text": "                0,",
                    "type": "line"
                },
                {
                    "text": "                self.note_settings.get_full_width() * new_notes_per_row,",
                    "type": "line"
                },
                {
                    "text": "                self.note_settings.get_full_width() * self.note_settings.get_height_width_ratio() * rows",
                    "type": "line"
                },
                {
                    "text": "            )",
                    "type": "line"
                },
                {
                    "text": "            new_fit_box = ideal_box.fit(rect)",
                    "type": "line"
                },
                {
                    "text": "            new_ratio = new_fit_box.width / ideal_box.width",
                    "type": "line"
                },
                {
                    "text": "            if new_ratio > 1:",
                    "type": "line"
                },
                {
                    "text": "                new_fit_box = ideal_box",
                    "type": "line"
                },
                {
                    "text": "                new_ratio = 1",
                    "type": "line"
                },
                {
                    "text": "            new_fit_box.center = rect.center",
                    "type": "line"
                },
                {
                    "text": "            if ratio is None or new_ratio > ratio:",
                    "type": "line"
                },
                {
                    "text": "                ratio = new_ratio",
                    "type": "line"
                },
                {
                    "text": "                fit_box = new_fit_box",
                    "type": "line"
                },
                {
                    "text": "                notes_per_row = new_notes_per_row",
                    "type": "line"
                },
                {
                    "text": "                rows += 1",
                    "type": "line"
                },
                {
                    "text": "            else:",
                    "type": "line"
                },
                {
                    "text": "                break",
                    "type": "line"
                },
                {
                    "text": "        w = self.note_settings.get_full_width() * ratio",
                    "type": "line"
                },
                {
                    "text": "        h = self.note_settings.get_full_width() * self.note_settings.get_height_width_ratio() * ratio",
                    "type": "line"
                },
                {
                    "text": "        row = 0",
                    "type": "line"
                },
                {
                    "text": "        col = 0",
                    "type": "line"
                },
                {
                    "text": "        for note in self.notes:",
                    "type": "line"
                },
                {
                    "text": "            if col == notes_per_row:",
                    "type": "line"
                },
                {
                    "text": "                col = 0",
                    "type": "line"
                },
                {
                    "text": "                row += 1",
                    "type": "line"
                },
                {
                    "text": "            note.update(",
                    "type": "line"
                },
                {
                    "text": "                pygame.Rect(",
                    "type": "line"
                },
                {
                    "text": "                    fit_box.x+w*col,",
                    "type": "line"
                },
                {
                    "text": "                    fit_box.y+h*row,",
                    "type": "line"
                },
                {
                    "text": "                    w,",
                    "type": "line"
                },
                {
                    "text": "                    h",
                    "type": "line"
                },
                {
                    "text": "                ),",
                    "type": "line"
                },
                {
                    "text": "                elapsed_ms",
                    "type": "line"
                },
                {
                    "text": "            )",
                    "type": "line"
                },
                {
                    "text": "            col += 1",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.705079",
            "type": "code"
        },
        "663b1555bdd643f6a873ee3d75c0fa1f": {
            "tags": [
                "title"
            ],
            "text": "Format Title",
            "timestamp_created": "2021-06-19T07:27:54.240113"
        },
        "6d564d8cb2fa425381dfc90108774372": {
            "chunkpath": [
                "functions"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "@contextlib.contextmanager",
                    "type": "line"
                },
                {
                    "text": "def safe_write(path):",
                    "type": "line"
                },
                {
                    "text": "    tmp_path = f\"{path}.tmp\"",
                    "type": "line"
                },
                {
                    "text": "    with open(tmp_path, \"w\") as f:",
                    "type": "line"
                },
                {
                    "text": "        yield f",
                    "type": "line"
                },
                {
                    "text": "    os.rename(tmp_path, path)",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:54.213519",
            "type": "code"
        },
        "7304d987b32245018eb1ad58d0685c89": {
            "chunkpath": [
                "end-to-end"
            ],
            "filepath": [
                "test_smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def test_link_lines(self):",
                    "type": "line"
                },
                {
                    "text": "    self.driver.iteration(events=[KeyEvent(\"/\")], elapsed_ms=200+MS_PER_FRAME+1)",
                    "type": "line"
                },
                {
                    "text": "    self.assert_drawn_image_is(\"search_bar_animation_completed.png\")",
                    "type": "line"
                },
                {
                    "text": "    self.driver.iteration(events=[",
                    "type": "line"
                },
                {
                    "text": "        MouseMotionEvent((400, 300)),",
                    "type": "line"
                },
                {
                    "text": "        LeftMouseDownEvent((400, 300)),",
                    "type": "line"
                },
                {
                    "text": "        MouseMotionEvent((200, 200)),",
                    "type": "line"
                },
                {
                    "text": "    ], elapsed_ms=MS_PER_FRAME+1)",
                    "type": "line"
                },
                {
                    "text": "    self.assert_drawn_image_is(\"link_network_to_none.png\")",
                    "type": "line"
                },
                {
                    "text": "    self.driver.iteration(events=[",
                    "type": "line"
                },
                {
                    "text": "        MouseMotionEvent((200, 360)),",
                    "type": "line"
                },
                {
                    "text": "    ], elapsed_ms=MS_PER_FRAME+1)",
                    "type": "line"
                },
                {
                    "text": "    self.assert_drawn_image_is(\"link_network_to_network.png\")",
                    "type": "line"
                },
                {
                    "text": "    self.driver.iteration(events=[",
                    "type": "line"
                },
                {
                    "text": "        MouseMotionEvent((150, 80)),",
                    "type": "line"
                },
                {
                    "text": "    ], elapsed_ms=MS_PER_FRAME+1)",
                    "type": "line"
                },
                {
                    "text": "    self.assert_drawn_image_is(\"link_network_to_search.png\")",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.061172",
            "type": "code"
        },
        "79b1ae3dad3c44a285b57fb88b01e561": {
            "text": "<unordered list>",
            "timestamp_created": "2021-06-19T07:27:53.334170"
        },
        "7d0dd1cbe8174b6a9be503e9206c25bb": {
            "chunkpath": [
                "functions"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def utcnow_timestamp_string():",
                    "type": "line"
                },
                {
                    "text": "    return datetime.datetime.utcnow().isoformat()",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.894362",
            "type": "code"
        },
        "7d7f4a4f4b894086ace8287b083ab4f1": {
            "chunkpath": [
                "base classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class TextField(Widget):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, window, parent, text_changed_callback, text_size=10, **kwargs):",
                    "type": "line"
                },
                {
                    "text": "        Widget.__init__(self, window, parent, **kwargs)",
                    "type": "line"
                },
                {
                    "text": "        self.text_size = text_size",
                    "type": "line"
                },
                {
                    "text": "        self.text = \"\"",
                    "type": "line"
                },
                {
                    "text": "        self.text_changed_callback = text_changed_callback",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def set_text(self, text):",
                    "type": "line"
                },
                {
                    "text": "        self.text = text",
                    "type": "line"
                },
                {
                    "text": "        self.text_changed_callback(text)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def process_event(self, event):",
                    "type": "line"
                },
                {
                    "text": "        if self.has_focus() and event.key_down_text():",
                    "type": "line"
                },
                {
                    "text": "            self.set_text(self.text + event.key_down_text())",
                    "type": "line"
                },
                {
                    "text": "        elif event.left_mouse_up(rect=self.get_used_rect()):",
                    "type": "line"
                },
                {
                    "text": "            self.focus()",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            Widget.process_event(self, event)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def draw(self, canvas):",
                    "type": "line"
                },
                {
                    "text": "        canvas.fill_rect(",
                    "type": "line"
                },
                {
                    "text": "            self.get_used_rect(),",
                    "type": "line"
                },
                {
                    "text": "            (250, 250, 250)",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "        canvas.render_text(",
                    "type": "line"
                },
                {
                    "text": "            \"{}\\u2302\".format(self.text),",
                    "type": "line"
                },
                {
                    "text": "            self.get_used_rect().inflate(-4, -4),",
                    "type": "line"
                },
                {
                    "text": "            face=FONT_MONOSPACE,",
                    "type": "line"
                },
                {
                    "text": "            size=self.text_size,",
                    "type": "line"
                },
                {
                    "text": "            boxalign=\"midleft\"",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "        Widget.draw(self, canvas)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_focus_rect(self):",
                    "type": "line"
                },
                {
                    "text": "        return self.get_used_rect().inflate(",
                    "type": "line"
                },
                {
                    "text": "            self.get_focus_rect_size(),",
                    "type": "line"
                },
                {
                    "text": "            self.get_focus_rect_size()",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.652908",
            "type": "code"
        },
        "7d91624b3a4a4e77bd07f15eca46c8bf": {
            "tags": [
                "title"
            ],
            "text": "Animation",
            "timestamp_created": "2021-06-19T07:27:53.674343"
        },
        "81f4feec6d454ca2a2a12ff427db17dc": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class NoteText(ExternalTextEntry):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    LINK_PREFIX = \"link: \"",
                    "type": "line"
                },
                {
                    "text": "    TAG_PREFIX = \"tag: \"",
                    "type": "line"
                },
                {
                    "text": "    FILEPATH_PREFIX = \"filepath: \"",
                    "type": "line"
                },
                {
                    "text": "    CHUNKPATH_PREFIX = \"chunkpath: \"",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, db, note_id=None):",
                    "type": "line"
                },
                {
                    "text": "        self.db = db",
                    "type": "line"
                },
                {
                    "text": "        self.note_id = note_id",
                    "type": "line"
                },
                {
                    "text": "        ExternalTextEntry.__init__(self, self._note_to_text(), EDITOR_COMMAND)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _note_to_text(self):",
                    "type": "line"
                },
                {
                    "text": "        data = self.db.get_note_data(self.note_id)",
                    "type": "line"
                },
                {
                    "text": "        links = data.get(\"links\", [])",
                    "type": "line"
                },
                {
                    "text": "        tags = data.get(\"tags\", [])",
                    "type": "line"
                },
                {
                    "text": "        extra = []",
                    "type": "line"
                },
                {
                    "text": "        extra.append(\"\\n\")",
                    "type": "line"
                },
                {
                    "text": "        extra.append(\"--\\n\")",
                    "type": "line"
                },
                {
                    "text": "        for link in links:",
                    "type": "line"
                },
                {
                    "text": "            extra.append(\"{}{}\\n\".format(self.LINK_PREFIX, link))",
                    "type": "line"
                },
                {
                    "text": "        for tag in tags:",
                    "type": "line"
                },
                {
                    "text": "            extra.append(\"{}{}\\n\".format(self.TAG_PREFIX, tag))",
                    "type": "line"
                },
                {
                    "text": "        if data.get(\"type\", \"text\") == \"code\":",
                    "type": "line"
                },
                {
                    "text": "            extra.append(\"{}{}\\n\".format(self.FILEPATH_PREFIX, \"/\".join(data[\"filepath\"])))",
                    "type": "line"
                },
                {
                    "text": "            extra.append(\"{}{}\\n\".format(self.CHUNKPATH_PREFIX, \"/\".join(data[\"chunkpath\"])))",
                    "type": "line"
                },
                {
                    "text": "        extra.append(\"# Usage:\\n\")",
                    "type": "line"
                },
                {
                    "text": "        extra.append(\"# {}http://...\\n\".format(self.LINK_PREFIX))",
                    "type": "line"
                },
                {
                    "text": "        extra.append(\"# {}name\\n\".format(self.TAG_PREFIX))",
                    "type": "line"
                },
                {
                    "text": "        extra.append(\"# {}foo/bar.py\\n\".format(self.FILEPATH_PREFIX))",
                    "type": "line"
                },
                {
                    "text": "        extra.append(\"# {}classes/Foo\\n\".format(self.CHUNKPATH_PREFIX))",
                    "type": "line"
                },
                {
                    "text": "        extra.append(\"#\\n\")",
                    "type": "line"
                },
                {
                    "text": "        extra.append(\"# Tags with special formatting:\\n\")",
                    "type": "line"
                },
                {
                    "text": "        for tag in TAG_ATTRIBUTES:",
                    "type": "line"
                },
                {
                    "text": "            extra.append(\"# {}{}\\n\".format(self.TAG_PREFIX, tag[\"name\"]))",
                    "type": "line"
                },
                {
                    "text": "        extra.append(\"--\\n\")",
                    "type": "line"
                },
                {
                    "text": "        if data.get(\"type\", \"text\") == \"code\":",
                    "type": "line"
                },
                {
                    "text": "            return self._code_fragments_to_text(data[\"fragments\"]) + \"\".join(extra)",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            return data[\"text\"] + \"\".join(extra)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _new_text(self):",
                    "type": "line"
                },
                {
                    "text": "        self.db.update_note(self.note_id, **self._text_to_note_fields())",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _text_to_note_fields(self):",
                    "type": "line"
                },
                {
                    "text": "        try:",
                    "type": "line"
                },
                {
                    "text": "            return self._parse_footer()",
                    "type": "line"
                },
                {
                    "text": "        except ParseError:",
                    "type": "line"
                },
                {
                    "text": "            return {",
                    "type": "line"
                },
                {
                    "text": "                \"text\": self.text,",
                    "type": "line"
                },
                {
                    "text": "                \"links\": [],",
                    "type": "line"
                },
                {
                    "text": "                \"tags\": [],",
                    "type": "line"
                },
                {
                    "text": "            }",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _code_fragments_to_text(self, fragments):",
                    "type": "line"
                },
                {
                    "text": "        lines = []",
                    "type": "line"
                },
                {
                    "text": "        for fragment in fragments:",
                    "type": "line"
                },
                {
                    "text": "            if fragment[\"type\"] == \"chunk\":",
                    "type": "line"
                },
                {
                    "text": "                lines.append(\"{}<<{}, blank_lines_before={}>>\".format(",
                    "type": "line"
                },
                {
                    "text": "                    fragment[\"prefix\"],",
                    "type": "line"
                },
                {
                    "text": "                    \"/\".join(fragment[\"path\"]),",
                    "type": "line"
                },
                {
                    "text": "                    fragment[\"blank_lines_before\"]",
                    "type": "line"
                },
                {
                    "text": "                ))",
                    "type": "line"
                },
                {
                    "text": "            else:",
                    "type": "line"
                },
                {
                    "text": "                lines.append(\"{}\".format(",
                    "type": "line"
                },
                {
                    "text": "                    fragment[\"text\"],",
                    "type": "line"
                },
                {
                    "text": "                ))",
                    "type": "line"
                },
                {
                    "text": "        return \"\\n\".join(lines) + \"\\n\"",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _text_to_code_fragments(self, text):",
                    "type": "line"
                },
                {
                    "text": "        fragments = []",
                    "type": "line"
                },
                {
                    "text": "        for line in text.splitlines():",
                    "type": "line"
                },
                {
                    "text": "            match = re.match(r'^(.*)<<(.*), blank_lines_before=(\\d+)>>$', line)",
                    "type": "line"
                },
                {
                    "text": "            if match:",
                    "type": "line"
                },
                {
                    "text": "                fragments.append({",
                    "type": "line"
                },
                {
                    "text": "                    \"type\": \"chunk\",",
                    "type": "line"
                },
                {
                    "text": "                    \"prefix\": match.group(1),",
                    "type": "line"
                },
                {
                    "text": "                    \"path\": match.group(2).split(\"/\"),",
                    "type": "line"
                },
                {
                    "text": "                    \"blank_lines_before\": int(match.group(3))",
                    "type": "line"
                },
                {
                    "text": "                })",
                    "type": "line"
                },
                {
                    "text": "            else:",
                    "type": "line"
                },
                {
                    "text": "                fragments.append({\"type\": \"line\", \"text\": line})",
                    "type": "line"
                },
                {
                    "text": "        return fragments",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _parse_footer(self):",
                    "type": "line"
                },
                {
                    "text": "        data = {",
                    "type": "line"
                },
                {
                    "text": "            \"text\": \"\",",
                    "type": "line"
                },
                {
                    "text": "            \"links\": [],",
                    "type": "line"
                },
                {
                    "text": "            \"tags\": [],",
                    "type": "line"
                },
                {
                    "text": "            \"filepath\": [],",
                    "type": "line"
                },
                {
                    "text": "            \"chunkpath\": [],",
                    "type": "line"
                },
                {
                    "text": "        }",
                    "type": "line"
                },
                {
                    "text": "        parts = self.text.splitlines(True)",
                    "type": "line"
                },
                {
                    "text": "        if parts and parts.pop(-1).rstrip() == \"--\":",
                    "type": "line"
                },
                {
                    "text": "            while parts and parts[-1].rstrip() != \"--\":",
                    "type": "line"
                },
                {
                    "text": "                part = parts.pop(-1)",
                    "type": "line"
                },
                {
                    "text": "                if part.startswith(self.LINK_PREFIX):",
                    "type": "line"
                },
                {
                    "text": "                    data[\"links\"].insert(0, part[len(self.LINK_PREFIX):].rstrip())",
                    "type": "line"
                },
                {
                    "text": "                elif part.startswith(self.TAG_PREFIX):",
                    "type": "line"
                },
                {
                    "text": "                    data[\"tags\"].insert(0, part[len(self.TAG_PREFIX):].rstrip())",
                    "type": "line"
                },
                {
                    "text": "                elif part.startswith(self.FILEPATH_PREFIX):",
                    "type": "line"
                },
                {
                    "text": "                    data[\"filepath\"] = [",
                    "type": "line"
                },
                {
                    "text": "                        x",
                    "type": "line"
                },
                {
                    "text": "                        for x",
                    "type": "line"
                },
                {
                    "text": "                        in part[len(self.FILEPATH_PREFIX):].rstrip().split(\"/\")",
                    "type": "line"
                },
                {
                    "text": "                        if x",
                    "type": "line"
                },
                {
                    "text": "                    ]",
                    "type": "line"
                },
                {
                    "text": "                elif part.startswith(self.CHUNKPATH_PREFIX):",
                    "type": "line"
                },
                {
                    "text": "                    data[\"chunkpath\"] = [",
                    "type": "line"
                },
                {
                    "text": "                        x",
                    "type": "line"
                },
                {
                    "text": "                        for x",
                    "type": "line"
                },
                {
                    "text": "                        in part[len(self.CHUNKPATH_PREFIX):].rstrip().split(\"/\")",
                    "type": "line"
                },
                {
                    "text": "                        if x",
                    "type": "line"
                },
                {
                    "text": "                    ]",
                    "type": "line"
                },
                {
                    "text": "                elif part.startswith(\"#\"):",
                    "type": "line"
                },
                {
                    "text": "                    pass",
                    "type": "line"
                },
                {
                    "text": "                else:",
                    "type": "line"
                },
                {
                    "text": "                    raise ParseError(\"unknown field\")",
                    "type": "line"
                },
                {
                    "text": "            if parts:",
                    "type": "line"
                },
                {
                    "text": "                parts.pop(-1)",
                    "type": "line"
                },
                {
                    "text": "                while parts and parts[-1].strip() == \"\":",
                    "type": "line"
                },
                {
                    "text": "                    parts.pop(-1)",
                    "type": "line"
                },
                {
                    "text": "                data[\"text\"] = \"\".join(parts)",
                    "type": "line"
                },
                {
                    "text": "                if data[\"filepath\"] or data[\"chunkpath\"]:",
                    "type": "line"
                },
                {
                    "text": "                    data[\"type\"] = \"code\"",
                    "type": "line"
                },
                {
                    "text": "                    data[\"fragments\"] = self._text_to_code_fragments(data[\"text\"])",
                    "type": "line"
                },
                {
                    "text": "                    data.pop(\"text\")",
                    "type": "line"
                },
                {
                    "text": "                else:",
                    "type": "line"
                },
                {
                    "text": "                    data[\"type\"] = \"text\"",
                    "type": "line"
                },
                {
                    "text": "                    data.pop(\"filepath\")",
                    "type": "line"
                },
                {
                    "text": "                    data.pop(\"chunkpath\")",
                    "type": "line"
                },
                {
                    "text": "                return data",
                    "type": "line"
                },
                {
                    "text": "        raise ParseError(\"no footer found\")",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.922483",
            "type": "code"
        },
        "8a68350969694fc3b66f97d0a704da94": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class LinkWidget(Widget):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, window, parent, db, link_id, start, end):",
                    "type": "line"
                },
                {
                    "text": "        Widget.__init__(self, window, parent)",
                    "type": "line"
                },
                {
                    "text": "        self.db = db",
                    "type": "line"
                },
                {
                    "text": "        self.link_id = link_id",
                    "type": "line"
                },
                {
                    "text": "        self.start = start",
                    "type": "line"
                },
                {
                    "text": "        self.end = end",
                    "type": "line"
                },
                {
                    "text": "        self.start.outgoing.append(self)",
                    "type": "line"
                },
                {
                    "text": "        self.end.incoming.append(self)",
                    "type": "line"
                },
                {
                    "text": "        self.start_pos = None",
                    "type": "line"
                },
                {
                    "text": "        self.end_pos = None",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def update(self, rect, elapsed_ms):",
                    "type": "line"
                },
                {
                    "text": "        Widget.update(self, rect, elapsed_ms)",
                    "type": "line"
                },
                {
                    "text": "        start = pygame.math.Vector2(self.start.get_link_out_point())",
                    "type": "line"
                },
                {
                    "text": "        end = pygame.math.Vector2(self.end.get_link_in_point())",
                    "type": "line"
                },
                {
                    "text": "        if start != self.start_pos or end != self.end_pos:",
                    "type": "line"
                },
                {
                    "text": "            self.start_pos = start",
                    "type": "line"
                },
                {
                    "text": "            self.end_pos = end",
                    "type": "line"
                },
                {
                    "text": "            self.padding = 3",
                    "type": "line"
                },
                {
                    "text": "            self.need_redraw = True",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            self.need_redraw = False",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def draw(self, canvas):",
                    "type": "line"
                },
                {
                    "text": "        if self.need_redraw:",
                    "type": "line"
                },
                {
                    "text": "            self.width = max(1, int(abs(self.start_pos.x-self.end_pos.x)))",
                    "type": "line"
                },
                {
                    "text": "            self.height = max(1, int(abs(self.start_pos.y-self.end_pos.y)))+2*self.padding",
                    "type": "line"
                },
                {
                    "text": "            self.image = canvas.create_image(",
                    "type": "line"
                },
                {
                    "text": "                (self.width, self.height),",
                    "type": "line"
                },
                {
                    "text": "                self._draw_line",
                    "type": "line"
                },
                {
                    "text": "            )",
                    "type": "line"
                },
                {
                    "text": "            self.pos = (",
                    "type": "line"
                },
                {
                    "text": "                min(self.start_pos.x, self.end_pos.x),",
                    "type": "line"
                },
                {
                    "text": "                min(self.start_pos.y, self.end_pos.y)-self.padding,",
                    "type": "line"
                },
                {
                    "text": "            )",
                    "type": "line"
                },
                {
                    "text": "        canvas.blit(self.image, self.pos)",
                    "type": "line"
                },
                {
                    "text": "        Widget.draw(self, canvas)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _draw_line(self, canvas):",
                    "type": "line"
                },
                {
                    "text": "        if self.start_pos.x < self.end_pos.x:",
                    "type": "line"
                },
                {
                    "text": "            startx = 0",
                    "type": "line"
                },
                {
                    "text": "            endx = self.width",
                    "type": "line"
                },
                {
                    "text": "            c1x = 0.6*self.width",
                    "type": "line"
                },
                {
                    "text": "            c2x = 0.4*self.width",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            startx = self.width",
                    "type": "line"
                },
                {
                    "text": "            endx = 0",
                    "type": "line"
                },
                {
                    "text": "            c1x = 0.4*self.width",
                    "type": "line"
                },
                {
                    "text": "            c2x = 0.6*self.width",
                    "type": "line"
                },
                {
                    "text": "        if self.start_pos.y < self.end_pos.y:",
                    "type": "line"
                },
                {
                    "text": "            starty = self.padding",
                    "type": "line"
                },
                {
                    "text": "            endy = self.height-self.padding",
                    "type": "line"
                },
                {
                    "text": "            c1y = 0.0*(self.height-self.padding)+self.padding",
                    "type": "line"
                },
                {
                    "text": "            c2y = 1.0*(self.height-self.padding)+self.padding",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            starty = self.height-self.padding",
                    "type": "line"
                },
                {
                    "text": "            endy = self.padding",
                    "type": "line"
                },
                {
                    "text": "            c1y = 1.0*(self.height-self.padding)+self.padding",
                    "type": "line"
                },
                {
                    "text": "            c2y = 0.0*(self.height-self.padding)+self.padding",
                    "type": "line"
                },
                {
                    "text": "        canvas.move_to(startx, starty)",
                    "type": "line"
                },
                {
                    "text": "        canvas.line_to(startx+0.02*(endx-startx), starty)",
                    "type": "line"
                },
                {
                    "text": "        canvas.curve_to(c1x, c1y, c2x, c2y, endx-0.02*(endx-startx), endy)",
                    "type": "line"
                },
                {
                    "text": "        canvas.line_to(endx, endy)",
                    "type": "line"
                },
                {
                    "text": "        canvas._set_color(COLOR_LINE)",
                    "type": "line"
                },
                {
                    "text": "        canvas.set_line_width(1.5)",
                    "type": "line"
                },
                {
                    "text": "        canvas.stroke()",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.687581",
            "type": "code"
        },
        "8e84748c392b4e72adbe4aa48bd30888": {
            "chunkpath": [
                "base classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class HBox(Box):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_widget_size(self, widget):",
                    "type": "line"
                },
                {
                    "text": "        return widget.get_width()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_rect_size(self, thing):",
                    "type": "line"
                },
                {
                    "text": "        return thing.width",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def set_rect_size(self, rect, size):",
                    "type": "line"
                },
                {
                    "text": "        rect = rect.copy()",
                    "type": "line"
                },
                {
                    "text": "        rect.width = size",
                    "type": "line"
                },
                {
                    "text": "        return rect",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def move_rect(self, rect, delta):",
                    "type": "line"
                },
                {
                    "text": "        return rect.move(delta, 0)",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.611325",
            "type": "code"
        },
        "8e8d2b99b72c4be9a46637d9688c1cf1": {
            "tags": [
                "title"
            ],
            "text": "Immutable",
            "timestamp_created": "2021-06-19T07:27:54.002538"
        },
        "915b1755daf440958f7806c9927ccb50": {
            "tags": [
                "title"
            ],
            "text": "Box",
            "timestamp_created": "2021-06-19T07:27:53.549767"
        },
        "9373b6fe256a4eee9478e30d701ddc90": {
            "tags": [
                "title"
            ],
            "text": "External Text Entry",
            "timestamp_created": "2021-06-19T07:27:54.054471"
        },
        "94df86b13b0a46039880954fcd6f2c43": {
            "tags": [
                "title"
            ],
            "text": "Search Results",
            "timestamp_created": "2021-06-19T07:27:52.631781"
        },
        "98765de5e17b468ebd5d7bb7b229cc0c": {
            "tags": [
                "title"
            ],
            "text": "Settings",
            "timestamp_created": "2021-06-19T07:27:52.952534"
        },
        "9914cb6c8dbf4a6b8859d68e94ce1bef": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class OverlayWidget(VBox):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, window, parent, db):",
                    "type": "line"
                },
                {
                    "text": "        VBox.__init__(self, window, parent)",
                    "type": "line"
                },
                {
                    "text": "        self.db = db",
                    "type": "line"
                },
                {
                    "text": "        self.link_source = None",
                    "type": "line"
                },
                {
                    "text": "        self.link_target = None",
                    "type": "line"
                },
                {
                    "text": "        self.pos = (0, 0)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def process_event(self, event):",
                    "type": "line"
                },
                {
                    "text": "        if event.mouse_motion():",
                    "type": "line"
                },
                {
                    "text": "            self.pos = event.mouse_pos()",
                    "type": "line"
                },
                {
                    "text": "        if self.link_source and event.left_mouse_up():",
                    "type": "line"
                },
                {
                    "text": "            if self.link_target:",
                    "type": "line"
                },
                {
                    "text": "                self.db.create_link(",
                    "type": "line"
                },
                {
                    "text": "                    self.link_source.note_id,",
                    "type": "line"
                },
                {
                    "text": "                    self.link_target.note_id",
                    "type": "line"
                },
                {
                    "text": "                )",
                    "type": "line"
                },
                {
                    "text": "                self.set_link_source(None)",
                    "type": "line"
                },
                {
                    "text": "                self.set_link_target(None)",
                    "type": "line"
                },
                {
                    "text": "                raise OverlayAbort()",
                    "type": "line"
                },
                {
                    "text": "            self.set_link_source(None)",
                    "type": "line"
                },
                {
                    "text": "            self.set_link_target(None)",
                    "type": "line"
                },
                {
                    "text": "        VBox.process_event(self, event)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def draw(self, canvas):",
                    "type": "line"
                },
                {
                    "text": "        VBox.draw(self, canvas)",
                    "type": "line"
                },
                {
                    "text": "        if self.link_source and not self.link_source.hit_test(self.pos):",
                    "type": "line"
                },
                {
                    "text": "            canvas.move_to(*self.link_source.get_link_source_point())",
                    "type": "line"
                },
                {
                    "text": "            canvas.line_to(*self.pos)",
                    "type": "line"
                },
                {
                    "text": "            if self.link_target:",
                    "type": "line"
                },
                {
                    "text": "                canvas._set_color(COLOR_ACTIVE)",
                    "type": "line"
                },
                {
                    "text": "            else:",
                    "type": "line"
                },
                {
                    "text": "                canvas._set_color(COLOR_INACTIVE)",
                    "type": "line"
                },
                {
                    "text": "            canvas.set_line_width(5)",
                    "type": "line"
                },
                {
                    "text": "            canvas.stroke()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def set_link_source(self, link_source):",
                    "type": "line"
                },
                {
                    "text": "        self.link_source = link_source",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def set_link_target(self, link_target):",
                    "type": "line"
                },
                {
                    "text": "        if link_target is None:",
                    "type": "line"
                },
                {
                    "text": "            self.link_target = None",
                    "type": "line"
                },
                {
                    "text": "            return",
                    "type": "line"
                },
                {
                    "text": "        if self.link_source is None:",
                    "type": "line"
                },
                {
                    "text": "            return",
                    "type": "line"
                },
                {
                    "text": "        if self.link_source.note_id == link_target.note_id:",
                    "type": "line"
                },
                {
                    "text": "            return",
                    "type": "line"
                },
                {
                    "text": "        self.link_target = link_target",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.757346",
            "type": "code"
        },
        "9b67b722e8aa4a2a913fe18905e369af": {
            "tags": [
                "title"
            ],
            "text": "Note",
            "timestamp_created": "2021-06-19T07:27:52.665205"
        },
        "9dea2f6390954d3fa2de99e0eb6457ca": {
            "tags": [
                "title"
            ],
            "text": "Note",
            "timestamp_created": "2021-06-19T07:27:52.789750"
        },
        "a0fe67b02bfd42c9adca92215cbf88b1": {
            "chunkpath": [],
            "filepath": [
                "test_smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "#!/usr/bin/env python3",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "import os",
                    "type": "line"
                },
                {
                    "text": "import cairo",
                    "type": "line"
                },
                {
                    "text": "import pygame",
                    "type": "line"
                },
                {
                    "text": "import smartnotes",
                    "type": "line"
                },
                {
                    "text": "import subprocess",
                    "type": "line"
                },
                {
                    "text": "import unittest",
                    "type": "line"
                },
                {
                    "text": "import tempfile",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "MANUAL_MODE = os.environ.get(\"MANUAL_MODE\", None) == \"yes\"",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "MS_PER_FRAME = 20",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "class BaseEvent(object):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def mouse_motion(self, rect=None):",
                    "type": "line"
                },
                {
                    "text": "        return False",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def left_mouse_down(self, rect=None):",
                    "type": "line"
                },
                {
                    "text": "        return False",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def left_mouse_up(self, rect=None):",
                    "type": "line"
                },
                {
                    "text": "        return False",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def mouse_pos(self):",
                    "type": "line"
                },
                {
                    "text": "        return None",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def key_down_text(self):",
                    "type": "line"
                },
                {
                    "text": "        return None",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def key_down(self, description=None):",
                    "type": "line"
                },
                {
                    "text": "        return False",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def window_gained_focus(self):",
                    "type": "line"
                },
                {
                    "text": "        return False",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def window_lost_focus(self):",
                    "type": "line"
                },
                {
                    "text": "        return False",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "class MouseMotionEvent(BaseEvent):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, pos):",
                    "type": "line"
                },
                {
                    "text": "        self.pos = pos",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def mouse_motion(self, rect=None):",
                    "type": "line"
                },
                {
                    "text": "        if rect is None:",
                    "type": "line"
                },
                {
                    "text": "            return True",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            return rect.collidepoint(self.pos)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def mouse_pos(self):",
                    "type": "line"
                },
                {
                    "text": "        return self.pos",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "class LeftMouseDownEvent(BaseEvent):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, pos):",
                    "type": "line"
                },
                {
                    "text": "        self.pos = pos",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def left_mouse_down(self, rect=None):",
                    "type": "line"
                },
                {
                    "text": "        if rect is None:",
                    "type": "line"
                },
                {
                    "text": "            return True",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            return rect.collidepoint(self.pos)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def mouse_pos(self):",
                    "type": "line"
                },
                {
                    "text": "        return self.pos",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "class LeftMouseUpEvent(BaseEvent):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, pos):",
                    "type": "line"
                },
                {
                    "text": "        self.pos = pos",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def left_mouse_up(self, rect=None):",
                    "type": "line"
                },
                {
                    "text": "        if rect is None:",
                    "type": "line"
                },
                {
                    "text": "            return True",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            return rect.collidepoint(self.pos)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def mouse_pos(self):",
                    "type": "line"
                },
                {
                    "text": "        return self.pos",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "class KeyEvent(BaseEvent):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, description):",
                    "type": "line"
                },
                {
                    "text": "        self.description = description",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def key_down(self, description=None):",
                    "type": "line"
                },
                {
                    "text": "        if description is None:",
                    "type": "line"
                },
                {
                    "text": "            return True",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            return self.description == description",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "class GuiDriverWindow(smartnotes.WindowFocusMixin):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def set_title(self, title):",
                    "type": "line"
                },
                {
                    "text": "        pass",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def close(self):",
                    "type": "line"
                },
                {
                    "text": "        pass",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "class GuiDriver(object):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, widget_cls, *args, **kwargs):",
                    "type": "line"
                },
                {
                    "text": "        self.window = GuiDriverWindow()",
                    "type": "line"
                },
                {
                    "text": "        self.cairo_surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, 800, 600)",
                    "type": "line"
                },
                {
                    "text": "        self.canvas = smartnotes.CairoCanvas(self.cairo_surface)",
                    "type": "line"
                },
                {
                    "text": "        self.widget = widget_cls(self.window, None, *args, **kwargs)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def iteration(self, events=[], elapsed_ms=1000):",
                    "type": "line"
                },
                {
                    "text": "        for event in events:",
                    "type": "line"
                },
                {
                    "text": "            self.widget.process_event(event)",
                    "type": "line"
                },
                {
                    "text": "        while elapsed_ms > 0:",
                    "type": "line"
                },
                {
                    "text": "            elapsed_ms_per_frame = min(elapsed_ms, MS_PER_FRAME)",
                    "type": "line"
                },
                {
                    "text": "            elapsed_ms -= elapsed_ms_per_frame",
                    "type": "line"
                },
                {
                    "text": "            self.widget.update(pygame.Rect(0, 0, 800, 600), elapsed_ms_per_frame)",
                    "type": "line"
                },
                {
                    "text": "            self.widget.draw(self.canvas)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def write_to_png(self, path):",
                    "type": "line"
                },
                {
                    "text": "        self.cairo_surface.write_to_png(path)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "class SmartNotesEndToEndTests(unittest.TestCase):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def setUp(self):",
                    "type": "line"
                },
                {
                    "text": "        example_notes = \"test_resources/example.notes\"",
                    "type": "line"
                },
                {
                    "text": "        subprocess.check_call([\"git\", \"checkout\", example_notes])",
                    "type": "line"
                },
                {
                    "text": "        self.driver = GuiDriver(smartnotes.SmartNotesWidget, example_notes)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def assert_drawn_image_is(self, name):",
                    "type": "line"
                },
                {
                    "text": "        try:",
                    "type": "line"
                },
                {
                    "text": "            expected_path = os.path.join(\"test_resources\", name)",
                    "type": "line"
                },
                {
                    "text": "            actual_path = os.path.join(\"test_resources\", \"actual_{}\".format(name))",
                    "type": "line"
                },
                {
                    "text": "            self.driver.write_to_png(actual_path)",
                    "type": "line"
                },
                {
                    "text": "            subprocess.check_call([\"diff\", expected_path, actual_path])",
                    "type": "line"
                },
                {
                    "text": "            os.remove(actual_path)",
                    "type": "line"
                },
                {
                    "text": "        except:",
                    "type": "line"
                },
                {
                    "text": "            if MANUAL_MODE and manual_compare_accept(expected_path, actual_path):",
                    "type": "line"
                },
                {
                    "text": "                return",
                    "type": "line"
                },
                {
                    "text": "            self.fail(",
                    "type": "line"
                },
                {
                    "text": "                f\"Drawn image did not match\\n\"",
                    "type": "line"
                },
                {
                    "text": "                f\"\\n\"",
                    "type": "line"
                },
                {
                    "text": "                f\"  Examine:\\n\"",
                    "type": "line"
                },
                {
                    "text": "                f\"    eog {actual_path}\\n\"",
                    "type": "line"
                },
                {
                    "text": "                f\"  Accept:\\n\"",
                    "type": "line"
                },
                {
                    "text": "                f\"    cp {actual_path} {expected_path}\\n\"",
                    "type": "line"
                },
                {
                    "text": "            )",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "blank_lines_before": 1,
                    "path": [
                        "end-to-end"
                    ],
                    "prefix": "    ",
                    "type": "chunk"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def manual_compare_accept(expected, actual):",
                    "type": "line"
                },
                {
                    "text": "    with tempfile.TemporaryDirectory() as tmp_dir:",
                    "type": "line"
                },
                {
                    "text": "        subprocess.call([",
                    "type": "line"
                },
                {
                    "text": "            \"compare\",",
                    "type": "line"
                },
                {
                    "text": "            expected,",
                    "type": "line"
                },
                {
                    "text": "            actual,",
                    "type": "line"
                },
                {
                    "text": "            \"-compose\",",
                    "type": "line"
                },
                {
                    "text": "            \"src\",",
                    "type": "line"
                },
                {
                    "text": "            os.path.join(tmp_dir, \"diff.png\")",
                    "type": "line"
                },
                {
                    "text": "        ])",
                    "type": "line"
                },
                {
                    "text": "        subprocess.call([",
                    "type": "line"
                },
                {
                    "text": "            \"montage\",",
                    "type": "line"
                },
                {
                    "text": "            \"-mode\", \"concatenate\",",
                    "type": "line"
                },
                {
                    "text": "            \"-tile\", \"x1\",",
                    "type": "line"
                },
                {
                    "text": "            \"-geometry\", \"+5+5\",",
                    "type": "line"
                },
                {
                    "text": "            \"-label\", \"%f\",",
                    "type": "line"
                },
                {
                    "text": "            expected,",
                    "type": "line"
                },
                {
                    "text": "            actual,",
                    "type": "line"
                },
                {
                    "text": "            os.path.join(tmp_dir, \"diff.png\"),",
                    "type": "line"
                },
                {
                    "text": "            os.path.join(tmp_dir, \"comparison.png\")",
                    "type": "line"
                },
                {
                    "text": "        ])",
                    "type": "line"
                },
                {
                    "text": "        comparison = subprocess.Popen([",
                    "type": "line"
                },
                {
                    "text": "            \"eog\",",
                    "type": "line"
                },
                {
                    "text": "            os.path.join(tmp_dir, \"comparison.png\")",
                    "type": "line"
                },
                {
                    "text": "        ])",
                    "type": "line"
                },
                {
                    "text": "        accept = input(\"Enter 'y' to accept: \") == \"y\"",
                    "type": "line"
                },
                {
                    "text": "        comparison.kill()",
                    "type": "line"
                },
                {
                    "text": "        if accept:",
                    "type": "line"
                },
                {
                    "text": "            subprocess.check_call([",
                    "type": "line"
                },
                {
                    "text": "                \"cp\",",
                    "type": "line"
                },
                {
                    "text": "                actual,",
                    "type": "line"
                },
                {
                    "text": "                expected,",
                    "type": "line"
                },
                {
                    "text": "            ])",
                    "type": "line"
                },
                {
                    "text": "        return accept",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "if __name__ == \"__main__\":",
                    "type": "line"
                },
                {
                    "text": "    unittest.main()",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.127196",
            "type": "code"
        },
        "a555b9e3b8a84bdbb662786cf96773ac": {
            "tags": [
                "title"
            ],
            "text": "Note External Edit",
            "timestamp_created": "2021-06-19T07:27:52.908466"
        },
        "a5661264b360480a954ca02a4998c3c3": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class NoteDb(Immutable):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, path):",
                    "type": "line"
                },
                {
                    "text": "        Immutable.__init__(self, read_json_file(path, {",
                    "type": "line"
                },
                {
                    "text": "            \"version\": 1,",
                    "type": "line"
                },
                {
                    "text": "            \"notes\": {},",
                    "type": "line"
                },
                {
                    "text": "            \"links\": {},",
                    "type": "line"
                },
                {
                    "text": "        }))",
                    "type": "line"
                },
                {
                    "text": "        self.path = path",
                    "type": "line"
                },
                {
                    "text": "        self.consolidate_files()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def write_files(self):",
                    "type": "line"
                },
                {
                    "text": "        parts = self.collect_parts()",
                    "type": "line"
                },
                {
                    "text": "        for (file, chunk) in parts.keys():",
                    "type": "line"
                },
                {
                    "text": "            if file != tuple() and chunk == tuple():",
                    "type": "line"
                },
                {
                    "text": "                with open(os.path.join(*file), \"w\") as f:",
                    "type": "line"
                },
                {
                    "text": "                    f.write(self.collect(file, chunk, parts))",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def consolidate_files(self):",
                    "type": "line"
                },
                {
                    "text": "        with self.transaction():",
                    "type": "line"
                },
                {
                    "text": "            parts = self.collect_parts()",
                    "type": "line"
                },
                {
                    "text": "            notes = set()",
                    "type": "line"
                },
                {
                    "text": "            for (file, chunk) in parts.keys():",
                    "type": "line"
                },
                {
                    "text": "                if file != tuple() and chunk == tuple():",
                    "type": "line"
                },
                {
                    "text": "                    notes.update(self.consolidate(os.path.join(*file), file, chunk, parts))",
                    "type": "line"
                },
                {
                    "text": "            if notes:",
                    "type": "line"
                },
                {
                    "text": "                parts = self.collect_parts()",
                    "type": "line"
                },
                {
                    "text": "                report = [",
                    "type": "line"
                },
                {
                    "text": "                    \"Consolidation report:\",",
                    "type": "line"
                },
                {
                    "text": "                    \"\",",
                    "type": "line"
                },
                {
                    "text": "                ]",
                    "type": "line"
                },
                {
                    "text": "                for (file, chunk) in parts.keys():",
                    "type": "line"
                },
                {
                    "text": "                    if file != tuple() and chunk == tuple():",
                    "type": "line"
                },
                {
                    "text": "                        path = os.path.join(*file)",
                    "type": "line"
                },
                {
                    "text": "                        with open(path) as f:",
                    "type": "line"
                },
                {
                    "text": "                            file_on_disk = f.read()",
                    "type": "line"
                },
                {
                    "text": "                        file_in_memory = self.collect(file, chunk, parts)",
                    "type": "line"
                },
                {
                    "text": "                        if file_on_disk != file_in_memory:",
                    "type": "line"
                },
                {
                    "text": "                            report.append(f\"  FAIL: {path}\")",
                    "type": "line"
                },
                {
                    "text": "                            with open(f\"{path}.orig\", \"w\") as f:",
                    "type": "line"
                },
                {
                    "text": "                                f.write(file_on_disk)",
                    "type": "line"
                },
                {
                    "text": "                        else:",
                    "type": "line"
                },
                {
                    "text": "                            report.append(f\"  OK:   {path}\")",
                    "type": "line"
                },
                {
                    "text": "                report_id = self.create_note(**{",
                    "type": "line"
                },
                {
                    "text": "                    \"type\": \"code\",",
                    "type": "line"
                },
                {
                    "text": "                    \"text\": \"<code>\",",
                    "type": "line"
                },
                {
                    "text": "                    \"filepath\": [],",
                    "type": "line"
                },
                {
                    "text": "                    \"chunkpath\": [],",
                    "type": "line"
                },
                {
                    "text": "                    \"fragments\": [{\"type\": \"line\", \"text\": x} for x in report]",
                    "type": "line"
                },
                {
                    "text": "                })",
                    "type": "line"
                },
                {
                    "text": "                for affected_note in notes:",
                    "type": "line"
                },
                {
                    "text": "                    self.create_link(report_id, affected_note)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def collect_parts(self):",
                    "type": "line"
                },
                {
                    "text": "        parts = defaultdict(list)",
                    "type": "line"
                },
                {
                    "text": "        for note_id, note in reversed(self.get_notes()):",
                    "type": "line"
                },
                {
                    "text": "            if note.get(\"type\", None) == \"code\":",
                    "type": "line"
                },
                {
                    "text": "                key = (tuple(note[\"filepath\"]), tuple(note[\"chunkpath\"]))",
                    "type": "line"
                },
                {
                    "text": "                parts[key].append((note_id, note[\"fragments\"]))",
                    "type": "line"
                },
                {
                    "text": "        return parts",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def consolidate(self, path, file, chunk, parts):",
                    "type": "line"
                },
                {
                    "text": "        old_lines = []",
                    "type": "line"
                },
                {
                    "text": "        self.collect_lines(old_lines, file, chunk, parts)",
                    "type": "line"
                },
                {
                    "text": "        with open(path) as f:",
                    "type": "line"
                },
                {
                    "text": "            new_lines = f.read().splitlines()",
                    "type": "line"
                },
                {
                    "text": "        sm = difflib.SequenceMatcher(a=[x[1] for x in old_lines], b=new_lines)",
                    "type": "line"
                },
                {
                    "text": "        note_actions = defaultdict(list)",
                    "type": "line"
                },
                {
                    "text": "        for tag, i1, i2, j1, j2 in sm.get_opcodes():",
                    "type": "line"
                },
                {
                    "text": "            if tag == \"replace\":",
                    "type": "line"
                },
                {
                    "text": "                first = None",
                    "type": "line"
                },
                {
                    "text": "                for tag, line in old_lines[i1:i2]:",
                    "type": "line"
                },
                {
                    "text": "                    if tag is not None:",
                    "type": "line"
                },
                {
                    "text": "                        note_id, prefix, fragment_index = tag",
                    "type": "line"
                },
                {
                    "text": "                        if first is None:",
                    "type": "line"
                },
                {
                    "text": "                            first = tag",
                    "type": "line"
                },
                {
                    "text": "                        note_actions[note_id].append(('remove', fragment_index))",
                    "type": "line"
                },
                {
                    "text": "                if first:",
                    "type": "line"
                },
                {
                    "text": "                    note_actions[first[0]].append((",
                    "type": "line"
                },
                {
                    "text": "                        'extend',",
                    "type": "line"
                },
                {
                    "text": "                        first[2],",
                    "type": "line"
                },
                {
                    "text": "                        [self.strip_prefix(first[1], x) for x in new_lines[j1:j2]]",
                    "type": "line"
                },
                {
                    "text": "                    ))",
                    "type": "line"
                },
                {
                    "text": "            elif tag == \"delete\":",
                    "type": "line"
                },
                {
                    "text": "                for tag, line in old_lines[i1:i2]:",
                    "type": "line"
                },
                {
                    "text": "                    if tag is not None:",
                    "type": "line"
                },
                {
                    "text": "                        note_id, prefix, fragment_index = tag",
                    "type": "line"
                },
                {
                    "text": "                        note_actions[note_id].append(('remove', fragment_index))",
                    "type": "line"
                },
                {
                    "text": "            elif tag == \"insert\":",
                    "type": "line"
                },
                {
                    "text": "                index = i1",
                    "type": "line"
                },
                {
                    "text": "                while True:",
                    "type": "line"
                },
                {
                    "text": "                    tag, line = old_lines[index]",
                    "type": "line"
                },
                {
                    "text": "                    if tag:",
                    "type": "line"
                },
                {
                    "text": "                        note_id, prefix, fragment_index = tag",
                    "type": "line"
                },
                {
                    "text": "                        note_actions[note_id].append((",
                    "type": "line"
                },
                {
                    "text": "                            'extend',",
                    "type": "line"
                },
                {
                    "text": "                            fragment_index,",
                    "type": "line"
                },
                {
                    "text": "                            [self.strip_prefix(prefix, x) for x in new_lines[j1:j2]]",
                    "type": "line"
                },
                {
                    "text": "                        ))",
                    "type": "line"
                },
                {
                    "text": "                        break",
                    "type": "line"
                },
                {
                    "text": "                    else:",
                    "type": "line"
                },
                {
                    "text": "                        index += 1",
                    "type": "line"
                },
                {
                    "text": "            elif tag == \"equal\":",
                    "type": "line"
                },
                {
                    "text": "                # Nothing to do",
                    "type": "line"
                },
                {
                    "text": "                pass",
                    "type": "line"
                },
                {
                    "text": "            else:",
                    "type": "line"
                },
                {
                    "text": "                raise ValueError(f\"Unknown op_code tag {tag}\")",
                    "type": "line"
                },
                {
                    "text": "        notes = set()",
                    "type": "line"
                },
                {
                    "text": "        for note_id, actions in note_actions.items():",
                    "type": "line"
                },
                {
                    "text": "            note = self.get_note_data(note_id)",
                    "type": "line"
                },
                {
                    "text": "            self.update_note(",
                    "type": "line"
                },
                {
                    "text": "                note_id,",
                    "type": "line"
                },
                {
                    "text": "                fragments=self.consolidate_fragments(note[\"fragments\"], actions)",
                    "type": "line"
                },
                {
                    "text": "            )",
                    "type": "line"
                },
                {
                    "text": "            notes.add(note_id)",
                    "type": "line"
                },
                {
                    "text": "        return notes",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def strip_prefix(self, prefix, line):",
                    "type": "line"
                },
                {
                    "text": "        if line.startswith(prefix):",
                    "type": "line"
                },
                {
                    "text": "            return line[len(prefix):]",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            return line",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def consolidate_fragments(self, fragments, actions):",
                    "type": "line"
                },
                {
                    "text": "        removes = set()",
                    "type": "line"
                },
                {
                    "text": "        extends = {}",
                    "type": "line"
                },
                {
                    "text": "        for action in actions:",
                    "type": "line"
                },
                {
                    "text": "            if action[0] == 'remove':",
                    "type": "line"
                },
                {
                    "text": "                removes.add(action[1])",
                    "type": "line"
                },
                {
                    "text": "            elif action[0] == 'extend':",
                    "type": "line"
                },
                {
                    "text": "                extends[action[1]] = action[2]",
                    "type": "line"
                },
                {
                    "text": "            else:",
                    "type": "line"
                },
                {
                    "text": "                raise ValueError(f\"Unknown action {action}\")",
                    "type": "line"
                },
                {
                    "text": "        new_fragments = []",
                    "type": "line"
                },
                {
                    "text": "        for index, fragment in enumerate(fragments):",
                    "type": "line"
                },
                {
                    "text": "            if index in extends:",
                    "type": "line"
                },
                {
                    "text": "                for line in extends[index]:",
                    "type": "line"
                },
                {
                    "text": "                    new_fragments.append({\"type\": \"line\", \"text\": line})",
                    "type": "line"
                },
                {
                    "text": "            if index not in removes:",
                    "type": "line"
                },
                {
                    "text": "                new_fragments.append(fragment)",
                    "type": "line"
                },
                {
                    "text": "        return new_fragments",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def collect(self, file, chunk, parts):",
                    "type": "line"
                },
                {
                    "text": "        lines = []",
                    "type": "line"
                },
                {
                    "text": "        self.collect_lines(lines, file, chunk, parts)",
                    "type": "line"
                },
                {
                    "text": "        return \"\\n\".join(line[1] for line in lines) + \"\\n\"",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def collect_lines(self, lines, file, chunk, parts, prefix=\"\", blank_lines_before=0):",
                    "type": "line"
                },
                {
                    "text": "        for index, (note_id, fragments) in enumerate(parts.get((file, chunk), [])):",
                    "type": "line"
                },
                {
                    "text": "            if index > 0:",
                    "type": "line"
                },
                {
                    "text": "                for foo in range(blank_lines_before):",
                    "type": "line"
                },
                {
                    "text": "                    lines.append((None, \"\"))",
                    "type": "line"
                },
                {
                    "text": "            for fragment_index, fragment in enumerate(fragments):",
                    "type": "line"
                },
                {
                    "text": "                if fragment[\"type\"] == \"line\":",
                    "type": "line"
                },
                {
                    "text": "                    if fragment[\"text\"]:",
                    "type": "line"
                },
                {
                    "text": "                        lines.append(((note_id, prefix, fragment_index), prefix+fragment[\"text\"]))",
                    "type": "line"
                },
                {
                    "text": "                    else:",
                    "type": "line"
                },
                {
                    "text": "                        lines.append(((note_id, prefix, fragment_index), \"\"))",
                    "type": "line"
                },
                {
                    "text": "                elif fragment[\"type\"] == \"chunk\":",
                    "type": "line"
                },
                {
                    "text": "                    self.collect_lines(",
                    "type": "line"
                },
                {
                    "text": "                        lines,",
                    "type": "line"
                },
                {
                    "text": "                        file,",
                    "type": "line"
                },
                {
                    "text": "                        tuple(list(chunk)+fragment[\"path\"]),",
                    "type": "line"
                },
                {
                    "text": "                        parts,",
                    "type": "line"
                },
                {
                    "text": "                        prefix=prefix+fragment[\"prefix\"],",
                    "type": "line"
                },
                {
                    "text": "                        blank_lines_before=fragment[\"blank_lines_before\"],",
                    "type": "line"
                },
                {
                    "text": "                    )",
                    "type": "line"
                },
                {
                    "text": "                else:",
                    "type": "line"
                },
                {
                    "text": "                    raise ValueError(f\"Unknown code fragment type {fragment['type']}\")",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_notes(self, expression=\"\"):",
                    "type": "line"
                },
                {
                    "text": "        def match(item):",
                    "type": "line"
                },
                {
                    "text": "            lower_text = item[\"text\"].lower()",
                    "type": "line"
                },
                {
                    "text": "            for part in expression.split(\" \"):",
                    "type": "line"
                },
                {
                    "text": "                if part.startswith(\"#\"):",
                    "type": "line"
                },
                {
                    "text": "                    tagpart = part[1:]",
                    "type": "line"
                },
                {
                    "text": "                    for tag in item.get(\"tags\", []):",
                    "type": "line"
                },
                {
                    "text": "                        if tagpart in tag:",
                    "type": "line"
                },
                {
                    "text": "                            break",
                    "type": "line"
                },
                {
                    "text": "                    else:",
                    "type": "line"
                },
                {
                    "text": "                        return False",
                    "type": "line"
                },
                {
                    "text": "                else:",
                    "type": "line"
                },
                {
                    "text": "                    if part.lower() not in lower_text:",
                    "type": "line"
                },
                {
                    "text": "                        return False",
                    "type": "line"
                },
                {
                    "text": "            return True",
                    "type": "line"
                },
                {
                    "text": "        return sorted(",
                    "type": "line"
                },
                {
                    "text": "            (",
                    "type": "line"
                },
                {
                    "text": "                item",
                    "type": "line"
                },
                {
                    "text": "                for item in self._get(\"notes\").items()",
                    "type": "line"
                },
                {
                    "text": "                if match(item[1])",
                    "type": "line"
                },
                {
                    "text": "            ),",
                    "type": "line"
                },
                {
                    "text": "            key=lambda item: item[1][\"timestamp_created\"],",
                    "type": "line"
                },
                {
                    "text": "            reverse=True",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_note_data(self, note_id):",
                    "type": "line"
                },
                {
                    "text": "        self._ensure_note_id(note_id)",
                    "type": "line"
                },
                {
                    "text": "        return self._get(\"notes\", note_id)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_children(self, note_id):",
                    "type": "line"
                },
                {
                    "text": "        for link_id, link in self.get_outgoing_links(note_id):",
                    "type": "line"
                },
                {
                    "text": "            yield link[\"to\"]",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_outgoing_links(self, note_id):",
                    "type": "line"
                },
                {
                    "text": "        return [",
                    "type": "line"
                },
                {
                    "text": "            (link_id, link)",
                    "type": "line"
                },
                {
                    "text": "            for link_id, link in self._get(\"links\").items()",
                    "type": "line"
                },
                {
                    "text": "            if link[\"from\"] == note_id",
                    "type": "line"
                },
                {
                    "text": "        ]",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_incoming_links(self, note_id):",
                    "type": "line"
                },
                {
                    "text": "        return [",
                    "type": "line"
                },
                {
                    "text": "            (link_id, link)",
                    "type": "line"
                },
                {
                    "text": "            for link_id, link in self._get(\"links\").items()",
                    "type": "line"
                },
                {
                    "text": "            if link[\"to\"] == note_id",
                    "type": "line"
                },
                {
                    "text": "        ]",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def create_note(self, **params):",
                    "type": "line"
                },
                {
                    "text": "        note_id = genid()",
                    "type": "line"
                },
                {
                    "text": "        self._replace(notes=dict(",
                    "type": "line"
                },
                {
                    "text": "            self._get(\"notes\"),",
                    "type": "line"
                },
                {
                    "text": "            **{note_id: dict(params, timestamp_created=utcnow_timestamp_string())}",
                    "type": "line"
                },
                {
                    "text": "        ))",
                    "type": "line"
                },
                {
                    "text": "        return note_id",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def update_note(self, note_id, **params):",
                    "type": "line"
                },
                {
                    "text": "        self._ensure_note_id(note_id)",
                    "type": "line"
                },
                {
                    "text": "        self._replace(notes=dict(",
                    "type": "line"
                },
                {
                    "text": "            self._get(\"notes\"),",
                    "type": "line"
                },
                {
                    "text": "            **{note_id: dict(self._get(\"notes\", note_id), **params)}",
                    "type": "line"
                },
                {
                    "text": "        ))",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def delete_note(self, note_id):",
                    "type": "line"
                },
                {
                    "text": "        self._ensure_note_id(note_id)",
                    "type": "line"
                },
                {
                    "text": "        new_notes = dict(self._get(\"notes\"))",
                    "type": "line"
                },
                {
                    "text": "        new_notes.pop(note_id)",
                    "type": "line"
                },
                {
                    "text": "        new_links = dict(self._get(\"links\"))",
                    "type": "line"
                },
                {
                    "text": "        dead_links = []",
                    "type": "line"
                },
                {
                    "text": "        for link_id, link in new_links.items():",
                    "type": "line"
                },
                {
                    "text": "            if link[\"to\"] == note_id or link[\"from\"] == note_id:",
                    "type": "line"
                },
                {
                    "text": "                dead_links.append(link_id)",
                    "type": "line"
                },
                {
                    "text": "        for link_id in dead_links:",
                    "type": "line"
                },
                {
                    "text": "            new_links.pop(link_id)",
                    "type": "line"
                },
                {
                    "text": "        self._replace(notes=new_notes, links=new_links)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def create_link(self, from_id, to_id):",
                    "type": "line"
                },
                {
                    "text": "        link_id = genid()",
                    "type": "line"
                },
                {
                    "text": "        self._replace(links=dict(",
                    "type": "line"
                },
                {
                    "text": "            self._get(\"links\"),",
                    "type": "line"
                },
                {
                    "text": "            **{link_id: {",
                    "type": "line"
                },
                {
                    "text": "                \"from\": from_id,",
                    "type": "line"
                },
                {
                    "text": "                \"to\": to_id,",
                    "type": "line"
                },
                {
                    "text": "                \"timestamp_created\": utcnow_timestamp_string(),",
                    "type": "line"
                },
                {
                    "text": "            }}",
                    "type": "line"
                },
                {
                    "text": "        ))",
                    "type": "line"
                },
                {
                    "text": "        return link_id",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def delete_link(self, link_id):",
                    "type": "line"
                },
                {
                    "text": "        self._ensure_link_id(link_id)",
                    "type": "line"
                },
                {
                    "text": "        new_links = dict(self._get(\"links\"))",
                    "type": "line"
                },
                {
                    "text": "        new_links.pop(link_id)",
                    "type": "line"
                },
                {
                    "text": "        self._replace(links=new_links)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _ensure_note_id(self, note_id):",
                    "type": "line"
                },
                {
                    "text": "        if note_id not in self._get(\"notes\"):",
                    "type": "line"
                },
                {
                    "text": "            raise NoteNotFound(str(note_id))",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _ensure_link_id(self, link_id):",
                    "type": "line"
                },
                {
                    "text": "        if link_id not in self._get(\"links\"):",
                    "type": "line"
                },
                {
                    "text": "            raise LinkNotFound(str(link_id))",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _replace(self, **kwargs):",
                    "type": "line"
                },
                {
                    "text": "        self._set(dict(self._get(), **kwargs))",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _data_changed(self):",
                    "type": "line"
                },
                {
                    "text": "        write_json_file(self.path, self._get())",
                    "type": "line"
                },
                {
                    "text": "        self.write_files()",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.838266",
            "type": "code"
        },
        "af2967da19aa441ca600cffe29aae955": {
            "chunkpath": [
                "base classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class VBox(Box):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_widget_size(self, widget):",
                    "type": "line"
                },
                {
                    "text": "        return widget.get_height()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_rect_size(self, thing):",
                    "type": "line"
                },
                {
                    "text": "        return thing.height",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def set_rect_size(self, rect, size):",
                    "type": "line"
                },
                {
                    "text": "        rect = rect.copy()",
                    "type": "line"
                },
                {
                    "text": "        rect.height = size",
                    "type": "line"
                },
                {
                    "text": "        return rect",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def move_rect(self, rect, delta):",
                    "type": "line"
                },
                {
                    "text": "        return rect.move(0, delta)",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.590416",
            "type": "code"
        },
        "af88ba59057c45338350bc42a0001adb": {
            "tags": [
                "title"
            ],
            "text": "Smart Notes",
            "timestamp_created": "2021-06-19T07:27:52.609041"
        },
        "b4922ecf5d984d408bcdaab9fdeeb064": {
            "chunkpath": [
                "functions"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def read_json_file(path, default_value):",
                    "type": "line"
                },
                {
                    "text": "    if os.path.exists(path):",
                    "type": "line"
                },
                {
                    "text": "        with open(path) as f:",
                    "type": "line"
                },
                {
                    "text": "            return json.load(f)",
                    "type": "line"
                },
                {
                    "text": "    else:",
                    "type": "line"
                },
                {
                    "text": "        return default_value",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:54.160479",
            "type": "code"
        },
        "b571359f968a4e2b8b2cb97f1d35c5f1": {
            "chunkpath": [
                "imports"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "import cairo",
                    "type": "line"
                },
                {
                    "text": "import pygame",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.740746",
            "type": "code"
        },
        "ba04a2b92b7f49a99a25a0af26d3b3aa": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class NoteBrowserWidget(VBox):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, window, parent, db, overlay, note_settings):",
                    "type": "line"
                },
                {
                    "text": "        VBox.__init__(self, window, parent)",
                    "type": "line"
                },
                {
                    "text": "        self.db = db",
                    "type": "line"
                },
                {
                    "text": "        self.note_settings = note_settings",
                    "type": "line"
                },
                {
                    "text": "        self.pos = (0, 0)",
                    "type": "line"
                },
                {
                    "text": "        self.note_id = None",
                    "type": "line"
                },
                {
                    "text": "        self.network = self.add(self.instantiate(NetworkWidget,",
                    "type": "line"
                },
                {
                    "text": "            self.db,",
                    "type": "line"
                },
                {
                    "text": "            overlay,",
                    "type": "line"
                },
                {
                    "text": "            self.note_settings",
                    "type": "line"
                },
                {
                    "text": "        ))",
                    "type": "line"
                },
                {
                    "text": "        self.table = self.add(self.instantiate(TableWidget,",
                    "type": "line"
                },
                {
                    "text": "            self.db,",
                    "type": "line"
                },
                {
                    "text": "            overlay,",
                    "type": "line"
                },
                {
                    "text": "            self.note_settings",
                    "type": "line"
                },
                {
                    "text": "        ))",
                    "type": "line"
                },
                {
                    "text": "        self.table.toggle_visible()",
                    "type": "line"
                },
                {
                    "text": "        self.toggle_table_network_after_event_processing = False",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def register_note_opened(self, note_id):",
                    "type": "line"
                },
                {
                    "text": "        self.note_id = note_id",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def open_note(self, note_id):",
                    "type": "line"
                },
                {
                    "text": "        if self.network.is_visible():",
                    "type": "line"
                },
                {
                    "text": "            self.network.open_note(note_id)",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            self.table.open_note(note_id)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def focus(self):",
                    "type": "line"
                },
                {
                    "text": "        if self.table.is_visible():",
                    "type": "line"
                },
                {
                    "text": "            self.table.focus()",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            self.network.focus()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def process_event(self, event):",
                    "type": "line"
                },
                {
                    "text": "        if event.mouse_motion():",
                    "type": "line"
                },
                {
                    "text": "            self.pos = event.mouse_pos()",
                    "type": "line"
                },
                {
                    "text": "        VBox.process_event(self, event)",
                    "type": "line"
                },
                {
                    "text": "        if self.toggle_table_network_after_event_processing:",
                    "type": "line"
                },
                {
                    "text": "            self.network.toggle_visible()",
                    "type": "line"
                },
                {
                    "text": "            self.table.toggle_visible()",
                    "type": "line"
                },
                {
                    "text": "            if self.network.is_visible():",
                    "type": "line"
                },
                {
                    "text": "                self.network.focus()",
                    "type": "line"
                },
                {
                    "text": "            else:",
                    "type": "line"
                },
                {
                    "text": "                self.table.focus()",
                    "type": "line"
                },
                {
                    "text": "            self.open_note(self.note_id)",
                    "type": "line"
                },
                {
                    "text": "            self.clear_quick_focus()",
                    "type": "line"
                },
                {
                    "text": "            self.toggle_table_network_after_event_processing = False",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def update(self, rect, elapsed_ms):",
                    "type": "line"
                },
                {
                    "text": "        self.note_settings.set_full_width(int(rect.width * 0.3))",
                    "type": "line"
                },
                {
                    "text": "        VBox.update(self, rect, elapsed_ms)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def bubble_event(self, event):",
                    "type": "line"
                },
                {
                    "text": "        if event.key_down(KEY_TOGGLE_TABLE_NETWORK):",
                    "type": "line"
                },
                {
                    "text": "            self.toggle_table_network()",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            VBox.bubble_event(self, event)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def toggle_table_network(self):",
                    "type": "line"
                },
                {
                    "text": "        self.toggle_table_network_after_event_processing = True",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.648657",
            "type": "code"
        },
        "ba947625790e456a8e4824e9fda0d8e9": {
            "chunkpath": [
                "base base classes",
                "BaseWidget",
                "interaction"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def draw(self, canvas):",
                    "type": "line"
                },
                {
                    "text": "    if self.has_focus():",
                    "type": "line"
                },
                {
                    "text": "        canvas.draw_rect(",
                    "type": "line"
                },
                {
                    "text": "            self.get_focus_rect().inflate(",
                    "type": "line"
                },
                {
                    "text": "                -self.get_focus_rect_size(),",
                    "type": "line"
                },
                {
                    "text": "                -self.get_focus_rect_size()",
                    "type": "line"
                },
                {
                    "text": "            ),",
                    "type": "line"
                },
                {
                    "text": "            COLOR_SELECTION,",
                    "type": "line"
                },
                {
                    "text": "            self.get_focus_rect_size()",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def get_focus_rect_size(self):",
                    "type": "line"
                },
                {
                    "text": "    return 2",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def get_focus_rect(self):",
                    "type": "line"
                },
                {
                    "text": "    return self.allotted_rect",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def get_used_rect(self):",
                    "type": "line"
                },
                {
                    "text": "    return self.allotted_rect",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.469293",
            "type": "code"
        },
        "bb1078db928c4a689b896659d62e5e4c": {
            "tags": [
                "title"
            ],
            "text": "Note Browser",
            "timestamp_created": "2021-06-19T07:27:52.644407"
        },
        "bdda899e7d3d4501a5a3bf817aea2cbe": {
            "chunkpath": [
                "end-to-end"
            ],
            "filepath": [
                "test_smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def test_open_note(self):",
                    "type": "line"
                },
                {
                    "text": "    self.driver.iteration(elapsed_ms=300+1)",
                    "type": "line"
                },
                {
                    "text": "    self.assert_drawn_image_is(\"main_screen.png\")",
                    "type": "line"
                },
                {
                    "text": "    self.driver.iteration(events=[",
                    "type": "line"
                },
                {
                    "text": "        MouseMotionEvent((200, 300)),",
                    "type": "line"
                },
                {
                    "text": "        LeftMouseDownEvent((200, 300)),",
                    "type": "line"
                },
                {
                    "text": "        LeftMouseUpEvent((200, 300)),",
                    "type": "line"
                },
                {
                    "text": "    ], elapsed_ms=400+1)",
                    "type": "line"
                },
                {
                    "text": "    self.assert_drawn_image_is(\"new_note_opened.png\")",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.093303",
            "type": "code"
        },
        "bef0e90db2fd4445973a9afd8b0cf636": {
            "chunkpath": [
                "base classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class Immutable(object):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, data, undo_list_size=20):",
                    "type": "line"
                },
                {
                    "text": "        self.data = data",
                    "type": "line"
                },
                {
                    "text": "        self.undo_list_size = undo_list_size",
                    "type": "line"
                },
                {
                    "text": "        self.undo_list = []",
                    "type": "line"
                },
                {
                    "text": "        self.redo_list = []",
                    "type": "line"
                },
                {
                    "text": "        self.transaction_count = 0",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    @contextlib.contextmanager",
                    "type": "line"
                },
                {
                    "text": "    def transaction(self):",
                    "type": "line"
                },
                {
                    "text": "        current_data = self.data",
                    "type": "line"
                },
                {
                    "text": "        self.transaction_count += 1",
                    "type": "line"
                },
                {
                    "text": "        try:",
                    "type": "line"
                },
                {
                    "text": "            yield",
                    "type": "line"
                },
                {
                    "text": "        except:",
                    "type": "line"
                },
                {
                    "text": "            self.data = current_data",
                    "type": "line"
                },
                {
                    "text": "            raise",
                    "type": "line"
                },
                {
                    "text": "        finally:",
                    "type": "line"
                },
                {
                    "text": "            self.transaction_count -= 1",
                    "type": "line"
                },
                {
                    "text": "            if self.transaction_count == 0 and self.data is not current_data:",
                    "type": "line"
                },
                {
                    "text": "                self.undo_list.append(current_data)",
                    "type": "line"
                },
                {
                    "text": "                self.undo_list = self.undo_list[-self.undo_list_size:]",
                    "type": "line"
                },
                {
                    "text": "                self.redo_list.clear()",
                    "type": "line"
                },
                {
                    "text": "                self._data_changed()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def undo(self):",
                    "type": "line"
                },
                {
                    "text": "        if self.transaction_count == 0 and self.undo_list:",
                    "type": "line"
                },
                {
                    "text": "            self.redo_list.insert(0, self.data)",
                    "type": "line"
                },
                {
                    "text": "            self.data = self.undo_list.pop(-1)",
                    "type": "line"
                },
                {
                    "text": "            self._data_changed()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def redo(self):",
                    "type": "line"
                },
                {
                    "text": "        if self.transaction_count == 0 and self.redo_list:",
                    "type": "line"
                },
                {
                    "text": "            self.undo_list.append(self.data)",
                    "type": "line"
                },
                {
                    "text": "            self.data = self.redo_list.pop(0)",
                    "type": "line"
                },
                {
                    "text": "            self._data_changed()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _get(self, *path):",
                    "type": "line"
                },
                {
                    "text": "        data = self.data",
                    "type": "line"
                },
                {
                    "text": "        for part in path:",
                    "type": "line"
                },
                {
                    "text": "            data = data[part]",
                    "type": "line"
                },
                {
                    "text": "        return data",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _set(self, data):",
                    "type": "line"
                },
                {
                    "text": "        with self.transaction():",
                    "type": "line"
                },
                {
                    "text": "            self.data = data",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _data_changed(self):",
                    "type": "line"
                },
                {
                    "text": "        pass",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:54.028438",
            "type": "code"
        },
        "bf2aabce618349f69ec6b3c43ce03382": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class SearchBar(VBox):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    SEARCH_FIELD_HEIHGT = 50",
                    "type": "line"
                },
                {
                    "text": "    VPADDING = 8",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, window, parent, db, overlay, note_settings, open_callback, dismiss_callback):",
                    "type": "line"
                },
                {
                    "text": "        VBox.__init__(self, window, parent, height=0, visible=False)",
                    "type": "line"
                },
                {
                    "text": "        self.db = db",
                    "type": "line"
                },
                {
                    "text": "        self.open_callback = open_callback",
                    "type": "line"
                },
                {
                    "text": "        self.dismiss_callback = dismiss_callback",
                    "type": "line"
                },
                {
                    "text": "        self.animation = Animation()",
                    "type": "line"
                },
                {
                    "text": "        self.notes = []",
                    "type": "line"
                },
                {
                    "text": "        self.search_results = self.instantiate(SearchResults,",
                    "type": "line"
                },
                {
                    "text": "            db, overlay, note_settings, open_callback,",
                    "type": "line"
                },
                {
                    "text": "            hpadding=self.VPADDING",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "        self.search_field = self.instantiate(SearchField,",
                    "type": "line"
                },
                {
                    "text": "            self.search_results,",
                    "type": "line"
                },
                {
                    "text": "            self.dismiss_callback,",
                    "type": "line"
                },
                {
                    "text": "            text_size=20",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "        self.add(self.instantiate(Padding,",
                    "type": "line"
                },
                {
                    "text": "            self.search_field,",
                    "type": "line"
                },
                {
                    "text": "            hpadding=lambda rect: int(rect.width*0.08),",
                    "type": "line"
                },
                {
                    "text": "            vpadding=lambda rect: self.VPADDING,",
                    "type": "line"
                },
                {
                    "text": "            height=self.SEARCH_FIELD_HEIHGT",
                    "type": "line"
                },
                {
                    "text": "        ))",
                    "type": "line"
                },
                {
                    "text": "        self.add(self.search_results)",
                    "type": "line"
                },
                {
                    "text": "        self.add(self.instantiate(Widget, height=self.VPADDING))",
                    "type": "line"
                },
                {
                    "text": "        self.ideal_height = 200",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def focus(self):",
                    "type": "line"
                },
                {
                    "text": "        self.search_field.focus()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def is_visible(self):",
                    "type": "line"
                },
                {
                    "text": "        return Widget.is_visible(self) or self.animation.active()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def start_search(self):",
                    "type": "line"
                },
                {
                    "text": "        if not Widget.is_visible(self):",
                    "type": "line"
                },
                {
                    "text": "            self.toggle_visible()",
                    "type": "line"
                },
                {
                    "text": "            self.animation.reverse(200)",
                    "type": "line"
                },
                {
                    "text": "        self.focus()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def hide(self):",
                    "type": "line"
                },
                {
                    "text": "        if Widget.is_visible(self):",
                    "type": "line"
                },
                {
                    "text": "            self.toggle_visible()",
                    "type": "line"
                },
                {
                    "text": "            self.animation.reverse(200)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def update(self, rect, elapsed_ms):",
                    "type": "line"
                },
                {
                    "text": "        self.ideal_rect = rect.copy()",
                    "type": "line"
                },
                {
                    "text": "        self.ideal_rect.height = self.ideal_height",
                    "type": "line"
                },
                {
                    "text": "        VBox.update(self, self.ideal_rect, elapsed_ms)",
                    "type": "line"
                },
                {
                    "text": "        self.ideal_height = self.SEARCH_FIELD_HEIHGT + self.VPADDING + self.search_results.wanted_height",
                    "type": "line"
                },
                {
                    "text": "        percent = self.animation.advance(elapsed_ms)",
                    "type": "line"
                },
                {
                    "text": "        self.update_height = self.get_height()",
                    "type": "line"
                },
                {
                    "text": "        if Widget.is_visible(self):",
                    "type": "line"
                },
                {
                    "text": "            self.alpha = int(255 * percent)",
                    "type": "line"
                },
                {
                    "text": "            self.resize(height=int(self.ideal_height * percent))",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            self.alpha = 255 - int(255 * percent)",
                    "type": "line"
                },
                {
                    "text": "            self.resize(height=self.ideal_height - int(self.ideal_height * percent))",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def draw(self, canvas):",
                    "type": "line"
                },
                {
                    "text": "        canvas.blit(",
                    "type": "line"
                },
                {
                    "text": "            canvas.create_image(self.ideal_rect.size, self._draw_search_bar_image),",
                    "type": "line"
                },
                {
                    "text": "            (0, -self.ideal_height+self.update_height),",
                    "type": "line"
                },
                {
                    "text": "            alpha=self.alpha",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _draw_search_bar_image(self, canvas):",
                    "type": "line"
                },
                {
                    "text": "        canvas.fill_rect(",
                    "type": "line"
                },
                {
                    "text": "            pygame.Rect(0, 0, self.ideal_rect.width, self.ideal_rect.height),",
                    "type": "line"
                },
                {
                    "text": "            color=COLOR_SEARCH_BAR",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "        VBox.draw(self, canvas)",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.621666",
            "type": "code"
        },
        "c180b5ec4c2447009a4ac1a87d7dad40": {
            "text": "If a child widget in a `Box` is resized in the `update` method, the new size will not be used until the next game loop iteration.",
            "timestamp_created": "2021-06-19T07:27:53.314801"
        },
        "c4426c34655c47b3b69dd416b4cd26fc": {
            "chunkpath": [
                "base classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class WindowFocusMixin(object):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self):",
                    "type": "line"
                },
                {
                    "text": "        self.focused_widget = None",
                    "type": "line"
                },
                {
                    "text": "        self.quick_focused_widget = None",
                    "type": "line"
                },
                {
                    "text": "        self.saved_focus = None",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def set_focus(self, widget):",
                    "type": "line"
                },
                {
                    "text": "        self.focused_widget = widget",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def set_quick_focus(self, widget):",
                    "type": "line"
                },
                {
                    "text": "        self.quick_focused_widget = widget",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def clear_quick_focus(self):",
                    "type": "line"
                },
                {
                    "text": "        if self.quick_focused_widget is not None:",
                    "type": "line"
                },
                {
                    "text": "            self.quick_focused_widget = None",
                    "type": "line"
                },
                {
                    "text": "            return True",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            return False",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def is_focused(self, widget):",
                    "type": "line"
                },
                {
                    "text": "        if self.quick_focused_widget is None:",
                    "type": "line"
                },
                {
                    "text": "            return widget is self.focused_widget",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            return widget is self.quick_focused_widget",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def save_focus(self):",
                    "type": "line"
                },
                {
                    "text": "        if self.saved_focus is None:",
                    "type": "line"
                },
                {
                    "text": "            self.saved_focus = (self.focused_widget, self.quick_focused_widget)",
                    "type": "line"
                },
                {
                    "text": "            self.focused_widget = None",
                    "type": "line"
                },
                {
                    "text": "            self.quick_focused_widget = None",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def restore_focus(self):",
                    "type": "line"
                },
                {
                    "text": "        if self.saved_focus is not None:",
                    "type": "line"
                },
                {
                    "text": "            self.focused_widget, self.quick_focused_widget = self.saved_focus",
                    "type": "line"
                },
                {
                    "text": "            self.saved_focus = None",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.200062",
            "type": "code"
        },
        "c5e2d7f312654d389e9e7042895f2192": {
            "chunkpath": [
                "imports"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "from collections import defaultdict",
                    "type": "line"
                },
                {
                    "text": "import difflib",
                    "type": "line"
                },
                {
                    "text": "import re",
                    "type": "line"
                },
                {
                    "text": "import datetime",
                    "type": "line"
                },
                {
                    "text": "import sys",
                    "type": "line"
                },
                {
                    "text": "import uuid",
                    "type": "line"
                },
                {
                    "text": "import webbrowser",
                    "type": "line"
                },
                {
                    "text": "import math",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.612579",
            "type": "code"
        },
        "c69d9bc1cb314c60a88e1051aa3bd326": {
            "chunkpath": [
                "functions"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def create_cairo_image(pygame_cairo_surface):",
                    "type": "line"
                },
                {
                    "text": "    return cairo.ImageSurface.create_for_data(",
                    "type": "line"
                },
                {
                    "text": "        pygame_cairo_surface.get_buffer(),",
                    "type": "line"
                },
                {
                    "text": "        cairo.FORMAT_ARGB32,",
                    "type": "line"
                },
                {
                    "text": "        *pygame_cairo_surface.get_size()",
                    "type": "line"
                },
                {
                    "text": "    )",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.925963",
            "type": "code"
        },
        "c79b278199e343e69d2dede9e8339a33": {
            "chunkpath": [
                "functions"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def pygame_main(root_widget_cls, *args, **kwargs):",
                    "type": "line"
                },
                {
                    "text": "    pygame.init()",
                    "type": "line"
                },
                {
                    "text": "    pygame.key.set_repeat(500, 30)",
                    "type": "line"
                },
                {
                    "text": "    root_widget = root_widget_cls(PygameWindow(), None, *args, **kwargs)",
                    "type": "line"
                },
                {
                    "text": "    screen = pygame.display.set_mode((1280, 720), pygame.RESIZABLE)",
                    "type": "line"
                },
                {
                    "text": "    clock = pygame.time.Clock()",
                    "type": "line"
                },
                {
                    "text": "    external_text_entries = ExternalTextEntries()",
                    "type": "line"
                },
                {
                    "text": "    pygame.time.set_timer(USER_EVENT_CHECK_EXTERNAL, 1000)",
                    "type": "line"
                },
                {
                    "text": "    pygame_cairo_surface = create_pygame_cairo_surface(screen)",
                    "type": "line"
                },
                {
                    "text": "    while True:",
                    "type": "line"
                },
                {
                    "text": "        for event in pygame.event.get():",
                    "type": "line"
                },
                {
                    "text": "            if event.type == pygame.QUIT:",
                    "type": "line"
                },
                {
                    "text": "                return",
                    "type": "line"
                },
                {
                    "text": "            elif event.type == pygame.VIDEORESIZE:",
                    "type": "line"
                },
                {
                    "text": "                pygame_cairo_surface = create_pygame_cairo_surface(screen)",
                    "type": "line"
                },
                {
                    "text": "            elif event.type == USER_EVENT_CHECK_EXTERNAL:",
                    "type": "line"
                },
                {
                    "text": "                external_text_entries.check()",
                    "type": "line"
                },
                {
                    "text": "            elif event.type == USER_EVENT_EXTERNAL_TEXT_ENTRY:",
                    "type": "line"
                },
                {
                    "text": "                external_text_entries.add(event.entry)",
                    "type": "line"
                },
                {
                    "text": "            else:",
                    "type": "line"
                },
                {
                    "text": "                root_widget.process_event(PygameEvent(event))",
                    "type": "line"
                },
                {
                    "text": "        root_widget.update(screen.get_rect(), clock.get_time())",
                    "type": "line"
                },
                {
                    "text": "        pygame_cairo_surface.lock()",
                    "type": "line"
                },
                {
                    "text": "        root_widget.draw(CairoCanvas(create_cairo_image(pygame_cairo_surface)))",
                    "type": "line"
                },
                {
                    "text": "        pygame_cairo_surface.unlock()",
                    "type": "line"
                },
                {
                    "text": "        screen.blit(pygame_cairo_surface, (0, 0))",
                    "type": "line"
                },
                {
                    "text": "        pygame.display.flip()",
                    "type": "line"
                },
                {
                    "text": "        clock.tick(60)",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.784784",
            "type": "code"
        },
        "c82b22fc526b4d92a1600c8a28c0a290": {
            "chunkpath": [
                "functions"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def format_title(name, path):",
                    "type": "line"
                },
                {
                    "text": "    return \"{} ({}) - {}\".format(",
                    "type": "line"
                },
                {
                    "text": "        os.path.basename(path),",
                    "type": "line"
                },
                {
                    "text": "        os.path.abspath(os.path.dirname(path)),",
                    "type": "line"
                },
                {
                    "text": "        name",
                    "type": "line"
                },
                {
                    "text": "    )",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:54.266785",
            "type": "code"
        },
        "cadbc90bb17945089ec28f4f4c1b18f3": {
            "chunkpath": [
                "functions"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def strip_last_word(text):",
                    "type": "line"
                },
                {
                    "text": "    remaining_parts = text.rstrip().split(\" \")[:-1]",
                    "type": "line"
                },
                {
                    "text": "    if remaining_parts:",
                    "type": "line"
                },
                {
                    "text": "        return \" \".join(remaining_parts) + \" \"",
                    "type": "line"
                },
                {
                    "text": "    else:",
                    "type": "line"
                },
                {
                    "text": "        return \"\"",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:54.321742",
            "type": "code"
        },
        "cd1a983e9fc54e32b67bddd67b11d5a5": {
            "chunkpath": [],
            "filepath": [],
            "fragments": [
                {
                    "text": "+------------------------+",
                    "type": "line"
                },
                {
                    "text": "|  Application           |",
                    "type": "line"
                },
                {
                    "text": "+--------------------+-+-+",
                    "type": "line"
                },
                {
                    "text": "|  Widget Framework  | |",
                    "type": "line"
                },
                {
                    "text": "+----------------+-+-+ |",
                    "type": "line"
                },
                {
                    "text": "                   |   |",
                    "type": "line"
                },
                {
                    "text": "+----------------+ |   |",
                    "type": "line"
                },
                {
                    "text": "|  Pygame/Cairo  | |   |",
                    "type": "line"
                },
                {
                    "text": "+----------------+ |   |",
                    "type": "line"
                },
                {
                    "text": "         v         v   v",
                    "type": "line"
                },
                {
                    "text": "+------------------------+",
                    "type": "line"
                },
                {
                    "text": "|      Utilities         |",
                    "type": "line"
                },
                {
                    "text": "+------------------------+",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.609743",
            "type": "code"
        },
        "ceeadc4c09f64510bc4a1b9c646698aa": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class DebugBar(Widget):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    IDEAL_HEIGHT = 50",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, window, parent):",
                    "type": "line"
                },
                {
                    "text": "        Widget.__init__(self, window, parent, height=self.IDEAL_HEIGHT, visible=DEBUG)",
                    "type": "line"
                },
                {
                    "text": "        self.animation = Animation()",
                    "type": "line"
                },
                {
                    "text": "        self.average_elapsed = 0",
                    "type": "line"
                },
                {
                    "text": "        self.tot_elapsed_time = 0",
                    "type": "line"
                },
                {
                    "text": "        self.frame_count = 0",
                    "type": "line"
                },
                {
                    "text": "        self.fps = 0",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def is_visible(self):",
                    "type": "line"
                },
                {
                    "text": "        return Widget.is_visible(self) or self.animation.active()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def toggle(self):",
                    "type": "line"
                },
                {
                    "text": "        self.toggle_visible()",
                    "type": "line"
                },
                {
                    "text": "        self.animation.reverse(200)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def update(self, rect, elapsed_ms):",
                    "type": "line"
                },
                {
                    "text": "        Widget.update(self, rect, elapsed_ms)",
                    "type": "line"
                },
                {
                    "text": "        self.tot_elapsed_time += elapsed_ms",
                    "type": "line"
                },
                {
                    "text": "        self.frame_count += 1",
                    "type": "line"
                },
                {
                    "text": "        if self.tot_elapsed_time > 1000:",
                    "type": "line"
                },
                {
                    "text": "            self.average_elapsed = int(round(self.tot_elapsed_time / self.frame_count))",
                    "type": "line"
                },
                {
                    "text": "            self.fps = self.frame_count",
                    "type": "line"
                },
                {
                    "text": "            self.frame_count = 0",
                    "type": "line"
                },
                {
                    "text": "            self.tot_elapsed_time -= 1000",
                    "type": "line"
                },
                {
                    "text": "        percent = self.animation.advance(elapsed_ms)",
                    "type": "line"
                },
                {
                    "text": "        if Widget.is_visible(self):",
                    "type": "line"
                },
                {
                    "text": "            self.alpha = int(255 * percent)",
                    "type": "line"
                },
                {
                    "text": "            self.resize(height=int(self.IDEAL_HEIGHT * percent))",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            self.alpha = 255 - int(255 * percent)",
                    "type": "line"
                },
                {
                    "text": "            self.resize(height=self.IDEAL_HEIGHT - int(self.IDEAL_HEIGHT * percent))",
                    "type": "line"
                },
                {
                    "text": "        self.rect = rect",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def draw(self, canvas):",
                    "type": "line"
                },
                {
                    "text": "        canvas.blit(",
                    "type": "line"
                },
                {
                    "text": "            canvas.create_image((self.rect.width, self.IDEAL_HEIGHT), self._draw_bar),",
                    "type": "line"
                },
                {
                    "text": "            self.rect,",
                    "type": "line"
                },
                {
                    "text": "            alpha=self.alpha",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "        Widget.draw(self, canvas)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _draw_bar(self, canvas):",
                    "type": "line"
                },
                {
                    "text": "        rect = pygame.Rect((0, 0), (self.rect.width, self.IDEAL_HEIGHT))",
                    "type": "line"
                },
                {
                    "text": "        canvas.fill_rect(rect, color=(84, 106, 134))",
                    "type": "line"
                },
                {
                    "text": "        canvas.render_text(",
                    "type": "line"
                },
                {
                    "text": "            f\"elapsed_ms = {self.average_elapsed} | fps = {self.fps}\",",
                    "type": "line"
                },
                {
                    "text": "            rect.inflate(-20, -20),",
                    "type": "line"
                },
                {
                    "text": "            boxalign=\"midleft\",",
                    "type": "line"
                },
                {
                    "text": "            size=15,",
                    "type": "line"
                },
                {
                    "text": "            face=\"Monospace\"",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.736704",
            "type": "code"
        },
        "d25059d661ca4f9fa6fc94c24c7969f3": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class ExternalTextEntries(object):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self):",
                    "type": "line"
                },
                {
                    "text": "        self.entries = []",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def add(self, entry):",
                    "type": "line"
                },
                {
                    "text": "        self.entries.append(entry)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def check(self):",
                    "type": "line"
                },
                {
                    "text": "        self.entries = [",
                    "type": "line"
                },
                {
                    "text": "            entry",
                    "type": "line"
                },
                {
                    "text": "            for entry in self.entries",
                    "type": "line"
                },
                {
                    "text": "            if entry.check()",
                    "type": "line"
                },
                {
                    "text": "        ]",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:54.080964",
            "type": "code"
        },
        "d520425e067a453ebd7d8c4e35a0d9ca": {
            "tags": [
                "title"
            ],
            "text": "Debug Bar",
            "timestamp_created": "2021-06-19T07:27:52.726691"
        },
        "d8feaf1314404d3d8c3482aeb67b7625": {
            "chunkpath": [
                "end-to-end"
            ],
            "filepath": [
                "test_smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def test_main_screen(self):",
                    "type": "line"
                },
                {
                    "text": "    self.driver.iteration(elapsed_ms=300+1)",
                    "type": "line"
                },
                {
                    "text": "    self.assert_drawn_image_is(\"main_screen.png\")",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.998650",
            "type": "code"
        },
        "da9762c4ecec40f39459a1cadb195672": {
            "chunkpath": [
                "base base classes",
                "BaseWidget",
                "interaction"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def update(self, rect, elapsed_ms):",
                    "type": "line"
                },
                {
                    "text": "    self.allotted_rect = rect",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.449537",
            "type": "code"
        },
        "db2737780b294f7b91ed1083778d234b": {
            "chunkpath": [],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "#!/usr/bin/env python3",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "blank_lines_before": 0,
                    "path": [
                        "imports"
                    ],
                    "prefix": "",
                    "type": "chunk"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "blank_lines_before": 1,
                    "path": [
                        "constants"
                    ],
                    "prefix": "",
                    "type": "chunk"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "blank_lines_before": 1,
                    "path": [
                        "base base classes"
                    ],
                    "prefix": "",
                    "type": "chunk"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "blank_lines_before": 1,
                    "path": [
                        "base classes"
                    ],
                    "prefix": "",
                    "type": "chunk"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "blank_lines_before": 1,
                    "path": [
                        "classes"
                    ],
                    "prefix": "",
                    "type": "chunk"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "blank_lines_before": 1,
                    "path": [
                        "functions"
                    ],
                    "prefix": "",
                    "type": "chunk"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "if __name__ == \"__main__\":",
                    "type": "line"
                },
                {
                    "text": "    main()",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.610285",
            "type": "code"
        },
        "db953d9fabca4399beab08ef48ae1b3f": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class TableNote(NoteBaseWidget):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, window, parent, db, overlay, settings, note_id, open_callback):",
                    "type": "line"
                },
                {
                    "text": "        NoteBaseWidget.__init__(self, window, parent, db, overlay, note_id, settings)",
                    "type": "line"
                },
                {
                    "text": "        self.overlay = overlay",
                    "type": "line"
                },
                {
                    "text": "        self.open_callback = open_callback",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def open_me(self):",
                    "type": "line"
                },
                {
                    "text": "        self.open_callback(self.note_id)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def update(self, rect, elapsed_ms):",
                    "type": "line"
                },
                {
                    "text": "        NoteBaseWidget.update(self, rect, elapsed_ms)",
                    "type": "line"
                },
                {
                    "text": "        self.rect = self._get_target(rect, align=\"center\")",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.714632",
            "type": "code"
        },
        "dd45e68bd5c24d6f93e1c0d6e2f93cd6": {
            "chunkpath": [
                "end-to-end"
            ],
            "filepath": [
                "test_smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def test_create_link(self):",
                    "type": "line"
                },
                {
                    "text": "    self.driver.iteration(elapsed_ms=300+1)",
                    "type": "line"
                },
                {
                    "text": "    self.assert_drawn_image_is(\"main_screen.png\")",
                    "type": "line"
                },
                {
                    "text": "    self.driver.iteration(events=[",
                    "type": "line"
                },
                {
                    "text": "        MouseMotionEvent((400, 300)),",
                    "type": "line"
                },
                {
                    "text": "        LeftMouseDownEvent((400, 300)),",
                    "type": "line"
                },
                {
                    "text": "        MouseMotionEvent((200, 300)),",
                    "type": "line"
                },
                {
                    "text": "    ], elapsed_ms=MS_PER_FRAME+1)",
                    "type": "line"
                },
                {
                    "text": "    self.assert_drawn_image_is(\"link_to_target.png\")",
                    "type": "line"
                },
                {
                    "text": "    self.driver.iteration(events=[",
                    "type": "line"
                },
                {
                    "text": "        LeftMouseUpEvent((200, 300)),",
                    "type": "line"
                },
                {
                    "text": "    ], elapsed_ms=400+1)",
                    "type": "line"
                },
                {
                    "text": "    self.assert_drawn_image_is(\"link_created.png\")",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.077200",
            "type": "code"
        },
        "dee94b78ca4f4adaa5ad786c7d1b671c": {
            "chunkpath": [
                "constants"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "COLOR_SELECTION          = (214, 138, 208)",
                    "type": "line"
                },
                {
                    "text": "COLOR_SEARCH_BAR         = (108, 138, 173)",
                    "type": "line"
                },
                {
                    "text": "COLOR_BACKGROUND         = (134, 169, 214)",
                    "type": "line"
                },
                {
                    "text": "COLOR_ACTIVE             = (25, 204, 25)",
                    "type": "line"
                },
                {
                    "text": "COLOR_INACTIVE           = (204, 204, 204)",
                    "type": "line"
                },
                {
                    "text": "COLOR_LINE               = (114, 127, 178)",
                    "type": "line"
                },
                {
                    "text": "COLOR_NOTE_BG            = (250, 250, 250)",
                    "type": "line"
                },
                {
                    "text": "COLOR_NOTE_TEXT          = (20, 20, 20)",
                    "type": "line"
                },
                {
                    "text": "COLOR_NOTE_DATE_TEXT     = (100, 100, 100)",
                    "type": "line"
                },
                {
                    "text": "COLOR_NOTE_TAG_TEXT      = (100, 100, 255)",
                    "type": "line"
                },
                {
                    "text": "FONT_MONOSPACE           = \"Monospace\"",
                    "type": "line"
                },
                {
                    "text": "FONT_TEXT                = \"San-Serif\"",
                    "type": "line"
                },
                {
                    "text": "EDITOR_COMMAND           = [\"gvim\", \"--nofork\", None]",
                    "type": "line"
                },
                {
                    "text": "NUM_SEARCH_RESULTS       = 6",
                    "type": "line"
                },
                {
                    "text": "NEW_NOTE_TEXT            = \"Enter note text...\\n\"",
                    "type": "line"
                },
                {
                    "text": "KEY_QUIT                 = \"ctrl+q\"",
                    "type": "line"
                },
                {
                    "text": "KEY_UNDO                 = \"ctrl+z\"",
                    "type": "line"
                },
                {
                    "text": "KEY_REDO                 = \"ctrl+y\"",
                    "type": "line"
                },
                {
                    "text": "KEY_TOGGLE_DEBUG_BAR     = \"f1\"",
                    "type": "line"
                },
                {
                    "text": "KEY_CLEAR_FOCUS          = \"escape\"",
                    "type": "line"
                },
                {
                    "text": "KEY_DISMISS              = \"ctrl+g\"",
                    "type": "line"
                },
                {
                    "text": "KEY_INCREASE             = \"ctrl+shift+=\"",
                    "type": "line"
                },
                {
                    "text": "KEY_DECREASE             = \"ctrl+-\"",
                    "type": "line"
                },
                {
                    "text": "KEY_OPEN_SEARCH          = \"/\"",
                    "type": "line"
                },
                {
                    "text": "KEY_CREATE_NOTE          = \"c\"",
                    "type": "line"
                },
                {
                    "text": "KEY_EDIT_NOTE            = \"e\"",
                    "type": "line"
                },
                {
                    "text": "KEY_DELETE_NOTE          = \"d\"",
                    "type": "line"
                },
                {
                    "text": "KEY_UNLINK_NOTE          = \"u\"",
                    "type": "line"
                },
                {
                    "text": "KEY_OPEN_LINKS           = \"g\"",
                    "type": "line"
                },
                {
                    "text": "KEY_TOGGLE_TABLE_NETWORK = \"t\"",
                    "type": "line"
                },
                {
                    "text": "TAG_ATTRIBUTES           = [",
                    "type": "line"
                },
                {
                    "text": "    {\"name\": \"title\", \"textalign\": \"center\"},",
                    "type": "line"
                },
                {
                    "text": "]",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.967716",
            "type": "code"
        },
        "df59f68052454e8b8d648c503d0139ff": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class PygameWindow(WindowFocusMixin):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def set_title(self, title):",
                    "type": "line"
                },
                {
                    "text": "        pygame.display.set_caption(title)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def close(self):",
                    "type": "line"
                },
                {
                    "text": "        pygame.event.post(pygame.event.Event(pygame.QUIT))",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.806706",
            "type": "code"
        },
        "dfc61c882af9400c9501db2e1a5ee306": {
            "text": "`Box.update` gets passed a rect.",
            "timestamp_created": "2021-06-19T07:27:53.353145"
        },
        "e12a127c468640ac8711bf9d401cfd80": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class SearchResults(HBox):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, window, parent, db, overlay, note_settings, open_callback, hpadding):",
                    "type": "line"
                },
                {
                    "text": "        HBox.__init__(self, window, parent)",
                    "type": "line"
                },
                {
                    "text": "        self.db = db",
                    "type": "line"
                },
                {
                    "text": "        self.overlay = overlay",
                    "type": "line"
                },
                {
                    "text": "        self.note_settings = note_settings",
                    "type": "line"
                },
                {
                    "text": "        self.open_callback = open_callback",
                    "type": "line"
                },
                {
                    "text": "        self.hpadding = hpadding",
                    "type": "line"
                },
                {
                    "text": "        self.update_search_text(\"\")",
                    "type": "line"
                },
                {
                    "text": "        self.set_num_results(NUM_SEARCH_RESULTS)",
                    "type": "line"
                },
                {
                    "text": "        self.by_id = {}",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def inc_results(self):",
                    "type": "line"
                },
                {
                    "text": "        self.set_num_results(self.num_results + 1)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def dec_results(self):",
                    "type": "line"
                },
                {
                    "text": "        self.set_num_results(self.num_results - 1)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def set_num_results(self, num):",
                    "type": "line"
                },
                {
                    "text": "        self.num_results = max(3, min(12, num))",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def update_search_text(self, text):",
                    "type": "line"
                },
                {
                    "text": "        self.text = text",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def update(self, rect, elapsed_ms):",
                    "type": "line"
                },
                {
                    "text": "        self.wanted_height = int(round(",
                    "type": "line"
                },
                {
                    "text": "            (rect.width-self.hpadding) / self.num_results",
                    "type": "line"
                },
                {
                    "text": "            *",
                    "type": "line"
                },
                {
                    "text": "            self.note_settings.get_height_width_ratio()",
                    "type": "line"
                },
                {
                    "text": "        ))",
                    "type": "line"
                },
                {
                    "text": "        self._update_notes_list()",
                    "type": "line"
                },
                {
                    "text": "        HBox.update(self, rect, elapsed_ms)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _update_notes_list(self):",
                    "type": "line"
                },
                {
                    "text": "        by_id = {}",
                    "type": "line"
                },
                {
                    "text": "        self.clear()",
                    "type": "line"
                },
                {
                    "text": "        self.add(self.instantiate(Widget, width=self.hpadding/2))",
                    "type": "line"
                },
                {
                    "text": "        for note_id, note_data in self.db.get_notes(self.text)[:self.num_results]:",
                    "type": "line"
                },
                {
                    "text": "            if note_id in self.by_id:",
                    "type": "line"
                },
                {
                    "text": "                note = self.add(self.by_id[note_id])",
                    "type": "line"
                },
                {
                    "text": "            else:",
                    "type": "line"
                },
                {
                    "text": "                note = self.add(self.instantiate(Padding,",
                    "type": "line"
                },
                {
                    "text": "                    self.instantiate(SearchNote,",
                    "type": "line"
                },
                {
                    "text": "                        self.db,",
                    "type": "line"
                },
                {
                    "text": "                        self.overlay,",
                    "type": "line"
                },
                {
                    "text": "                        self.note_settings,",
                    "type": "line"
                },
                {
                    "text": "                        note_id,",
                    "type": "line"
                },
                {
                    "text": "                        self.open_callback",
                    "type": "line"
                },
                {
                    "text": "                    ),",
                    "type": "line"
                },
                {
                    "text": "                    hpadding=lambda rect: self.hpadding/2",
                    "type": "line"
                },
                {
                    "text": "                ))",
                    "type": "line"
                },
                {
                    "text": "            by_id[note_id] = note",
                    "type": "line"
                },
                {
                    "text": "        while len(self.children) <= self.num_results:",
                    "type": "line"
                },
                {
                    "text": "            self.add(self.instantiate(Widget))",
                    "type": "line"
                },
                {
                    "text": "        self.add(self.instantiate(Widget, width=self.hpadding/2))",
                    "type": "line"
                },
                {
                    "text": "        self.by_id = by_id",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.636280",
            "type": "code"
        },
        "e1c773d06f6947108931b33d87f75610": {
            "text": "I'm not sure if the game loop pattern is the ideal one. I'm also not sure if the division into the three methods are ideal. Another way to look at it is that it is all events. `update` and `draw` could be passed as events instead. But this is what we've got for now.",
            "timestamp_created": "2021-06-19T07:27:53.410411"
        },
        "e2921f12daf8427196865d7c7f11b732": {
            "chunkpath": [
                "base classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class ExternalTextEntry(object):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, text, editor_command):",
                    "type": "line"
                },
                {
                    "text": "        self.text = text",
                    "type": "line"
                },
                {
                    "text": "        self.f = tempfile.NamedTemporaryFile(suffix=\"-smartnotes-external-\")",
                    "type": "line"
                },
                {
                    "text": "        self.f.write(self.text.encode(\"utf-8\"))",
                    "type": "line"
                },
                {
                    "text": "        self.f.flush()",
                    "type": "line"
                },
                {
                    "text": "        self.p = subprocess.Popen([",
                    "type": "line"
                },
                {
                    "text": "            self.f.name if part is None else part",
                    "type": "line"
                },
                {
                    "text": "            for part",
                    "type": "line"
                },
                {
                    "text": "            in editor_command",
                    "type": "line"
                },
                {
                    "text": "        ])",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def check(self):",
                    "type": "line"
                },
                {
                    "text": "        self.f.seek(0)",
                    "type": "line"
                },
                {
                    "text": "        text = self.f.read().decode(\"utf-8\")",
                    "type": "line"
                },
                {
                    "text": "        if text != self.text:",
                    "type": "line"
                },
                {
                    "text": "            self.text = text",
                    "type": "line"
                },
                {
                    "text": "            self._new_text()",
                    "type": "line"
                },
                {
                    "text": "        if self.p.poll() is not None:",
                    "type": "line"
                },
                {
                    "text": "            self.f.close()",
                    "type": "line"
                },
                {
                    "text": "            return False",
                    "type": "line"
                },
                {
                    "text": "        return True",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _new_text(self):",
                    "type": "line"
                },
                {
                    "text": "        pass",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:54.107447",
            "type": "code"
        },
        "e4178f58125741c88e14bc1f690f539e": {
            "tags": [
                "title"
            ],
            "text": "Framework",
            "timestamp_created": "2021-06-19T07:27:53.110320"
        },
        "e883456fca884d17b24ac86d11fb2846": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class NetworkWidget(Widget):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, window, parent, db, overlay, note_settings):",
                    "type": "line"
                },
                {
                    "text": "        Widget.__init__(self, window, parent)",
                    "type": "line"
                },
                {
                    "text": "        self.navigation_history = parent",
                    "type": "line"
                },
                {
                    "text": "        self.db = db",
                    "type": "line"
                },
                {
                    "text": "        self.overlay = overlay",
                    "type": "line"
                },
                {
                    "text": "        self.note_settings = note_settings",
                    "type": "line"
                },
                {
                    "text": "        self.pos = (-1, -1)",
                    "type": "line"
                },
                {
                    "text": "        self.notes = []",
                    "type": "line"
                },
                {
                    "text": "        self.open_last_note()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def open_last_note(self):",
                    "type": "line"
                },
                {
                    "text": "        self.root_note = None",
                    "type": "line"
                },
                {
                    "text": "        for note_id, note_data in self.db.get_notes():",
                    "type": "line"
                },
                {
                    "text": "            self.open_note(note_id)",
                    "type": "line"
                },
                {
                    "text": "            break",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def process_event(self, event):",
                    "type": "line"
                },
                {
                    "text": "        if event.mouse_motion():",
                    "type": "line"
                },
                {
                    "text": "            self.pos = event.mouse_pos()",
                    "type": "line"
                },
                {
                    "text": "        if event.left_mouse_up(rect=self.rect):",
                    "type": "line"
                },
                {
                    "text": "            self.focus()",
                    "type": "line"
                },
                {
                    "text": "        if event.key_down(KEY_CREATE_NOTE) and self.has_focus():",
                    "type": "line"
                },
                {
                    "text": "            note_id = self.db.create_note(text=NEW_NOTE_TEXT)",
                    "type": "line"
                },
                {
                    "text": "            self.open_note(note_id)",
                    "type": "line"
                },
                {
                    "text": "            self.post_event(",
                    "type": "line"
                },
                {
                    "text": "                USER_EVENT_EXTERNAL_TEXT_ENTRY,",
                    "type": "line"
                },
                {
                    "text": "                entry=NoteText(self.db, note_id)",
                    "type": "line"
                },
                {
                    "text": "            )",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            Widget.process_event(self, event)",
                    "type": "line"
                },
                {
                    "text": "            for note in self.notes:",
                    "type": "line"
                },
                {
                    "text": "                note.process_event(event)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def open_note(self, note_id):",
                    "type": "line"
                },
                {
                    "text": "        if self.root_note is None or self.root_note.note_id != note_id:",
                    "type": "line"
                },
                {
                    "text": "            self.make_root(self.instantiate(",
                    "type": "line"
                },
                {
                    "text": "                NetworkNote,",
                    "type": "line"
                },
                {
                    "text": "                self,",
                    "type": "line"
                },
                {
                    "text": "                self.db,",
                    "type": "line"
                },
                {
                    "text": "                self.overlay,",
                    "type": "line"
                },
                {
                    "text": "                note_id,",
                    "type": "line"
                },
                {
                    "text": "                self.note_settings",
                    "type": "line"
                },
                {
                    "text": "            ))",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def make_root(self, note):",
                    "type": "line"
                },
                {
                    "text": "        if note is not self.root_note:",
                    "type": "line"
                },
                {
                    "text": "            self.root_note = note",
                    "type": "line"
                },
                {
                    "text": "            self.clear_quick_focus()",
                    "type": "line"
                },
                {
                    "text": "            self.navigation_history.register_note_opened(note.note_id)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def update(self, rect, elapsed_ms):",
                    "type": "line"
                },
                {
                    "text": "        Widget.update(self, rect, elapsed_ms)",
                    "type": "line"
                },
                {
                    "text": "        self.rect = rect",
                    "type": "line"
                },
                {
                    "text": "        self.stripe_rects = []",
                    "type": "line"
                },
                {
                    "text": "        padding = 8",
                    "type": "line"
                },
                {
                    "text": "        self.old_notes = self.notes",
                    "type": "line"
                },
                {
                    "text": "        self.notes = []",
                    "type": "line"
                },
                {
                    "text": "        self.links = []",
                    "type": "line"
                },
                {
                    "text": "        middle_stripe = self._stripe(rect, 0.3)",
                    "type": "line"
                },
                {
                    "text": "        if self.root_note and self.root_note.is_deleted():",
                    "type": "line"
                },
                {
                    "text": "            self.open_last_note()",
                    "type": "line"
                },
                {
                    "text": "        if self.root_note is None:",
                    "type": "line"
                },
                {
                    "text": "            return",
                    "type": "line"
                },
                {
                    "text": "        self.root_note.update(",
                    "type": "line"
                },
                {
                    "text": "            middle_stripe,",
                    "type": "line"
                },
                {
                    "text": "            elapsed_ms,",
                    "type": "line"
                },
                {
                    "text": "            \"center\",",
                    "type": "line"
                },
                {
                    "text": "            None",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "        self.notes.append(self.root_note)",
                    "type": "line"
                },
                {
                    "text": "        sizes = [",
                    "type": "line"
                },
                {
                    "text": "            (rect.width*0.05, rect.width*0.15),",
                    "type": "line"
                },
                {
                    "text": "            (rect.width*0.03, rect.width*0.1),",
                    "type": "line"
                },
                {
                    "text": "        ]",
                    "type": "line"
                },
                {
                    "text": "        self._stripe_recursive(",
                    "type": "line"
                },
                {
                    "text": "            self.root_note,",
                    "type": "line"
                },
                {
                    "text": "            middle_stripe,",
                    "type": "line"
                },
                {
                    "text": "            sizes,",
                    "type": "line"
                },
                {
                    "text": "            elapsed_ms,",
                    "type": "line"
                },
                {
                    "text": "            padding,",
                    "type": "line"
                },
                {
                    "text": "            \"left\"",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "        self._stripe_recursive(",
                    "type": "line"
                },
                {
                    "text": "            self.root_note,",
                    "type": "line"
                },
                {
                    "text": "            middle_stripe,",
                    "type": "line"
                },
                {
                    "text": "            sizes,",
                    "type": "line"
                },
                {
                    "text": "            elapsed_ms,",
                    "type": "line"
                },
                {
                    "text": "            padding,",
                    "type": "line"
                },
                {
                    "text": "            \"right\"",
                    "type": "line"
                },
                {
                    "text": "        )",
                    "type": "line"
                },
                {
                    "text": "        for link in self.links:",
                    "type": "line"
                },
                {
                    "text": "            link.update(None, elapsed_ms)",
                    "type": "line"
                },
                {
                    "text": "        for note in self.notes:",
                    "type": "line"
                },
                {
                    "text": "            note.clear_hidden_links(self.links)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _stripe_recursive(self, note, parent_rect, widths, elapsed_ms, padding, direction):",
                    "type": "line"
                },
                {
                    "text": "        if not widths:",
                    "type": "line"
                },
                {
                    "text": "            return",
                    "type": "line"
                },
                {
                    "text": "        parent_rect = parent_rect.inflate(0, -padding)",
                    "type": "line"
                },
                {
                    "text": "        if direction == \"left\":",
                    "type": "line"
                },
                {
                    "text": "            links = note.update_incoming()",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            links = note.update_outgoing()",
                    "type": "line"
                },
                {
                    "text": "        if links:",
                    "type": "line"
                },
                {
                    "text": "            space_width, stripe_width = widths[0]",
                    "type": "line"
                },
                {
                    "text": "            if direction == \"left\":",
                    "type": "line"
                },
                {
                    "text": "                rect = parent_rect.move(-space_width-stripe_width, 0)",
                    "type": "line"
                },
                {
                    "text": "                rect.width = stripe_width",
                    "type": "line"
                },
                {
                    "text": "            else:",
                    "type": "line"
                },
                {
                    "text": "                rect = parent_rect.move(parent_rect.width+space_width, 0)",
                    "type": "line"
                },
                {
                    "text": "                rect.width = stripe_width",
                    "type": "line"
                },
                {
                    "text": "            self.stripe_rects.append(rect)",
                    "type": "line"
                },
                {
                    "text": "            for link, y_center, height in self._vertical_stripes(rect, links):",
                    "type": "line"
                },
                {
                    "text": "                if direction == \"left\":",
                    "type": "line"
                },
                {
                    "text": "                    stripe = pygame.Rect(rect.x, 0, stripe_width, height)",
                    "type": "line"
                },
                {
                    "text": "                    linked = link.start",
                    "type": "line"
                },
                {
                    "text": "                else:",
                    "type": "line"
                },
                {
                    "text": "                    stripe = pygame.Rect(rect.x, 0, stripe_width, height)",
                    "type": "line"
                },
                {
                    "text": "                    linked = link.end",
                    "type": "line"
                },
                {
                    "text": "                stripe.centery = y_center",
                    "type": "line"
                },
                {
                    "text": "                linked.update(",
                    "type": "line"
                },
                {
                    "text": "                    stripe.inflate(0, -padding),",
                    "type": "line"
                },
                {
                    "text": "                    elapsed_ms,",
                    "type": "line"
                },
                {
                    "text": "                    direction,",
                    "type": "line"
                },
                {
                    "text": "                    note.get_center() if linked not in self.old_notes else None",
                    "type": "line"
                },
                {
                    "text": "                )",
                    "type": "line"
                },
                {
                    "text": "                self.notes.insert(0, linked)",
                    "type": "line"
                },
                {
                    "text": "                self.links.append(link)",
                    "type": "line"
                },
                {
                    "text": "                self._stripe_recursive(linked, stripe, widths[1:], elapsed_ms, int(padding*0.8), direction)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _vertical_stripes(self, rect, links):",
                    "type": "line"
                },
                {
                    "text": "        if rect.collidepoint(self.pos):",
                    "type": "line"
                },
                {
                    "text": "            even_height = rect.height / len(links)",
                    "type": "line"
                },
                {
                    "text": "            even_width = even_height * 5/3",
                    "type": "line"
                },
                {
                    "text": "            if rect.width < even_width:",
                    "type": "line"
                },
                {
                    "text": "                yield from self._vertical_stripes_even(rect, links)",
                    "type": "line"
                },
                {
                    "text": "            else:",
                    "type": "line"
                },
                {
                    "text": "                yield from self._vertical_stripes_fish_eye(rect, links)",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            yield from self._vertical_stripes_even(rect, links)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _vertical_stripes_fish_eye(self, rect, links):",
                    "type": "line"
                },
                {
                    "text": "        fractions = []",
                    "type": "line"
                },
                {
                    "text": "        even_height = rect.height / len(links)",
                    "type": "line"
                },
                {
                    "text": "        for index, link in enumerate(links):",
                    "type": "line"
                },
                {
                    "text": "            center_y = rect.y+index*even_height+even_height/2",
                    "type": "line"
                },
                {
                    "text": "            y_diff = abs(center_y - self.pos[1])",
                    "type": "line"
                },
                {
                    "text": "            fractions.append(max(even_height*3-y_diff, even_height))",
                    "type": "line"
                },
                {
                    "text": "        one_fraction_h = rect.height / sum(fractions)",
                    "type": "line"
                },
                {
                    "text": "        y = 0",
                    "type": "line"
                },
                {
                    "text": "        for fraction, link in zip(fractions, links):",
                    "type": "line"
                },
                {
                    "text": "            h = one_fraction_h * fraction",
                    "type": "line"
                },
                {
                    "text": "            yield (link, rect.y+y+h/2, h)",
                    "type": "line"
                },
                {
                    "text": "            y += h",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _vertical_stripes_even(self, rect, links):",
                    "type": "line"
                },
                {
                    "text": "        even_height = rect.height / len(links)",
                    "type": "line"
                },
                {
                    "text": "        y = 0",
                    "type": "line"
                },
                {
                    "text": "        for link in links:",
                    "type": "line"
                },
                {
                    "text": "            yield (link, rect.y+y+even_height/2, even_height)",
                    "type": "line"
                },
                {
                    "text": "            y += even_height",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def _stripe(self, rect, factor=0.2):",
                    "type": "line"
                },
                {
                    "text": "        stripe = rect.copy()",
                    "type": "line"
                },
                {
                    "text": "        stripe.width *= factor",
                    "type": "line"
                },
                {
                    "text": "        stripe.centerx = rect.centerx",
                    "type": "line"
                },
                {
                    "text": "        return stripe",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def draw(self, canvas):",
                    "type": "line"
                },
                {
                    "text": "        if DEBUG_NOTE_BORDER:",
                    "type": "line"
                },
                {
                    "text": "            for rect in self.stripe_rects:",
                    "type": "line"
                },
                {
                    "text": "                canvas.draw_rect(rect, (255, 255, 0), 2)",
                    "type": "line"
                },
                {
                    "text": "        for link in self.links:",
                    "type": "line"
                },
                {
                    "text": "            link.draw(canvas)",
                    "type": "line"
                },
                {
                    "text": "        for note in self.notes:",
                    "type": "line"
                },
                {
                    "text": "            note.draw(canvas)",
                    "type": "line"
                },
                {
                    "text": "        Widget.draw(self, canvas)",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.658627",
            "type": "code"
        },
        "e8fff187417d4e4d850f5663a8b3fb0a": {
            "chunkpath": [
                "end-to-end"
            ],
            "filepath": [
                "test_smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def test_search_bar(self):",
                    "type": "line"
                },
                {
                    "text": "    self.driver.iteration(events=[KeyEvent(\"/\")], elapsed_ms=100)",
                    "type": "line"
                },
                {
                    "text": "    self.assert_drawn_image_is(\"search_bar_half_way.png\")",
                    "type": "line"
                },
                {
                    "text": "    self.driver.iteration(elapsed_ms=100+MS_PER_FRAME+1)",
                    "type": "line"
                },
                {
                    "text": "    self.assert_drawn_image_is(\"search_bar_animation_completed.png\")",
                    "type": "line"
                },
                {
                    "text": "    self.driver.iteration(events=[KeyEvent(\"ctrl+g\")], elapsed_ms=100)",
                    "type": "line"
                },
                {
                    "text": "    self.assert_drawn_image_is(\"search_bar_half_way_hide.png\")",
                    "type": "line"
                },
                {
                    "text": "    self.driver.iteration(elapsed_ms=500)",
                    "type": "line"
                },
                {
                    "text": "    self.assert_drawn_image_is(\"main_screen.png\")",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.045458",
            "type": "code"
        },
        "e9202b7c4ada48afb2cc0ae453165209": {
            "tags": [
                "title"
            ],
            "text": "Automated Tests",
            "timestamp_created": "2021-06-19T07:27:52.983072"
        },
        "ee8e6fa26d14437490223461461e9fb4": {
            "tags": [
                "title"
            ],
            "text": "Interaction",
            "timestamp_created": "2021-06-19T07:27:53.219292"
        },
        "ef7d45347aca40338d1449c81de2b2c1": {
            "chunkpath": [
                "functions"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "def genid():",
                    "type": "line"
                },
                {
                    "text": "    return uuid.uuid4().hex",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.880110",
            "type": "code"
        },
        "f079bc508f69432a815b8cea0fb52319": {
            "chunkpath": [
                "constants"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "DEBUG_NOTE_BORDER = os.environ.get(\"DEBUG_NOTE_BORDER\") == \"yes\"",
                    "type": "line"
                },
                {
                    "text": "DEBUG_TEXT_BORDER = os.environ.get(\"DEBUG_TEXT_BORDER\") == \"yes\"",
                    "type": "line"
                },
                {
                    "text": "DEBUG_ANIMATIONS = os.environ.get(\"DEBUG_ANIMATIONS\") == \"yes\"",
                    "type": "line"
                },
                {
                    "text": "DEBUG = DEBUG_NOTE_BORDER or DEBUG_TEXT_BORDER or DEBUG_ANIMATIONS",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "USER_EVENT_CHECK_EXTERNAL      = pygame.USEREVENT",
                    "type": "line"
                },
                {
                    "text": "USER_EVENT_EXTERNAL_TEXT_ENTRY = pygame.USEREVENT + 1",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.613418",
            "type": "code"
        },
        "f2b1415b9cbb451a877ce3cb5785d01d": {
            "text": "This architecture has a few consequences documented below.",
            "timestamp_created": "2021-06-19T07:27:53.257464"
        },
        "f36e601cd1e64e2cb6ae34ae24831c84": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class Animation(object):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self):",
                    "type": "line"
                },
                {
                    "text": "        self.duration_ms = 1",
                    "type": "line"
                },
                {
                    "text": "        self.progress = 1",
                    "type": "line"
                },
                {
                    "text": "        self.last_consumed = True",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def start(self, duration_ms):",
                    "type": "line"
                },
                {
                    "text": "        if DEBUG_ANIMATIONS:",
                    "type": "line"
                },
                {
                    "text": "            duration_ms = duration_ms * 10",
                    "type": "line"
                },
                {
                    "text": "        self.duration_ms = duration_ms",
                    "type": "line"
                },
                {
                    "text": "        self.progress = 0",
                    "type": "line"
                },
                {
                    "text": "        self.last_consumed = False",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def reverse(self, duration_ms):",
                    "type": "line"
                },
                {
                    "text": "        if self.active():",
                    "type": "line"
                },
                {
                    "text": "            self.progress = self.duration_ms - self.progress",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            self.start(duration_ms)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def advance(self, elapsed_ms):",
                    "type": "line"
                },
                {
                    "text": "        percent = float(self.progress) / float(self.duration_ms)",
                    "type": "line"
                },
                {
                    "text": "        if self.progress == self.duration_ms:",
                    "type": "line"
                },
                {
                    "text": "            self.last_consumed = True",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            self.progress = min(self.duration_ms, self.progress+elapsed_ms)",
                    "type": "line"
                },
                {
                    "text": "        return percent",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def active(self):",
                    "type": "line"
                },
                {
                    "text": "        return self.progress < self.duration_ms or not self.last_consumed",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.695927",
            "type": "code"
        },
        "f67879ddcfe746b1b3f4fd9b4d460dbc": {
            "chunkpath": [
                "classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class OverlayAbort(ValueError):",
                    "type": "line"
                },
                {
                    "text": "    pass",
                    "type": "line"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:52.768285",
            "type": "code"
        },
        "f67f7af3474d431f9994be06dbb1bd61": {
            "tags": [
                "title"
            ],
            "text": "Search Bar",
            "timestamp_created": "2021-06-19T07:27:52.619575"
        },
        "fa07efa79a8e4b58b8a826bfbc628a5c": {
            "tags": [
                "title"
            ],
            "text": "Text Field",
            "timestamp_created": "2021-06-19T07:27:53.631955"
        },
        "fd5643308b3b4e00b07082d1aa948ed9": {
            "chunkpath": [
                "base base classes"
            ],
            "filepath": [
                "smartnotes.py"
            ],
            "fragments": [
                {
                    "text": "class Widget(object):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, window, parent, width=-1, height=-1, visible=True):",
                    "type": "line"
                },
                {
                    "text": "        self._window = window",
                    "type": "line"
                },
                {
                    "text": "        self._parent = parent",
                    "type": "line"
                },
                {
                    "text": "        self._width = width",
                    "type": "line"
                },
                {
                    "text": "        self._height = height",
                    "type": "line"
                },
                {
                    "text": "        self._visible = visible",
                    "type": "line"
                },
                {
                    "text": "        self.rect = pygame.Rect(0, 0, 0, 0)",
                    "type": "line"
                },
                {
                    "text": "        self.allotted_rect = pygame.Rect(0, 0, 0, 0)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def set_title(self, title):",
                    "type": "line"
                },
                {
                    "text": "        self._window.set_title(title)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def instantiate(self, cls, *args, **kwargs):",
                    "type": "line"
                },
                {
                    "text": "        return cls(self._window, self, *args, **kwargs)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def focus(self):",
                    "type": "line"
                },
                {
                    "text": "        self._window.set_focus(self)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def quick_focus(self):",
                    "type": "line"
                },
                {
                    "text": "        self._window.set_quick_focus(self)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def clear_quick_focus(self):",
                    "type": "line"
                },
                {
                    "text": "        return self._window.clear_quick_focus()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def has_focus(self):",
                    "type": "line"
                },
                {
                    "text": "        return self._window.is_focused(self)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def save_focus(self):",
                    "type": "line"
                },
                {
                    "text": "        self._window.save_focus()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def restore_focus(self):",
                    "type": "line"
                },
                {
                    "text": "        self._window.restore_focus()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def resize(self, width=None, height=None):",
                    "type": "line"
                },
                {
                    "text": "        if width is not None:",
                    "type": "line"
                },
                {
                    "text": "            self._width = width",
                    "type": "line"
                },
                {
                    "text": "        if height is not None:",
                    "type": "line"
                },
                {
                    "text": "            self._height = height",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_width(self):",
                    "type": "line"
                },
                {
                    "text": "        return self._width",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def get_height(self):",
                    "type": "line"
                },
                {
                    "text": "        return self._height",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def is_visible(self):",
                    "type": "line"
                },
                {
                    "text": "        return self._visible",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def toggle_visible(self):",
                    "type": "line"
                },
                {
                    "text": "        self._visible = not self._visible",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def quit(self):",
                    "type": "line"
                },
                {
                    "text": "        self._window.close()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def post_event(self, event_type, **kwargs):",
                    "type": "line"
                },
                {
                    "text": "        pygame.event.post(pygame.event.Event(event_type, **kwargs))",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "blank_lines_before": 1,
                    "path": [
                        "BaseWidget",
                        "interaction"
                    ],
                    "prefix": "    ",
                    "type": "chunk"
                }
            ],
            "text": "<code>",
            "timestamp_created": "2021-06-19T07:27:53.181465",
            "type": "code"
        }
    },
    "version": 1
}