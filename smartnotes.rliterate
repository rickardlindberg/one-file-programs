{
"root_page":{
"children":[
{
"children":[
{
"children":[],
"id":"08adce5dbad448b188b0f216518bed41",
"paragraphs":[
{
"chunkpath":[
"classes"
],
"filepath":[
"smartnotes.py"
],
"fragments":[
{
"text":"class Network(object):\n\n    def __init__(self, root_note):\n        self.root_note = root_note\n        self.pos = (-1, -1)\n        self.notes = []\n\n    def mouse_pos(self, pos):\n        self.pos = pos\n\n    def click(self, pos):\n        for note in self.notes:\n            if note.rect.collidepoint(pos):\n                self.make_root(note)\n                return\n\n    def make_root(self, node):\n        node.make_root()\n        self.root_note = node\n\n    def ",
"type":"code"
},
{
"id":"8cce3dd9f80645e6a8df699f872f1736",
"type":"variable"
},
{
"text":"(self, ",
"type":"code"
},
{
"id":"595003a78e1e4326ac5ef9aa70b79fd9",
"type":"variable"
},
{
"text":", ",
"type":"code"
},
{
"id":"7583be08dcbd4bcca0e6a043d3791710",
"type":"variable"
},
{
"text":"):\n        self.stripe_rects = []\n        padding = 8\n        self.full_width = int(",
"type":"code"
},
{
"id":"595003a78e1e4326ac5ef9aa70b79fd9",
"type":"variable"
},
{
"text":".width * 0.3)\n        self.old_nodes = self.notes\n        self.notes = []\n        self.links = []\n        middle_stripe = self._stripe(",
"type":"code"
},
{
"id":"595003a78e1e4326ac5ef9aa70b79fd9",
"type":"variable"
},
{
"text":", 0.3)\n        self.root_note.",
"type":"code"
},
{
"id":"8cce3dd9f80645e6a8df699f872f1736",
"type":"variable"
},
{
"text":"(\n            middle_stripe,\n            ",
"type":"code"
},
{
"id":"7583be08dcbd4bcca0e6a043d3791710",
"type":"variable"
},
{
"text":",\n            self.full_width,\n            \"center\",\n            None\n        )\n        self.notes.append(self.root_note)\n        sizes = [\n            (",
"type":"code"
},
{
"id":"595003a78e1e4326ac5ef9aa70b79fd9",
"type":"variable"
},
{
"text":".width*0.05, ",
"type":"code"
},
{
"id":"595003a78e1e4326ac5ef9aa70b79fd9",
"type":"variable"
},
{
"text":".width*0.15),\n            (",
"type":"code"
},
{
"id":"595003a78e1e4326ac5ef9aa70b79fd9",
"type":"variable"
},
{
"text":".width*0.03, ",
"type":"code"
},
{
"id":"595003a78e1e4326ac5ef9aa70b79fd9",
"type":"variable"
},
{
"text":".width*0.1),\n        ]\n        self._stripe_recursive(\n            self.root_note,\n            middle_stripe,\n            sizes,\n            ",
"type":"code"
},
{
"id":"7583be08dcbd4bcca0e6a043d3791710",
"type":"variable"
},
{
"text":",\n            padding,\n            \"left\"\n        )\n        self._stripe_recursive(\n            self.root_note,\n            middle_stripe,\n            sizes,\n            ",
"type":"code"
},
{
"id":"7583be08dcbd4bcca0e6a043d3791710",
"type":"variable"
},
{
"text":",\n            padding,\n            \"right\"\n        )\n        for link in self.links:\n            link.",
"type":"code"
},
{
"id":"8cce3dd9f80645e6a8df699f872f1736",
"type":"variable"
},
{
"text":"(None, ",
"type":"code"
},
{
"id":"7583be08dcbd4bcca0e6a043d3791710",
"type":"variable"
},
{
"text":")\n\n    def _stripe_recursive(self, note, parent_rect, widths, ",
"type":"code"
},
{
"id":"7583be08dcbd4bcca0e6a043d3791710",
"type":"variable"
},
{
"text":", padding, direction):\n        if not widths:\n            return\n        parent_rect = parent_rect.inflate(0, -padding)\n        if direction == \"left\":\n            links = note.incoming\n        else:\n            links = note.outgoing\n        if links:\n            space_width, stripe_width = widths[0]\n            if direction == \"left\":\n                rect = parent_rect.move(-space_width-stripe_width, 0)\n                rect.width = stripe_width\n            else:\n                rect = parent_rect.move(parent_rect.width+space_width, 0)\n                rect.width = stripe_width\n            self.stripe_rects.append(rect)\n            for link, y_center, height in self._vertical_stripes(rect, links):\n                if direction == \"left\":\n                    stripe = pygame.Rect(rect.x, 0, stripe_width, height)\n                    linked = link.start\n                else:\n                    stripe = pygame.Rect(rect.x, 0, stripe_width, height)\n                    linked = link.end\n                stripe.centery = y_center\n                linked.",
"type":"code"
},
{
"id":"8cce3dd9f80645e6a8df699f872f1736",
"type":"variable"
},
{
"text":"(\n                    stripe.inflate(0, -padding),\n                    ",
"type":"code"
},
{
"id":"7583be08dcbd4bcca0e6a043d3791710",
"type":"variable"
},
{
"text":",\n                    self.full_width,\n                    direction,\n                    note.rect if linked not in self.old_nodes else None\n                )\n                self.notes.insert(0, linked)\n                self.links.append(link)\n                self._stripe_recursive(linked, stripe, widths[1:], ",
"type":"code"
},
{
"id":"7583be08dcbd4bcca0e6a043d3791710",
"type":"variable"
},
{
"text":", int(padding*0.8), direction)\n\n    def _vertical_stripes(self, rect, links):\n        if rect.collidepoint(self.pos):\n            even_height = rect.height / len(links)\n            even_width = even_height * 5/3\n            if rect.width < even_width:\n                yield from self._vertical_stripes_even(rect, links)\n            else:\n                yield from self._vertical_stripes_fish_eye(rect, links)\n        else:\n            yield from self._vertical_stripes_even(rect, links)\n\n    def _vertical_stripes_fish_eye(self, rect, links):\n        fractions = []\n        even_height = rect.height / len(links)\n        for index, link in enumerate(links):\n            center_y = rect.y+index*even_height+even_height/2\n            y_diff = abs(center_y - self.pos[1])\n            fractions.append(max(even_height*3-y_diff, even_height))\n        one_fraction_h = rect.height / sum(fractions)\n        y = 0\n        for fraction, link in zip(fractions, links):\n            h = one_fraction_h * fraction\n            yield (link, rect.y+y+h/2, h)\n            y += h\n\n    def _vertical_stripes_even(self, rect, links):\n        even_height = rect.height / len(links)\n        y = 0\n        for link in links:\n            yield (link, rect.y+y+even_height/2, even_height)\n            y += even_height\n\n    def _stripe(self, rect, factor=0.2):\n        stripe = rect.copy()\n        stripe.width *= factor\n        stripe.centerx = rect.centerx\n        return stripe\n\n    def ",
"type":"code"
},
{
"id":"acab4c17f89046f4a05b14a8c35ad89a",
"type":"variable"
},
{
"text":"(self, screen):\n        if DEBUG_NOTE_BORDER:\n            for rect in self.stripe_rects:\n                pygame.draw.rect(screen, (255, 255, 0), rect, 2)\n        for link in self.links:\n            link.",
"type":"code"
},
{
"id":"acab4c17f89046f4a05b14a8c35ad89a",
"type":"variable"
},
{
"text":"(screen)\n        for note in self.notes:\n            note.",
"type":"code"
},
{
"id":"acab4c17f89046f4a05b14a8c35ad89a",
"type":"variable"
},
{
"text":"(screen)\n",
"type":"code"
}
],
"id":"3e4e2f6747ce48c0bd359d776fe37203",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"smartnotes.py"
],
"fragments":[
{
"text":"class Note(object):\n\n    def __init__(self, data):\n        self.data = data\n        self.incoming = []\n        self.outgoing = []\n        self.animation = Animation()\n        self.rect = None\n        self.target = None\n        self.previous = None\n        self.full_width = None\n\n    def _make_card(self, full_width):\n        if self.full_width == full_width:\n            return\n        self.full_width = full_width\n        size = (full_width, int(full_width*3/5))\n        border_size = 4\n        self.card = pygame.Surface(size, pygame.SRCALPHA)\n        border = pygame.Rect((0, 0), size)\n        border.width -= border_size\n        border.height -= border_size\n        border.x += border_size\n        border.y += border_size\n        pygame.draw.rect(self.card, (50, 50, 50, 150), border)\n        border.x -= border_size\n        border.y -= border_size\n        pygame.draw.rect(self.card, (250, 250, 250), border)\n        font = pygame.freetype.Font(\n            \"/usr/share/fonts/dejavu/DejaVuSerif.ttf\",\n            20\n        )\n        text, rect = font.render(self.data[\"text\"])\n        self.card.blit(text, rect.move(\n            pygame.math.Vector2(self.card.get_rect().center)-pygame.math.Vector2(rect.center)\n        ))\n\n    def make_root(self):\n        pass\n\n    def link(self, other_note, data):\n        return Link(data, self, other_note)\n\n    def ",
"type":"code"
},
{
"id":"8cce3dd9f80645e6a8df699f872f1736",
"type":"variable"
},
{
"text":"(self, ",
"type":"code"
},
{
"id":"595003a78e1e4326ac5ef9aa70b79fd9",
"type":"variable"
},
{
"text":", ",
"type":"code"
},
{
"id":"7583be08dcbd4bcca0e6a043d3791710",
"type":"variable"
},
{
"text":", full_width, side, fade_from_rect):\n        self.true_rect = ",
"type":"code"
},
{
"id":"595003a78e1e4326ac5ef9aa70b79fd9",
"type":"variable"
},
{
"text":"\n        self._make_card(full_width)\n        target = self._get_target(",
"type":"code"
},
{
"id":"595003a78e1e4326ac5ef9aa70b79fd9",
"type":"variable"
},
{
"text":", side)\n        if fade_from_rect:\n            self.rect = self.target = self.previous = fade_from_rect\n        if self.rect is None:\n            self.rect = self.target = self.previous = target\n        if target != self.target:\n            if self.animation.active():\n                self.rect = self.target\n            self.target = target\n            self.previous = self.rect\n            self.animation.start(3000 if DEBUG_ANIMATIONS else 300)\n        if self.animation.active():\n            x_diff = self.target.width - self.previous.width\n            y_diff = self.target.height - self.previous.height\n            percent = self.animation.advance(",
"type":"code"
},
{
"id":"7583be08dcbd4bcca0e6a043d3791710",
"type":"variable"
},
{
"text":")\n            self.rect = self.previous.inflate(x_diff*percent, y_diff*percent).move(\n                (\n                    pygame.math.Vector2(self.target.center)-\n                    pygame.math.Vector2(self.previous.center)\n                )*percent\n            )\n\n    def _get_target(self, ",
"type":"code"
},
{
"id":"595003a78e1e4326ac5ef9aa70b79fd9",
"type":"variable"
},
{
"text":", side):\n        target = self.card.get_rect()\n        target = target.fit(",
"type":"code"
},
{
"id":"595003a78e1e4326ac5ef9aa70b79fd9",
"type":"variable"
},
{
"text":")\n        if side == \"left\":\n            target.midright = ",
"type":"code"
},
{
"id":"595003a78e1e4326ac5ef9aa70b79fd9",
"type":"variable"
},
{
"text":".midright\n        elif side == \"right\":\n            target.midleft = ",
"type":"code"
},
{
"id":"595003a78e1e4326ac5ef9aa70b79fd9",
"type":"variable"
},
{
"text":".midleft\n        else:\n            target.center = ",
"type":"code"
},
{
"id":"595003a78e1e4326ac5ef9aa70b79fd9",
"type":"variable"
},
{
"text":".center\n        return target\n\n    def ",
"type":"code"
},
{
"id":"acab4c17f89046f4a05b14a8c35ad89a",
"type":"variable"
},
{
"text":"(self, screen):\n        screen.blit(\n            pygame.transform.smoothscale(self.card, self.rect.size),\n            self.rect\n        )\n        if DEBUG_NOTE_BORDER:\n            pygame.draw.rect(screen, (255, 0, 0), self.true_rect, 1)\n",
"type":"code"
}
],
"id":"59db46405da04e59a0fcc6395c11b4c7",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"smartnotes.py"
],
"fragments":[
{
"text":"class Link(object):\n\n    def __init__(self, data, start, end):\n        self.data = data\n        self.start = start\n        self.end = end\n        self.start.outgoing.append(self)\n        self.end.incoming.append(self)\n        self.start_pos = None\n        self.end_pos = None\n\n    def ",
"type":"code"
},
{
"id":"8cce3dd9f80645e6a8df699f872f1736",
"type":"variable"
},
{
"text":"(self, ",
"type":"code"
},
{
"id":"595003a78e1e4326ac5ef9aa70b79fd9",
"type":"variable"
},
{
"text":", ",
"type":"code"
},
{
"id":"7583be08dcbd4bcca0e6a043d3791710",
"type":"variable"
},
{
"text":"):\n        def draw(ctx, width, height):\n            if start.x < end.x:\n                startx = 0\n                endx = width\n                c1x = 0.6*width\n                c2x = 0.4*width\n            else:\n                startx = width\n                endx = 0\n                c1x = 0.4*width\n                c2x = 0.6*width\n            if start.y < end.y:\n                starty = PADDING\n                endy = height-PADDING\n                c1y = 0.0*(height-PADDING)+PADDING\n                c2y = 1.0*(height-PADDING)+PADDING\n            else:\n                starty = height-PADDING\n                endy = PADDING\n                c1y = 1.0*(height-PADDING)+PADDING\n                c2y = 0.0*(height-PADDING)+PADDING\n            ctx.move_to(startx, starty)\n            ctx.line_to(startx+0.02*(endx-startx), starty)\n            ctx.curve_to(c1x, c1y, c2x, c2y, endx-0.02*(endx-startx), endy)\n            ctx.line_to(endx, endy)\n            ctx.set_source_rgb(0.45, 0.5, 0.7)\n            ctx.set_line_width(1.5)\n            ctx.stroke()\n        start = pygame.math.Vector2(self.start.rect.midright)\n        end = pygame.math.Vector2(self.end.rect.midleft)\n        if start != self.start_pos or end != self.end_pos:\n            self.start_pos = start\n            self.end_pos = end\n            PADDING = 3\n            self.image = draw_cairo(\n                max(1, int(abs(start.x-end.x))),\n                max(1, int(abs(start.y-end.y)))+2*PADDING,\n                draw\n            )\n            self.pos = (\n                min(start.x, end.x),\n                min(start.y, end.y)-PADDING,\n            )\n\n    def ",
"type":"code"
},
{
"id":"acab4c17f89046f4a05b14a8c35ad89a",
"type":"variable"
},
{
"text":"(self, screen):\n        screen.blit(self.image, self.pos)\n",
"type":"code"
}
],
"id":"74ec1cb2afa248b797732e6d32a22aac",
"type":"code"
}
],
"title":"Network"
},
{
"children":[],
"id":"e0501d9c681a41d693f6304f1066c410",
"paragraphs":[
{
"chunkpath":[
"classes"
],
"filepath":[
"smartnotes.py"
],
"fragments":[
{
"text":"class DebugBar(object):\n\n    def __init__(self, clock):\n        self.height = 50\n        self.clock = clock\n        self.visible = True\n        self.animation = Animation()\n        self.font = pygame.freetype.SysFont(\n            pygame.freetype.get_default_font(),\n            18\n        )\n\n    def toggle(self):\n        self.visible = not self.visible\n        self.animation.start(200)\n\n    def ",
"type":"code"
},
{
"id":"8cce3dd9f80645e6a8df699f872f1736",
"type":"variable"
},
{
"text":"(self, ",
"type":"code"
},
{
"id":"595003a78e1e4326ac5ef9aa70b79fd9",
"type":"variable"
},
{
"text":", ",
"type":"code"
},
{
"id":"7583be08dcbd4bcca0e6a043d3791710",
"type":"variable"
},
{
"text":"):\n        if not self.visible and not self.animation.active():\n            return\n        self.image = pygame.Surface(",
"type":"code"
},
{
"id":"595003a78e1e4326ac5ef9aa70b79fd9",
"type":"variable"
},
{
"text":".size)\n        self.image.fill((84, 106, 134))\n        text, text_rect = self.font.render(\n            f\"",
"type":"code"
},
{
"id":"7583be08dcbd4bcca0e6a043d3791710",
"type":"variable"
},
{
"text":" = {",
"type":"code"
},
{
"id":"7583be08dcbd4bcca0e6a043d3791710",
"type":"variable"
},
{
"text":"} | fps = {int(round(self.clock.get_fps()))}\"\n        )\n        percent = self.animation.advance(",
"type":"code"
},
{
"id":"7583be08dcbd4bcca0e6a043d3791710",
"type":"variable"
},
{
"text":")\n        if self.visible:\n            alpha = int(255 * percent)\n        else:\n            alpha = 255 - int(255 * percent)\n        self.image.set_alpha(alpha)\n        self.image.blit(\n            text,\n            (\n                self.image.get_width()-text_rect.width-10,\n                self.image.get_height()/2-text_rect.height/2\n            )\n        )\n        self.rect = ",
"type":"code"
},
{
"id":"595003a78e1e4326ac5ef9aa70b79fd9",
"type":"variable"
},
{
"text":"\n\n    def ",
"type":"code"
},
{
"id":"acab4c17f89046f4a05b14a8c35ad89a",
"type":"variable"
},
{
"text":"(self, screen):\n        if not self.visible and not self.animation.active():\n            return\n        screen.blit(self.image, self.rect)\n",
"type":"code"
}
],
"id":"6a6c0cb5fc2046adb32e564a7508092d",
"type":"code"
}
],
"title":"Debug Bar"
}
],
"id":"6ea68f8a49284fe9b99b4d387ef13e94",
"paragraphs":[],
"title":"Scene Elements"
},
{
"children":[
{
"children":[],
"id":"11abaf23c6a34a8396a6c09893730e3e",
"paragraphs":[
{
"chunkpath":[
"classes"
],
"filepath":[
"smartnotes.py"
],
"fragments":[
{
"text":"class Animation(object):\n\n    def __init__(self):\n        self.duration_ms = 1\n        self.progress = 1\n        self.last_consumed = True\n\n    def start(self, duration_ms):\n        self.duration_ms = duration_ms\n        self.progress = 0\n        self.last_consumed = False\n\n    def advance(self, elapsed_ms):\n        percent = float(self.progress) / float(self.duration_ms)\n        if self.progress == self.duration_ms:\n            self.last_consumed = True\n        else:\n            self.progress = min(self.duration_ms, self.progress+elapsed_ms)\n        return percent\n\n    def active(self):\n        return self.progress < self.duration_ms or not self.last_consumed\n",
"type":"code"
}
],
"id":"182ef89406e74661b19b691b2e00b761",
"type":"code"
}
],
"title":"Animation"
},
{
"children":[],
"id":"c89f4fbdf1dd465090fc8229a498b6c3",
"paragraphs":[
{
"chunkpath":[
"functions"
],
"filepath":[
"smartnotes.py"
],
"fragments":[
{
"text":"def draw_cairo(width, height, fn):\n    surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, width, height)\n    ctx = cairo.Context(surface)\n    fn(ctx, width, height)\n    buf = io.BytesIO()\n    surface.write_to_png(buf)\n    buf.seek(0)\n    return pygame.image.load(buf).convert_alpha()\n    #surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, width, height)\n    #ctx = cairo.Context(surface)\n    #fn(ctx, width, height)\n    #buf = surface.get_data()\n    #image = pygame.image.frombuffer(buf, (width, height), \"ARGB\")\n    #return image\n",
"type":"code"
}
],
"id":"41a0aaa0ccd143e983455fb3e85f2451",
"type":"code"
}
],
"title":"Cairo"
}
],
"id":"0b150af1003a44dab87710c2149af734",
"paragraphs":[],
"title":"Pygame Utilities"
}
],
"id":"4b9f83dd3a9c454e917cf4c9431ea3ae",
"paragraphs":[
{
"chunkpath":[],
"filepath":[
"smartnotes.py"
],
"fragments":[
{
"text":"#!/usr/bin/env python3\n\nimport cairo\nimport io\nimport os\nimport pygame\nimport pygame.freetype\nimport sys\n\nDEBUG_NOTE_BORDER = os.environ.get(\"DEBUG_NOTE_BORDER\") == \"yes\"\nDEBUG_ANIMATIONS = os.environ.get(\"DEBUG_ANIMATIONS\") == \"yes\"\n\n",
"type":"code"
},
{
"blank_lines_before":1,
"path":[
"classes"
],
"prefix":"",
"type":"chunk"
},
{
"text":"\n",
"type":"code"
},
{
"blank_lines_before":1,
"path":[
"functions"
],
"prefix":"",
"type":"chunk"
},
{
"text":"\nif __name__ == \"__main__\":\n    main()\n",
"type":"code"
}
],
"id":"49b4e383e1854887a05f4d5b604f2ed4",
"type":"code"
},
{
"chunkpath":[
"functions"
],
"filepath":[
"smartnotes.py"
],
"fragments":[
{
"text":"def main():\n    pygame.init()\n    pygame.display.set_caption(\"Smart Notes\")\n    screen = pygame.display.set_mode((1280, 720))\n    clock = pygame.time.Clock()\n    root = Note({\"text\": \"root\"})\n    root.link(Note({\"text\": \"first child\"}), {})\n    second = Note({\"text\": \"second child\"})\n    root.link(second, {})\n    hidden = Note({\"text\": f\"hidden?\"})\n    hidden.link(second, {})\n    for i in range(10):\n        Note({\"text\": f\"pre {i}\"}).link(root, {})\n    for i in range(10):\n        Note({\"text\": f\"pre {i}\"}).link(hidden, {})\n    second.link(Note({\"text\": \"second 1\"}), {})\n    second.link(Note({\"text\": \"second 2\"}), {})\n    network = Network(root)\n    debug_bar = DebugBar(clock)\n    animation = Animation()\n    while True:\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                return\n            elif event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE:\n                debug_bar.toggle()\n                animation.start(200)\n            elif event.type == pygame.MOUSEMOTION:\n                network.mouse_pos(event.pos)\n            elif event.type == pygame.MOUSEBUTTONDOWN:\n                network.click(event.pos)\n        screen.fill((134, 169, 214))\n        ",
"type":"code"
},
{
"id":"7583be08dcbd4bcca0e6a043d3791710",
"type":"variable"
},
{
"text":" = clock.get_time()\n        rect = screen.get_rect()\n        network_rect = ",
"type":"code"
},
{
"id":"595003a78e1e4326ac5ef9aa70b79fd9",
"type":"variable"
},
{
"text":".copy()\n        if debug_bar.visible:\n            network_rect.height -= debug_bar.height*animation.advance(",
"type":"code"
},
{
"id":"7583be08dcbd4bcca0e6a043d3791710",
"type":"variable"
},
{
"text":")\n        else:\n            network_rect.height -= debug_bar.height-debug_bar.height*animation.advance(",
"type":"code"
},
{
"id":"7583be08dcbd4bcca0e6a043d3791710",
"type":"variable"
},
{
"text":")\n        network.",
"type":"code"
},
{
"id":"8cce3dd9f80645e6a8df699f872f1736",
"type":"variable"
},
{
"text":"(network_rect, ",
"type":"code"
},
{
"id":"7583be08dcbd4bcca0e6a043d3791710",
"type":"variable"
},
{
"text":")\n        debug_bar_rect = ",
"type":"code"
},
{
"id":"595003a78e1e4326ac5ef9aa70b79fd9",
"type":"variable"
},
{
"text":".copy()\n        debug_bar_rect.height = debug_bar.height\n        debug_bar_rect.top = network_rect.bottom\n        debug_bar.",
"type":"code"
},
{
"id":"8cce3dd9f80645e6a8df699f872f1736",
"type":"variable"
},
{
"text":"(debug_bar_rect, ",
"type":"code"
},
{
"id":"7583be08dcbd4bcca0e6a043d3791710",
"type":"variable"
},
{
"text":")\n        network.",
"type":"code"
},
{
"id":"acab4c17f89046f4a05b14a8c35ad89a",
"type":"variable"
},
{
"text":"(screen)\n        debug_bar.",
"type":"code"
},
{
"id":"acab4c17f89046f4a05b14a8c35ad89a",
"type":"variable"
},
{
"text":"(screen)\n        pygame.display.flip()\n        clock.tick(60)\n",
"type":"code"
}
],
"id":"b8766f8594d4401485c6292c0f2cbeec",
"type":"code"
}
],
"title":"Smart Notes"
},
"variables":{
"595003a78e1e4326ac5ef9aa70b79fd9":"rect",
"7583be08dcbd4bcca0e6a043d3791710":"elapsed_ms",
"8cce3dd9f80645e6a8df699f872f1736":"update",
"acab4c17f89046f4a05b14a8c35ad89a":"draw"
}
}