{
"root_page":{
"children":[
{
"children":[],
"id":"11abaf23c6a34a8396a6c09893730e3e",
"paragraphs":[
{
"chunkpath":[
"classes"
],
"filepath":[
"smartnotes.py"
],
"fragments":[
{
"text":"class Animation(object):\n\n    def __init__(self):\n        self.duration_ms = 1\n        self.progress = 1\n        self.last_consumed = True\n\n    def start(self, duration_ms):\n        self.duration_ms = duration_ms\n        self.progress = 0\n        self.last_consumed = False\n\n    def advance(self, elapsed_ms):\n        percent = float(self.progress) / float(self.duration_ms)\n        if self.progress == self.duration_ms:\n            self.last_consumed = True\n        else:\n            self.progress = min(self.duration_ms, self.progress+elapsed_ms)\n        return percent\n\n    def active(self):\n        return self.progress < self.duration_ms or not self.last_consumed\n",
"type":"code"
}
],
"id":"182ef89406e74661b19b691b2e00b761",
"type":"code"
}
],
"title":"Animation"
}
],
"id":"4b9f83dd3a9c454e917cf4c9431ea3ae",
"paragraphs":[
{
"chunkpath":[],
"filepath":[
"smartnotes.py"
],
"fragments":[
{
"text":"#!/usr/bin/env python3\n\nimport pygame\nimport pygame.freetype\nimport sys\n\n",
"type":"code"
},
{
"blank_lines_before":1,
"path":[
"classes"
],
"prefix":"",
"type":"chunk"
},
{
"text":"\n",
"type":"code"
},
{
"blank_lines_before":1,
"path":[
"functions"
],
"prefix":"",
"type":"chunk"
},
{
"text":"\nif __name__ == \"__main__\":\n    main()\n",
"type":"code"
}
],
"id":"49b4e383e1854887a05f4d5b604f2ed4",
"type":"code"
},
{
"chunkpath":[
"functions"
],
"filepath":[
"smartnotes.py"
],
"fragments":[
{
"text":"def main():\n    pygame.init()\n    pygame.display.set_caption(\"Smart Notes\")\n    screen = pygame.display.set_mode((1280, 720))\n    clock = pygame.time.Clock()\n    root = Note({\"text\": \"root\"})\n    root.link(Note({\"text\": \"first child\"}), {\"label\": \"foo\"})\n    second = Note({\"text\": \"second child\"})\n    root.link(second, {\"label\": \"bar\"})\n    Note({\"text\": f\"hidden?\"}).link(second, {\"label\": \"bar\"})\n    for i in range(5):\n        Note({\"text\": f\"pre {i}\"}).link(root, {\"label\": f\"haha {i}\"})\n    second.link(Note({\"text\": \"second 1\"}), {\"label\": \"second 1\"})\n    second.link(Note({\"text\": \"second 2\"}), {\"label\": \"second 2\"})\n    network = Network(root)\n    debug_bar = DebugBar(clock)\n    animation = Animation()\n    while True:\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                return\n            elif event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE:\n                debug_bar.toggle()\n                animation.start(200)\n            elif event.type == pygame.KEYDOWN and event.key == pygame.K_F1:\n                if network.root_note == root:\n                    network.make_root(second)\n                else:\n                    network.make_root(root)\n        screen.fill((100, 200, 50))\n        ",
"type":"code"
},
{
"id":"7583be08dcbd4bcca0e6a043d3791710",
"type":"variable"
},
{
"text":" = clock.get_time()\n        rect = screen.get_rect()\n        network_rect = ",
"type":"code"
},
{
"id":"595003a78e1e4326ac5ef9aa70b79fd9",
"type":"variable"
},
{
"text":".copy()\n        if debug_bar.visible:\n            network_rect.height -= debug_bar.height*animation.advance(",
"type":"code"
},
{
"id":"7583be08dcbd4bcca0e6a043d3791710",
"type":"variable"
},
{
"text":")\n        else:\n            network_rect.height -= debug_bar.height-debug_bar.height*animation.advance(",
"type":"code"
},
{
"id":"7583be08dcbd4bcca0e6a043d3791710",
"type":"variable"
},
{
"text":")\n        network.",
"type":"code"
},
{
"id":"8cce3dd9f80645e6a8df699f872f1736",
"type":"variable"
},
{
"text":"(network_rect, ",
"type":"code"
},
{
"id":"7583be08dcbd4bcca0e6a043d3791710",
"type":"variable"
},
{
"text":")\n        debug_bar_rect = ",
"type":"code"
},
{
"id":"595003a78e1e4326ac5ef9aa70b79fd9",
"type":"variable"
},
{
"text":".copy()\n        debug_bar_rect.height = debug_bar.height\n        debug_bar_rect.top = network_rect.bottom\n        debug_bar.",
"type":"code"
},
{
"id":"8cce3dd9f80645e6a8df699f872f1736",
"type":"variable"
},
{
"text":"(debug_bar_rect, ",
"type":"code"
},
{
"id":"7583be08dcbd4bcca0e6a043d3791710",
"type":"variable"
},
{
"text":")\n        network.",
"type":"code"
},
{
"id":"acab4c17f89046f4a05b14a8c35ad89a",
"type":"variable"
},
{
"text":"(screen)\n        debug_bar.",
"type":"code"
},
{
"id":"acab4c17f89046f4a05b14a8c35ad89a",
"type":"variable"
},
{
"text":"(screen)\n        pygame.display.flip()\n        clock.tick(60)\n",
"type":"code"
}
],
"id":"b8766f8594d4401485c6292c0f2cbeec",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"smartnotes.py"
],
"fragments":[
{
"text":"class Note(object):\n\n    def __init__(self, data):\n        self.data = data\n        self.incoming = []\n        self.outgoing = []\n        self._make_card()\n        self.image = self.card\n        self.animation = Animation()\n        self.rect = None\n        self.target = None\n        self.previous = None\n\n    def _make_card(self, factor=50):\n        size = (5*factor, 3*factor)\n        border_size = 4\n        self.card = pygame.Surface(size, pygame.SRCALPHA)\n        border = pygame.Rect((0, 0), size)\n        border.width -= border_size\n        border.height -= border_size\n        border.x += border_size\n        border.y += border_size\n        pygame.draw.rect(self.card, (50, 50, 50, 150), border)\n        border.x -= border_size\n        border.y -= border_size\n        pygame.draw.rect(self.card, (250, 250, 250), border)\n\n    def make_root(self):\n        pass\n\n    def link(self, other_note, data):\n        return Link(data, self, other_note)\n\n    def ",
"type":"code"
},
{
"id":"8cce3dd9f80645e6a8df699f872f1736",
"type":"variable"
},
{
"text":"(self, ",
"type":"code"
},
{
"id":"595003a78e1e4326ac5ef9aa70b79fd9",
"type":"variable"
},
{
"text":", ",
"type":"code"
},
{
"id":"7583be08dcbd4bcca0e6a043d3791710",
"type":"variable"
},
{
"text":"):\n        rect = self.image.get_rect().move(\n            pygame.math.Vector2(",
"type":"code"
},
{
"id":"595003a78e1e4326ac5ef9aa70b79fd9",
"type":"variable"
},
{
"text":".center) -\n            pygame.math.Vector2(self.image.get_rect().center)\n        )\n        if self.rect is None:\n            self.rect = self.target = self.previous = rect\n        elif rect != self.target:\n            if self.animation.active():\n                self.rect = self.target\n            self.target = rect\n            self.previous = self.rect\n            self.animation.start(200)\n        if self.animation.active():\n            self.rect = self.previous.move(\n                (\n                    pygame.math.Vector2(self.target.center)-\n                    pygame.math.Vector2(self.previous.center)\n                )*self.animation.advance(",
"type":"code"
},
{
"id":"7583be08dcbd4bcca0e6a043d3791710",
"type":"variable"
},
{
"text":")\n            )\n\n    def ",
"type":"code"
},
{
"id":"acab4c17f89046f4a05b14a8c35ad89a",
"type":"variable"
},
{
"text":"(self, screen):\n        font = pygame.freetype.SysFont(\n            pygame.freetype.get_default_font(),\n            11\n        )\n        text, rect = font.render(self.data[\"text\"])\n        screen.blit(self.image, self.rect)\n        screen.blit(text, rect.move(\n            pygame.math.Vector2(self.rect.center)-pygame.math.Vector2(rect.center)\n        ))\n",
"type":"code"
}
],
"id":"59db46405da04e59a0fcc6395c11b4c7",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"smartnotes.py"
],
"fragments":[
{
"text":"class Network(object):\n\n    def __init__(self, root_note):\n        self.root_note = root_note\n\n    def make_root(self, node):\n        node.make_root()\n        self.root_note = node\n\n    def ",
"type":"code"
},
{
"id":"8cce3dd9f80645e6a8df699f872f1736",
"type":"variable"
},
{
"text":"(self, ",
"type":"code"
},
{
"id":"595003a78e1e4326ac5ef9aa70b79fd9",
"type":"variable"
},
{
"text":", ",
"type":"code"
},
{
"id":"7583be08dcbd4bcca0e6a043d3791710",
"type":"variable"
},
{
"text":"):\n        self.notes = []\n        self.links = []\n        middle_stripe = self._stripe(",
"type":"code"
},
{
"id":"595003a78e1e4326ac5ef9aa70b79fd9",
"type":"variable"
},
{
"text":", 0.4)\n        self.root_note.",
"type":"code"
},
{
"id":"8cce3dd9f80645e6a8df699f872f1736",
"type":"variable"
},
{
"text":"(middle_stripe, ",
"type":"code"
},
{
"id":"7583be08dcbd4bcca0e6a043d3791710",
"type":"variable"
},
{
"text":")\n        self.notes.append(self.root_note)\n        self._stripe_left(self.root_note, middle_stripe, [",
"type":"code"
},
{
"id":"595003a78e1e4326ac5ef9aa70b79fd9",
"type":"variable"
},
{
"text":".width*0.2, ",
"type":"code"
},
{
"id":"595003a78e1e4326ac5ef9aa70b79fd9",
"type":"variable"
},
{
"text":".width*0.1], ",
"type":"code"
},
{
"id":"7583be08dcbd4bcca0e6a043d3791710",
"type":"variable"
},
{
"text":")\n        self._stripe_right(self.root_note, middle_stripe, [",
"type":"code"
},
{
"id":"595003a78e1e4326ac5ef9aa70b79fd9",
"type":"variable"
},
{
"text":".width*0.2, ",
"type":"code"
},
{
"id":"595003a78e1e4326ac5ef9aa70b79fd9",
"type":"variable"
},
{
"text":".width*0.1], ",
"type":"code"
},
{
"id":"7583be08dcbd4bcca0e6a043d3791710",
"type":"variable"
},
{
"text":")\n\n    def _stripe_left(self, note, rect, widths, ",
"type":"code"
},
{
"id":"7583be08dcbd4bcca0e6a043d3791710",
"type":"variable"
},
{
"text":"):\n        if not widths:\n            return\n        if note.incoming:\n            stripe = rect.copy()\n            stripe.width = widths[0]\n            stripe.right = rect.left\n            stripe.height = rect.height / len(note.incoming)\n            for link in note.incoming:\n                link.start.",
"type":"code"
},
{
"id":"8cce3dd9f80645e6a8df699f872f1736",
"type":"variable"
},
{
"text":"(stripe, ",
"type":"code"
},
{
"id":"7583be08dcbd4bcca0e6a043d3791710",
"type":"variable"
},
{
"text":")\n                self.notes.append(link.start)\n                self.links.append(link)\n                self._stripe_left(link.start, stripe, widths[1:], ",
"type":"code"
},
{
"id":"7583be08dcbd4bcca0e6a043d3791710",
"type":"variable"
},
{
"text":")\n                stripe = stripe.move(0, stripe.height)\n\n    def _stripe_right(self, note, rect, widths, ",
"type":"code"
},
{
"id":"7583be08dcbd4bcca0e6a043d3791710",
"type":"variable"
},
{
"text":"):\n        if not widths:\n            return\n        if note.outgoing:\n            stripe = rect.copy()\n            stripe.width = widths[0]\n            stripe.left = rect.right\n            stripe.height = rect.height / len(note.outgoing)\n            for link in note.outgoing:\n                link.end.",
"type":"code"
},
{
"id":"8cce3dd9f80645e6a8df699f872f1736",
"type":"variable"
},
{
"text":"(stripe, ",
"type":"code"
},
{
"id":"7583be08dcbd4bcca0e6a043d3791710",
"type":"variable"
},
{
"text":")\n                self.notes.append(link.end)\n                self.links.append(link)\n                self._stripe_right(link.end, stripe, widths[1:], ",
"type":"code"
},
{
"id":"7583be08dcbd4bcca0e6a043d3791710",
"type":"variable"
},
{
"text":")\n                stripe = stripe.move(0, stripe.height)\n\n    def _stripe(self, rect, factor=0.2):\n        stripe = rect.copy()\n        stripe.width *= factor\n        stripe.centerx = rect.centerx\n        return stripe\n\n    def ",
"type":"code"
},
{
"id":"acab4c17f89046f4a05b14a8c35ad89a",
"type":"variable"
},
{
"text":"(self, screen):\n        for note in self.notes:\n            note.",
"type":"code"
},
{
"id":"acab4c17f89046f4a05b14a8c35ad89a",
"type":"variable"
},
{
"text":"(screen)\n        for link in self.links:\n            link.",
"type":"code"
},
{
"id":"acab4c17f89046f4a05b14a8c35ad89a",
"type":"variable"
},
{
"text":"(screen)\n",
"type":"code"
}
],
"id":"3e4e2f6747ce48c0bd359d776fe37203",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"smartnotes.py"
],
"fragments":[
{
"text":"class Link(object):\n\n    def __init__(self, data, start, end):\n        self.data = data\n        self.start = start\n        self.end = end\n        self.start.outgoing.append(self)\n        self.end.incoming.append(self)\n        self.font = pygame.freetype.SysFont(\n            pygame.freetype.get_default_font(),\n            10\n        )\n\n    def ",
"type":"code"
},
{
"id":"8cce3dd9f80645e6a8df699f872f1736",
"type":"variable"
},
{
"text":"(self, ",
"type":"code"
},
{
"id":"595003a78e1e4326ac5ef9aa70b79fd9",
"type":"variable"
},
{
"text":", ",
"type":"code"
},
{
"id":"7583be08dcbd4bcca0e6a043d3791710",
"type":"variable"
},
{
"text":"):\n        pass\n\n    def ",
"type":"code"
},
{
"id":"acab4c17f89046f4a05b14a8c35ad89a",
"type":"variable"
},
{
"text":"(self, screen):\n        start = pygame.math.Vector2(self.start.rect.midright)\n        end = pygame.math.Vector2(self.end.rect.midleft)\n        norm_arrow = (start-end).normalize()*8\n        left_arrow = norm_arrow.rotate(30)+end\n        right_arrow = norm_arrow.rotate(-30)+end\n        pygame.draw.aaline(\n            screen,\n            (0, 0, 0),\n            start,\n            end,\n        )\n        pygame.draw.aaline(\n            screen,\n            (0, 0, 0),\n            end,\n            left_arrow,\n        )\n        pygame.draw.aaline(\n            screen,\n            (0, 0, 0),\n            end,\n            right_arrow,\n        )\n        if self.data.get(\"label\"):\n            direction = end - start\n            text, rect = self.font.render(\n                self.data[\"label\"],\n                rotation=-int(pygame.math.Vector2((0, 0)).angle_to(direction))\n            )\n            screen.blit(text, rect.move(start-rect.center+direction/2))\n",
"type":"code"
}
],
"id":"74ec1cb2afa248b797732e6d32a22aac",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"smartnotes.py"
],
"fragments":[
{
"text":"class DebugBar(object):\n\n    def __init__(self, clock):\n        self.height = 50\n        self.clock = clock\n        self.visible = True\n        self.animation = Animation()\n        self.font = pygame.freetype.SysFont(\n            pygame.freetype.get_default_font(),\n            18\n        )\n\n    def toggle(self):\n        self.visible = not self.visible\n        self.animation.start(200)\n\n    def ",
"type":"code"
},
{
"id":"8cce3dd9f80645e6a8df699f872f1736",
"type":"variable"
},
{
"text":"(self, ",
"type":"code"
},
{
"id":"595003a78e1e4326ac5ef9aa70b79fd9",
"type":"variable"
},
{
"text":", ",
"type":"code"
},
{
"id":"7583be08dcbd4bcca0e6a043d3791710",
"type":"variable"
},
{
"text":"):\n        if not self.visible and not self.animation.active():\n            return\n        self.image = pygame.Surface(",
"type":"code"
},
{
"id":"595003a78e1e4326ac5ef9aa70b79fd9",
"type":"variable"
},
{
"text":".size)\n        self.image.fill((100, 100, 100))\n        text, text_rect = self.font.render(\n            f\"",
"type":"code"
},
{
"id":"7583be08dcbd4bcca0e6a043d3791710",
"type":"variable"
},
{
"text":" = {",
"type":"code"
},
{
"id":"7583be08dcbd4bcca0e6a043d3791710",
"type":"variable"
},
{
"text":"} | fps = {int(round(self.clock.get_fps()))}\"\n        )\n        percent = self.animation.advance(",
"type":"code"
},
{
"id":"7583be08dcbd4bcca0e6a043d3791710",
"type":"variable"
},
{
"text":")\n        if self.visible:\n            alpha = int(255 * percent)\n        else:\n            alpha = 255 - int(255 * percent)\n        self.image.set_alpha(alpha)\n        self.image.blit(\n            text,\n            (\n                self.image.get_width()-text_rect.width-10,\n                self.image.get_height()/2-text_rect.height/2\n            )\n        )\n        self.rect = ",
"type":"code"
},
{
"id":"595003a78e1e4326ac5ef9aa70b79fd9",
"type":"variable"
},
{
"text":"\n\n    def ",
"type":"code"
},
{
"id":"acab4c17f89046f4a05b14a8c35ad89a",
"type":"variable"
},
{
"text":"(self, screen):\n        if not self.visible and not self.animation.active():\n            return\n        screen.blit(self.image, self.rect)\n",
"type":"code"
}
],
"id":"6a6c0cb5fc2046adb32e564a7508092d",
"type":"code"
}
],
"title":"Smart Notes"
},
"variables":{
"595003a78e1e4326ac5ef9aa70b79fd9":"rect",
"7583be08dcbd4bcca0e6a043d3791710":"elapsed_ms",
"8cce3dd9f80645e6a8df699f872f1736":"update",
"acab4c17f89046f4a05b14a8c35ad89a":"draw"
}
}