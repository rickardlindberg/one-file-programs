#!/usr/bin/env python3

import os

os.environ["PYGAME_HIDE_SUPPORT_PROMPT"] = "yes"

import cairo
import pygame

class PygameCairoEngine:

    def run(self, app):
        pygame.init()
        pygame.key.set_repeat(500, 30)
        screen = pygame.display.set_mode((1280, 720), pygame.RESIZABLE)
        clock = pygame.time.Clock()
        pygame_cairo_surface = self.create_pygame_cairo_surface(screen)
        while True:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    return
                elif event.type == pygame.VIDEORESIZE:
                    pygame_cairo_surface = self.create_pygame_cairo_surface(screen)
                else:
                    app.event(PygameEvent(event))
            app.update(clock.get_time())
            pygame_cairo_surface.lock()
            app.draw(
                CairoCanvas(
                    cairo.Context(self.create_cairo_image(pygame_cairo_surface)),
                    Rectangle.from_xywh(*screen.get_rect())
                )
            )
            pygame_cairo_surface.unlock()
            screen.blit(pygame_cairo_surface, (0, 0))
            pygame.display.flip()
            clock.tick(60)

    def create_pygame_cairo_surface(self, screen):
        return pygame.Surface(
            screen.get_size(),
            depth=32,
            masks=(
                0x00FF0000,
                0x0000FF00,
                0x000000FF,
                0x00000000,
            )
        )

    def create_cairo_image(self, pygame_cairo_surface):
        return cairo.ImageSurface.create_for_data(
            pygame_cairo_surface.get_buffer(),
            cairo.FORMAT_ARGB32,
            *pygame_cairo_surface.get_size()
        )

class PygameEvent(object):

    def __init__(self, event):
        self.event = event

    def mouse_motion(self, inside=None):
        return (
            self.event.type == pygame.MOUSEMOTION and
            (inside is None or inside.contains(self.mouse_point()))
        )

    def left_mouse_down(self, inside=None):
        return (
            self.event.type == pygame.MOUSEBUTTONDOWN and
            self.event.button == 1 and
            (inside is None or inside.contains(self.mouse_point()))
        )

    def left_mouse_up(self, inside=None):
        return (
            self.event.type == pygame.MOUSEBUTTONUP and
            self.event.button == 1 and
            (inside is None or inside.contains(self.mouse_point()))
        )

    def mouse_point(self):
        return Point(*self.event.pos)

    def key_down_text(self):
        return (
            self.event.type == pygame.KEYDOWN and
            self.event.unicode
        )

    def key_down(self, description=None):
        if description is None:
            return self.event.type == pygame.KEYDOWN
        parts = description.split("+")
        ctrl = False
        shift = False
        alt = False
        while parts:
            part = parts.pop(0)
            if part == "ctrl":
                ctrl = True
            elif part == "shift":
                shift = True
            elif part == "alt":
                alt = True
            elif not parts:
                key = pygame.key.key_code(part)
            else:
                raise ValueError("unknown part {}".format(part))
        return (
            self.event.type == pygame.KEYDOWN and
            self.event.key == key and
            bool(self.event.mod & pygame.KMOD_CTRL) == ctrl and
            bool(self.event.mod & pygame.KMOD_SHIFT) == shift and
            bool(self.event.mod & pygame.KMOD_ALT) == alt
        )

    def window_gained_focus(self):
        return (
            self.event.type == pygame.ACTIVEEVENT and
            self.event.state == 1 and
            self.event.gain
        )

    def window_lost_focus(self):
        return (
            self.event.type == pygame.ACTIVEEVENT and
            self.event.state == 1 and
            not self.event.gain
        )

class CairoCanvas(object):

    def __init__(self, ctx, rectangle):
        self.ctx = ctx
        self.rectangle = rectangle

    def with_rectangle(self, fn):
        return CairoCanvas(self.ctx, fn(self.rectangle))

    def deflate(self, *args, **kwargs):
        return CairoCanvas(self.ctx, self.rectangle.deflate(*args, **kwargs))

    def rows(self, *args, **kwargs):
        for rectangle, item in self.rectangle.rows(*args, **kwargs):
            item["fn"](CairoCanvas(self.ctx, rectangle))

    def columns(self, *args, **kwargs):
        for rectangle, item in self.rectangle.columns(*args, **kwargs):
            item["fn"](CairoCanvas(self.ctx, rectangle))

    def fill(self, **kwargs):
        self.apply_color(**kwargs)
        self.rectangle.cairo_path(self.ctx)
        self.ctx.fill()

    def stroke(self, **kwargs):
        self.apply_color(**kwargs)
        self.rectangle.cairo_path(self.ctx)
        self.ctx.stroke()

    def text(self, text,
        size=40,
        boxalign="center",
        face=None,
        textalign="left",
        split=True,
        color=(0, 0, 0)
    ):
        box = self.rectangle
        if box.height <= 0:
            return
        if not text.strip():
            return
        if face is not None:
            self.ctx.select_font_face(face)
        self.apply_color(color=color)
        metrics, scale_factor = self._find_best_fit(text, box, split, size)
        self.ctx.save()
        xoffset = 0
        yoffset = 0
        self._translate_box(box, metrics["width"]*scale_factor, metrics["height"]*scale_factor, boxalign)
        self.ctx.scale(scale_factor, scale_factor)
        for x, y, width, part in metrics["parts"]:
            if not split:
                x = 0
            if textalign == "center":
                x_align_offset = (metrics["width"]-width)/2
            elif textalign == "right":
                x_align_offset = metrics["width"]-width
            else:
                x_align_offset = 0
            self.ctx.move_to(x+x_align_offset, y)
            self.ctx.show_text(part)
        self.ctx.restore()

    def _find_best_fit(self, text, box, split, size):
        self.ctx.set_font_size(size)
        if split:
            metrics = self._find_best_split(text, box)
        else:
            metrics = self._get_metrics(text.splitlines())
        scale_factor = box.width / metrics["width"]
        if metrics["height"] * scale_factor > box.height:
            scale_factor = box.height / metrics["height"]
        scale_factor = min(scale_factor, 1)
        size = int(size*scale_factor)
        if scale_factor < 1:
            while True:
                self.ctx.set_font_size(size)
                metrics = self._get_metrics([x[-1] for x in metrics["parts"]])
                if size < 2:
                    break
                if metrics["width"] <= box.width and metrics["height"] <= box.height:
                    break
                size -= 1
        return metrics, 1

    def _find_best_split(self, text, box):
        raw_text = RawText(text)
        target_ratio = box.width / box.height
        metrics = self._get_metrics(raw_text.to_lines())
        diff = abs(metrics["ratio"] - target_ratio)
        while raw_text.shrink():
            new_metrics = self._get_metrics(raw_text.to_lines())
            new_diff = abs(new_metrics["ratio"] - target_ratio)
            if new_diff > diff:
                pass
            else:
                diff = new_diff
                metrics = new_metrics
        return metrics

    def _get_metrics(self, splits):
        width = 0
        height = 0
        start_y = None
        parts = []
        font_ascent, font_descent = self.ctx.font_extents()[0:2]
        extra = font_descent*0.9
        for text in splits:
            extents = self.ctx.text_extents(text)
            if text == "":
                height += font_ascent*0.2
            else:
                height += font_ascent
            parts.append((-extents.x_bearing, height, extents.width, text))
            width = max(width, extents.width)
            height += font_descent
            height += extra
        height -= extra
        if height == 0:
            height = 0.1
        return {
            "parts": parts,
            "width": width,
            "height": height,
            "ratio": width / height,
        }

    def _translate_box(self, box, text_width, text_height, boxalign):
        # topleft      topcenter     topright
        # midleft        center      midright
        # bottomleft  bottomcenter  bottomright
        if boxalign in ["topright", "midright", "bottomright"]:
            xoffset = box.width-text_width
        elif boxalign in ["topcenter", "center", "bottomcenter"]:
            xoffset = box.width/2-text_width/2
        else:
            xoffset = 0
        if boxalign in ["bottomleft", "bottomcenter", "bottomright"]:
            yoffset = box.height-text_height
        elif boxalign in ["midleft", "center", "midright"]:
            yoffset = box.height/2-text_height/2
        else:
            yoffset = 0
        self.ctx.translate(box.x+xoffset, box.y+yoffset)

    def apply_color(self, **kwargs):
        color = kwargs.get("color", (0, 0, 0))
        self.ctx.set_source_rgb(color[0]/255, color[1]/255, color[2]/255)

class RawText:

    def __init__(self, text):
        self.paragraphs = [
            x.replace("\n", " ").strip()
            for x
            in text.strip().split("\n\n")
        ]
        self.character_limit = max(len(x) for x in self.paragraphs)

    def shrink(self):
        MIN = 10
        if self.character_limit > MIN:
            self.character_limit = max(MIN, int(self.character_limit*0.9))
            return True
        return False

    def to_lines(self):
        lines = []
        for x in self.paragraphs:
            if lines:
                lines.append("")
            lines.extend(self.split_on_limit(x))
        return lines

    def split_on_limit(self, line):
        lines = []
        word_buffer = []
        for word in line.split(" "):
            word_buffer.append(word)
            if len(" ".join(word_buffer)) > self.character_limit:
                lines.append(" ".join(word_buffer[:-1]))
                word_buffer = [word]
        lines.append(" ".join(word_buffer))
        return [x for x in lines if x]

class Rectangle:

    @classmethod
    def from_xywh(cls, x, y, width, height):
        return Rectangle(pos=Point(x, y), size=Point(width, height))

    def __init__(self, pos, size):
        self.pos = pos
        self.size = size

    def contains(self, point):
        return (self.pos.x <= point.x <= (self.pos.x + self.width) and
                self.pos.y <= point.y <= (self.pos.y + self.height))

    def percent(self, point):
        return Point(
            x=(point.x-self.x)/self.width,
            y=(point.y-self.y)/self.height,
        )

    @property
    def x(self):
        return self.pos.x

    @property
    def y(self):
        return self.pos.y

    @property
    def width(self):
        return self.size.x

    @property
    def height(self):
        return self.size.y

    @property
    def center(self):
        return Point(x=self.x+self.width/2, y=self.y+self.height/2)

    def cairo_path(self, ctx):
        ctx.rectangle(self.pos.x, self.pos.y, self.size.x, self.size.y)

    def columns(self, spec):
        dx = 0
        for size, item in self.split(self.size.x, spec):
            yield self.resize(width=size).move(dx=dx), item
            dx += size

    def rows(self, spec):
        dy = 0
        for size, item in self.split(self.size.y, spec):
            yield self.resize(height=size).move(dy=dy), item
            dy += size

    def split(self, total_space, spec):
        total_proportion = 0
        for item in spec:
            if "size" in item:
                total_space -= item["size"]
            else:
                total_proportion += item.get("proportion", 1)
        for item in spec:
            if "size" in item:
                size = item["size"]
            else:
                size = total_space * item.get("proportion", 1) / total_proportion
            yield size, item

    def resize(self, width=None, height=None, dw=0, dh=0):
        return Rectangle(
            pos=self.pos,
            size=self.size.set(x=width, y=height).move(dx=dw, dy=dh)
        )

    def move(self, dx=0, dy=0):
        return Rectangle(pos=self.pos.move(dx=dx, dy=dy), size=self.size)

    def deflate(self, amount=0, width=None, height=None):
        if width is None:
            width = amount
        if height is None:
            height = amount
        return Rectangle(
            pos=self.pos.move(dx=width, dy=height),
            size=self.size.move(dx=width*-2, dy=height*-2)
        )

class Point:

    def __init__(self, x, y):
        self.x = x
        self.y = y

    def set(self, x=None, y=None):
        return Point(
            x=self.x if x is None else x,
            y=self.y if y is None else y
        )

    def move(self, dx=0, dy=0):
        return Point(x=self.x+dx, y=self.y+dy)

    def distance_to(self, point):
        return Point(x=abs(point.x-self.x), y=abs(point.y-self.y))

## COMPILE SEP

import importlib
import sys

class LiveApp:

    def __init__(self):
        self.load_app()
        self.reload_timer = Timer(300)

    def event(self, event):
        self.app.event(event)

    def update(self, elapsed_ms):
        if self.reload_timer.check_and_reset(elapsed_ms):
            self.reload_app()
        self.app.update(elapsed_ms)

    def draw(self, canvas):
        canvas.rows([
            {
                "fn": self.draw_header,
                "size": 20,
            },
            {
                "fn": self.app.draw,
            },
        ])

    def draw_header(self, canvas):
        canvas.fill(color=(22, 55, 88))
        canvas.text(str(self.last_mtime))

    def load_app(self):
        sys.path.insert(0, os.getcwd())
        executable, app_module = sys.argv
        self.app_module = importlib.import_module(app_module)
        self.app = self.app_module.App()
        self.last_mtime = self.stat_app_mtime()

    def reload_app(self):
        current_mtime = self.stat_app_mtime()
        if current_mtime != self.last_mtime:
            self.app_module = importlib.reload(self.app_module)
            self.app = self.app_module.App()
            self.last_mtime = current_mtime

    def stat_app_mtime(self):
        return os.stat(self.app_module.__file__).st_mtime

class Timer:

    def __init__(self, duration_ms):
        self.duration_ms = duration_ms
        self.value = 0

    def check_and_reset(self, elapsed_ms):
        check_value = self.check(elapsed_ms)
        if check_value:
            self.value = 0
        return check_value

    def check(self, elapsed_ms):
        self.value += elapsed_ms
        if self.value >= self.duration_ms:
            return True
        else:
            return False

if __name__ == "__main__":
    if "--compile" in sys.argv:
        executable, flag, app_name = sys.argv
        with open(sys.modules["__main__"].__file__) as f:
            for line in f:
                if line == "## COMPILE SEP\n":
                    break
                else:
                    sys.stdout.write(line)
        with open(app_name) as f:
            for line in f:
                sys.stdout.write(line)
        print("")
        print("if __name__ == '__main__':")
        print("    PygameCairoEngine().run(App())")
    else:
        PygameCairoEngine().run(LiveApp())
